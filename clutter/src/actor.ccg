/* Copyright (C) 2007 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <clutter/clutter-actor.h>

namespace Clutter
{

ActorBox::ActorBox(Unit x1, Unit y1, Unit x2, Unit y2)
{
  gobject_.x1 = x1;
  gobject_.y1 = y1;
  gobject_.x2 = x2;
  gobject_.y2 = y2;
}

Geometry Actor::get_geometry() const
{
  Geometry geom;
  clutter_actor_get_geometry(const_cast<ClutterActor*>(gobj()), geom.gobj());
  return geom;
}

ActorBox Actor::get_paint_area() const
{
  ActorBox box;
  clutter_actor_get_paint_area(const_cast<ClutterActor*>(gobj()), box.gobj());
  return box;
}

void Actor::get_abs_allocation_vertices(Vertex vertices[4]) const
{
  clutter_actor_get_abs_allocation_vertices(const_cast<ClutterActor*>(gobj()), reinterpret_cast<ClutterVertex*>(vertices));
}

void Actor::get_allocation_vertices(Vertex vertices[4]) const
{
  clutter_actor_get_allocation_vertices(const_cast<ClutterActor*>(gobj()), NULL, reinterpret_cast<ClutterVertex*>(vertices));
}

void Actor::get_allocation_vertices(const Glib::RefPtr<Actor>& ancestor, Vertex vertices[4]) const
{
  clutter_actor_get_allocation_vertices(const_cast<ClutterActor*>(gobj()), Glib::unwrap(ancestor), reinterpret_cast<ClutterVertex*>(vertices));
}

ActorBox Actor::get_allocation_box() const
{
  ActorBox box;
  clutter_actor_get_allocation_box(const_cast<ClutterActor*>(gobj()), box.gobj());
  return box;
}

void Actor::apply_relative_transform_to_point(const Vertex& point, Vertex& vertex) const
{
  clutter_actor_apply_relative_transform_to_point(const_cast<ClutterActor*>(gobj()), NULL, const_cast<ClutterVertex*>(point.gobj()), vertex.gobj());
}

Geometry Actor::get_allocation_geometry() const
{
  Geometry geom;
  clutter_actor_get_allocation_geometry(const_cast<ClutterActor*>(gobj()), geom.gobj());
  return geom;
}

} //namespace Clutter

