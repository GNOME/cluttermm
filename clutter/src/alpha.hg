/* Copyright (C) 2007 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>
#include <cluttermm/timeline.h>
#include <clutter/clutter.h>
 
_DEFS(cluttermm,clutter)
_PINCLUDE(glibmm/private/object_p.h)

namespace Clutter
{

class Alpha : public Glib::Object
{
  _CLASS_GOBJECT(Alpha, ClutterAlpha, CLUTTER_ALPHA, Glib::Object, GObject)
  _DERIVES_INITIALLY_UNOWNED()

public:
  /** For instance,
   * guint32 on_alpha(const Glib::RefPtr<Alpha>& alpha);
   */
  typedef sigc::slot<guint32, const Glib::RefPtr<Alpha>&> SlotAlphaFunc;

  //! @name Pre-defined Alpha Functions
  //! @{
  static guint32 ramp_inc_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 ramp_dec_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 ramp_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 sine_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 sine_inc_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 sine_dec_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 sine_half_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 sine_in_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 sine_out_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 sine_in_out_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 square_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 smoothstep_inc_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 smoothstep_dec_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 exp_inc_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 exp_dec_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 ease_in_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 ease_out_func(const Glib::RefPtr<Alpha>& alpha);
  static guint32 ease_in_out_func(const Glib::RefPtr<Alpha>& alpha);
  //! @}

protected:
  _CTOR_DEFAULT()

  /** Creates a new Alpha instance and sets the timeline and the alpha function.
   * @param timeline Timeline.
   * @param slot Alpha function.
   */
  Alpha(const Glib::RefPtr<Timeline>& timeline, const SlotAlphaFunc& slot);

public:
  enum { MAX_ALPHA = 0xFFFF };

  _WRAP_CREATE()
  _WRAP_CREATE(const Glib::RefPtr<Timeline>& timeline, const SlotAlphaFunc& slot)

  _WRAP_METHOD(void set_timeline(const Glib::RefPtr<Timeline>& timeline), clutter_alpha_set_timeline)
  _WRAP_METHOD(Glib::RefPtr<Timeline> get_timeline() const, clutter_alpha_get_timeline)
  _WRAP_METHOD(guint32 get_alpha() const, clutter_alpha_get_alpha)

  _IGNORE(clutter_alpha_set_func)
  void set_func(const SlotAlphaFunc& slot);

  _WRAP_METHOD(void set_mode(AnimationMode mode), clutter_alpha_set_mode)
  _WRAP_METHOD(AnimationMode get_mode() const, clutter_alpha_get_mode)

  _WRAP_PROPERTY("alpha", guint)
  _WRAP_PROPERTY("timeline", Glib::RefPtr<Timeline>)

  // We don't need the GClosure stuff in C++:
  _IGNORE(clutter_alpha_set_closure)
};

} // namespace Clutter
