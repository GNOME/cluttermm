/* Copyright (C) 2011 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>
#include <cluttermm/actor.h>

_DEFS(cluttermm,clutter)
_PINCLUDE(glibmm/private/object_p.h)

namespace Clutter
{

class Container;
class LayoutMeta;
class Alpha;

class LayoutManager : public Glib::Object
{
  _CLASS_GOBJECT(LayoutManager, ClutterLayoutManager, CLUTTER_LAYOUT_MANAGER, Glib::Object, GObject)
  _DERIVES_INITIALLY_UNOWNED()

protected:
  _CTOR_DEFAULT()

public:

  // not sure the valist stuff is good to wrap in C++
  _IGNORE(clutter_layout_manager_child_get, clutter_layout_manager_child_set)

  // not sure the valist stuff is good to wrap in C++
  _IGNORE(clutter_layout_manager_child_get, clutter_layout_manager_child_set,
          clutter_layout_manager_class_find_child_property,
          clutter_layout_manager_class_list_child_properties)

  template <class PropertyType> inline
  void set_child_property(const Glib::RefPtr<Container>& container, const Glib::RefPtr<Actor>& child, const Glib::ustring& property_name, const PropertyType& value);

  _WRAP_METHOD(void set_child_property_value(const Glib::RefPtr<Container>& container, const Glib::RefPtr<Actor>& child, const Glib::ustring& property_name, const Glib::ValueBase& value), clutter_layout_manager_child_set_property)

  template <class PropertyType> inline
  void get_child_property(const Glib::RefPtr<Container>& container, const Glib::RefPtr<const Actor>& actor, const Glib::ustring& property_name, PropertyType& value) const;

  void get_child_property_value(const Glib::RefPtr<Container>& container, const Glib::RefPtr<const Actor>& actor, const Glib::ustring& property_name, Glib::ValueBase& value) const;
  _IGNORE(clutter_layout_manager_child_get_property)

#m4 _CONVERSION(`ClutterContainer*', `const Glib::RefPtr<Container>&', `Glib::wrap($3, true)')
#m4 _CONVERSION(`float*', `float&', `*($3)')
#m4 _CONVERSION(`float&', `float*', `&($3)')
  _WRAP_METHOD(void get_preferred_width(const Glib::RefPtr<Container>& container, float for_height, float& min_width_p, float& natural_width_p) const, clutter_layout_manager_get_preferred_width)
  _WRAP_METHOD(void get_preferred_height(const Glib::RefPtr<Container>& container, float for_width, float& min_height_p, float& natural_height_p) const, clutter_layout_manager_get_preferred_height)

#m4 _CONVERSION(`const ClutterActorBox*', `const ActorBox&', `ActorBox($3)')
  _WRAP_METHOD(void allocate(const Glib::RefPtr<Container>& container, const ActorBox& box, AllocationFlags absolute_origin_changed), clutter_layout_manager_allocate)

  _WRAP_METHOD(void set_container(const Glib::RefPtr<Container>& container), clutter_layout_manager_set_container)
  _WRAP_METHOD(void layout_changed(), clutter_layout_manager_layout_changed)
  _WRAP_METHOD(GType get_child_meta_type() const, clutter_layout_manager_get_child_meta_type)

#m4 _CONVERSION(`ClutterActor*', `const Glib::RefPtr<Actor>&', `Glib::wrap($3, true)')
  _WRAP_METHOD(Glib::RefPtr<LayoutMeta> create_child_meta(const Glib::RefPtr<Container>& container, const Glib::RefPtr<Actor>& actor), clutter_layout_manager_create_child_meta, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const LayoutMeta> create_child_meta(const Glib::RefPtr<Container>& container, const Glib::RefPtr<Actor>& actor) const, clutter_layout_manager_create_child_meta, refreturn, constversion)

  _WRAP_METHOD(Glib::RefPtr<LayoutMeta> get_child_meta(const Glib::RefPtr<Container>& container, const Glib::RefPtr<Actor>& actor), clutter_layout_manager_get_child_meta, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const LayoutMeta> get_child_meta(const Glib::RefPtr<Container>& container, const Glib::RefPtr<Actor>& actor) const, clutter_layout_manager_get_child_meta, refreturn, constversion)

  _WRAP_VFUNC(void get_preferred_width(const Glib::RefPtr<Container>& container, float for_height, float& min_width_p, float& natural_width_p) const, "get_preferred_width")

  _WRAP_VFUNC(void get_preferred_height(const Glib::RefPtr<Container>& container, float for_width, float& min_height_p, float& natural_height_p) const, "get_preferred_height")

  _WRAP_VFUNC(void allocate(const Glib::RefPtr<Container>& container, const ActorBox& box, AllocationFlags absolute_origin_changed), "allocate")

  _WRAP_VFUNC(void set_container(const Glib::RefPtr<Container>& container), "set_container")
  _WRAP_VFUNC(GType get_child_meta_type() const, "get_child_meta_type")

#m4 _CONVERSION(`Glib::RefPtr<LayoutMeta>',`ClutterLayoutMeta*',__CONVERT_REFPTR_TO_P)
  _WRAP_VFUNC(Glib::RefPtr<LayoutMeta> create_child_meta(const Glib::RefPtr<Container>& container, const Glib::RefPtr<Actor>& actor), "create_child_meta")

  _WRAP_VFUNC(double get_animation_progress(), "get_animation_progress")
  _WRAP_VFUNC(void end_animation(), "end_animation")

  _WRAP_SIGNAL(void layout_changed(), "layout-changed")
};

template <class PropertyType> inline
void LayoutManager::set_child_property(const Glib::RefPtr<Container>& container, const Glib::RefPtr<Actor>& actor, const Glib::ustring& property_name, const PropertyType& value)
{
  Glib::Value<PropertyType> property_value;
  property_value.init(Glib::Value<PropertyType>::value_type());

  property_value.set(value);
  this->set_child_property_value(container, actor, property_name, property_value);
}

template <class PropertyType> inline
void LayoutManager::get_child_property(const Glib::RefPtr<Container>& container, const Glib::RefPtr<const Actor>& actor, const Glib::ustring& property_name, PropertyType& value) const
{
  Glib::Value<PropertyType> property_value;
  property_value.init(Glib::Value<PropertyType>::value_type());

  this->get_child_property_value(container, actor, property_name, property_value);

  value = property_value.get();
}

} // namespace Clutter
