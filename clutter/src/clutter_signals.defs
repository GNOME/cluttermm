;; From ClutterAction

;; From ClutterActor

(define-signal destroy
  (of-object "ClutterActor")
  (return-type "void")
  (when "unknown")
)

(define-signal show
  (of-object "ClutterActor")
  (return-type "void")
  (when "first")
)

(define-signal hide
  (of-object "ClutterActor")
  (return-type "void")
  (when "first")
)

(define-signal parent-set
  (of-object "ClutterActor")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal queue-redraw
  (of-object "ClutterActor")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal queue-relayout
  (of-object "ClutterActor")
  (return-type "void")
  (when "last")
)

(define-signal event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterEvent*" "p0")
  )
)
;; Hand-edited to use more specific event type
(define-signal button-press-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterButtonEvent*" "p0")
  )
)

;; Hand-edited to use more specific event type
(define-signal button-release-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterButtonEvent*" "p0")
  )
)

;; Hand-edited to use more specific event type
(define-signal scroll-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterScrollEvent*" "p0")
  )
)

;; Hand-edited to use more specific event type
(define-signal key-press-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterKeyEvent*" "p0")
  )
)

;; Hand-edited to use more specific event type
(define-signal key-release-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterKeyEvent*" "p0")
  )
)

;; Hand-edited to use more specific event type
(define-signal motion-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterMotionEvent*" "p0")
  )
)

(define-signal key-focus-in
  (of-object "ClutterActor")
  (return-type "void")
  (when "last")
)

(define-signal key-focus-out
  (of-object "ClutterActor")
  (return-type "void")
  (when "last")
)

;; Hand-edited to use more specific event type
(define-signal enter-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterCrossingEvent*" "p0")
  )
)

;; Hand-edited to use more specific event type
(define-signal leave-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterCrossingEvent*" "p0")
  )
)

(define-signal captured-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterEvent*" "p0")
  )
)

(define-signal paint
  (of-object "ClutterActor")
  (return-type "void")
  (when "last")
)

(define-signal realize
  (of-object "ClutterActor")
  (return-type "void")
  (when "last")
)

(define-signal unrealize
  (of-object "ClutterActor")
  (return-type "void")
  (when "last")
)

(define-signal pick
  (of-object "ClutterActor")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterColor*" "p0")
  )
)

(define-signal allocation-changed
  (of-object "ClutterActor")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActorBox*" "p0")
    '("ClutterAllocationFlags" "p1")
  )
)

(define-signal transitions-completed
  (of-object "ClutterActor")
  (return-type "void")
  (when "last")
)

(define-signal transition-stopped
  (of-object "ClutterActor")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
    '("gboolean" "p1")
  )
)

(define-signal touch-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterTouchEvent*" "p0")
  )
)

(define-property name
  (of-object "ClutterActor")
  (prop-type "GParamString")
  (docs "Name of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property x
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "X coordinate of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Y coordinate of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Width of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Height of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property position
  (of-object "ClutterActor")
  (prop-type "GParamBoxed")
  (docs "The position of the origin of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size
  (of-object "ClutterActor")
  (prop-type "GParamBoxed")
  (docs "The size of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property fixed-x
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Forced X position of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property fixed-y
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Forced Y position of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property fixed-position-set
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether to use fixed positioning for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property min-width
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Forced minimum width request for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property min-width-set
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether to use the min-width property")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property min-height
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Forced minimum height request for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property min-height-set
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether to use the min-height property")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property natural-width
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Forced natural width request for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property natural-width-set
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether to use the natural-width property")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property natural-height
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Forced natural height request for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property natural-height-set
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether to use the natural-height property")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property request-mode
  (of-object "ClutterActor")
  (prop-type "GParamEnum")
  (docs "The actor's request mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allocation
  (of-object "ClutterActor")
  (prop-type "GParamBoxed")
  (docs "The actor's allocation")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property depth
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Position on the Z axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property z-position
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "The actor's position on the Z axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property clip
  (of-object "ClutterActor")
  (prop-type "GParamBoxed")
  (docs "The clip region for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property clip-rect
  (of-object "ClutterActor")
  (prop-type "GParamBoxed")
  (docs "The visible region of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-clip
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether the actor has a clip set")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property clip-to-allocation
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Sets the clip region to track the actor's allocation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property opacity
  (of-object "ClutterActor")
  (prop-type "GParamUInt")
  (docs "Opacity of an actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property offscreen-redirect
  (of-object "ClutterActor")
  (prop-type "GParamFlags")
  (docs "Flags controlling when to flatten the actor into a single image")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is visible or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property mapped
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether the actor will be painted")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property realized
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether the actor has been realized")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property reactive
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is reactive to events")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pivot-point
  (of-object "ClutterActor")
  (prop-type "GParamBoxed")
  (docs "The point around which the scaling and rotation occur")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pivot-point-z
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Z component of the pivot point")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-x
  (of-object "ClutterActor")
  (prop-type "GParamDouble")
  (docs "Scale factor on the X axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-y
  (of-object "ClutterActor")
  (prop-type "GParamDouble")
  (docs "Scale factor on the Y axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-z
  (of-object "ClutterActor")
  (prop-type "GParamDouble")
  (docs "Scale factor on the Z axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-center-x
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Horizontal scale center")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-center-y
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Vertical scale center")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-gravity
  (of-object "ClutterActor")
  (prop-type "GParamEnum")
  (docs "The center of scaling")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rotation-angle-x
  (of-object "ClutterActor")
  (prop-type "GParamDouble")
  (docs "The rotation angle on the X axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rotation-angle-y
  (of-object "ClutterActor")
  (prop-type "GParamDouble")
  (docs "The rotation angle on the Y axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rotation-angle-z
  (of-object "ClutterActor")
  (prop-type "GParamDouble")
  (docs "The rotation angle on the Z axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rotation-center-x
  (of-object "ClutterActor")
  (prop-type "GParamBoxed")
  (docs "The rotation center on the X axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rotation-center-y
  (of-object "ClutterActor")
  (prop-type "GParamBoxed")
  (docs "The rotation center on the Y axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rotation-center-z
  (of-object "ClutterActor")
  (prop-type "GParamBoxed")
  (docs "The rotation center on the Z axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rotation-center-z-gravity
  (of-object "ClutterActor")
  (prop-type "GParamEnum")
  (docs "Center point for rotation around the Z axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property anchor-x
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "X coordinate of the anchor point")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property anchor-y
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Y coordinate of the anchor point")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property anchor-gravity
  (of-object "ClutterActor")
  (prop-type "GParamEnum")
  (docs "The anchor point as a ClutterGravity")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property translation-x
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Translation along the X axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property translation-y
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Translation along the Y axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property translation-z
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Translation along the Z axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property transform
  (of-object "ClutterActor")
  (prop-type "GParamBoxed")
  (docs "Transformation matrix")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property transform-set
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether the transform property is set")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property child-transform
  (of-object "ClutterActor")
  (prop-type "GParamBoxed")
  (docs "Children transformation matrix")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child-transform-set
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether the child-transform property is set")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property show-on-set-parent
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is shown when parented")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text-direction
  (of-object "ClutterActor")
  (prop-type "GParamEnum")
  (docs "Direction of the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-pointer
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether the actor contains the pointer of an input device")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property actions
  (of-object "ClutterActor")
  (prop-type "GParamObject")
  (docs "Adds an action to the actor")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property constraints
  (of-object "ClutterActor")
  (prop-type "GParamObject")
  (docs "Adds a constraint to the actor")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property effect
  (of-object "ClutterActor")
  (prop-type "GParamObject")
  (docs "Add an effect to be applied on the actor")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property layout-manager
  (of-object "ClutterActor")
  (prop-type "GParamObject")
  (docs "The object controlling the layout of an actor's children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property x-expand
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether extra horizontal space should be assigned to the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y-expand
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether extra vertical space should be assigned to the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property x-align
  (of-object "ClutterActor")
  (prop-type "GParamEnum")
  (docs "The alignment of the actor on the X axis within its allocation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y-align
  (of-object "ClutterActor")
  (prop-type "GParamEnum")
  (docs "The alignment of the actor on the Y axis within its allocation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property margin-top
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Extra space at the top")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property margin-bottom
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Extra space at the bottom")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property margin-left
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Extra space at the left")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property margin-right
  (of-object "ClutterActor")
  (prop-type "GParamFloat")
  (docs "Extra space at the right")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background-color
  (of-object "ClutterActor")
  (prop-type "ClutterParamSpecColor")
  (docs "The actor's background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background-color-set
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether the background color is set")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property first-child
  (of-object "ClutterActor")
  (prop-type "GParamObject")
  (docs "The actor's first child")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property last-child
  (of-object "ClutterActor")
  (prop-type "GParamObject")
  (docs "The actor's last child")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property content
  (of-object "ClutterActor")
  (prop-type "GParamObject")
  (docs "Delegate object for painting the actor's content")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property content-gravity
  (of-object "ClutterActor")
  (prop-type "GParamEnum")
  (docs "Alignment of the actor's content")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property content-box
  (of-object "ClutterActor")
  (prop-type "GParamBoxed")
  (docs "The bounding box of the actor's content")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property minification-filter
  (of-object "ClutterActor")
  (prop-type "GParamEnum")
  (docs "The filter used when reducing the size of the content")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property magnification-filter
  (of-object "ClutterActor")
  (prop-type "GParamEnum")
  (docs "The filter used when increasing the size of the content")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property content-repeat
  (of-object "ClutterActor")
  (prop-type "GParamFlags")
  (docs "The repeat policy for the actor's content")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterActorMeta

(define-property actor
  (of-object "ClutterActorMeta")
  (prop-type "GParamObject")
  (docs "The actor attached to the meta")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property name
  (of-object "ClutterActorMeta")
  (prop-type "GParamString")
  (docs "The name of the meta")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property enabled
  (of-object "ClutterActorMeta")
  (prop-type "GParamBoolean")
  (docs "Whether the meta is enabled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterAction

;; From ClutterAlignConstraint

(define-property source
  (of-object "ClutterAlignConstraint")
  (prop-type "GParamObject")
  (docs "The source of the alignment")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property align-axis
  (of-object "ClutterAlignConstraint")
  (prop-type "GParamEnum")
  (docs "The axis to align the position to")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property factor
  (of-object "ClutterAlignConstraint")
  (prop-type "GParamFloat")
  (docs "The alignment factor, between 0.0 and 1.0")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterAnimatable

;; From ClutterAlpha

(define-property timeline
  (of-object "ClutterAlpha")
  (prop-type "GParamObject")
  (docs "Timeline used by the alpha")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property alpha
  (of-object "ClutterAlpha")
  (prop-type "GParamDouble")
  (docs "Alpha value as computed by the alpha")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property mode
  (of-object "ClutterAlpha")
  (prop-type "GParamULong")
  (docs "Progress mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterAnimatable

;; From ClutterAnimation

(define-signal completed
  (of-object "ClutterAnimation")
  (return-type "void")
  (when "last")
)

(define-signal started
  (of-object "ClutterAnimation")
  (return-type "void")
  (when "last")
)

(define-property object
  (of-object "ClutterAnimation")
  (prop-type "GParamObject")
  (docs "Object to which the animation applies")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property mode
  (of-object "ClutterAnimation")
  (prop-type "GParamULong")
  (docs "The mode of the animation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property duration
  (of-object "ClutterAnimation")
  (prop-type "GParamUInt")
  (docs "Duration of the animation, in milliseconds")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property loop
  (of-object "ClutterAnimation")
  (prop-type "GParamBoolean")
  (docs "Whether the animation should loop")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property timeline
  (of-object "ClutterAnimation")
  (prop-type "GParamObject")
  (docs "The timeline used by the animation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property alpha
  (of-object "ClutterAnimation")
  (prop-type "GParamObject")
  (docs "The alpha used by the animation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterAnimator

(define-property duration
  (of-object "ClutterAnimator")
  (prop-type "GParamUInt")
  (docs "The duration of the animation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property timeline
  (of-object "ClutterAnimator")
  (prop-type "GParamObject")
  (docs "The timeline of the animation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBackend

(define-signal resolution-changed
  (of-object "ClutterBackend")
  (return-type "void")
  (when "first")
)

(define-signal font-changed
  (of-object "ClutterBackend")
  (return-type "void")
  (when "first")
)

(define-signal settings-changed
  (of-object "ClutterBackend")
  (return-type "void")
  (when "first")
)

;; From ClutterBehaviourDepth

(define-property depth-start
  (of-object "ClutterBehaviourDepth")
  (prop-type "GParamInt")
  (docs "Initial depth to apply")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property depth-end
  (of-object "ClutterBehaviourDepth")
  (prop-type "GParamInt")
  (docs "Final depth to apply")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBehaviourEllipse

(define-property center
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamBoxed")
  (docs "Center of ellipse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamInt")
  (docs "Width of the ellipse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamInt")
  (docs "Height of ellipse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle-start
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamDouble")
  (docs "Initial angle")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle-end
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamDouble")
  (docs "Final angle")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle-tilt-x
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamDouble")
  (docs "Tilt of the ellipse around x axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle-tilt-y
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamDouble")
  (docs "Tilt of the ellipse around y axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle-tilt-z
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamDouble")
  (docs "Tilt of the ellipse around z axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property direction
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamEnum")
  (docs "Direction of rotation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBehaviour

(define-signal applied
  (of-object "ClutterBehaviour")
  (return-type "void")
  (when "first")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal removed
  (of-object "ClutterBehaviour")
  (return-type "void")
  (when "first")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-property alpha
  (of-object "ClutterBehaviour")
  (prop-type "GParamObject")
  (docs "Alpha Object to drive the behaviour")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBehaviourOpacity

(define-property opacity-start
  (of-object "ClutterBehaviourOpacity")
  (prop-type "GParamUInt")
  (docs "Initial opacity level")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property opacity-end
  (of-object "ClutterBehaviourOpacity")
  (prop-type "GParamUInt")
  (docs "Final opacity level")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBehaviourPath

(define-signal knot-reached
  (of-object "ClutterBehaviourPath")
  (return-type "void")
  (when "last")
  (parameters
    '("guint" "p0")
  )
)

(define-property path
  (of-object "ClutterBehaviourPath")
  (prop-type "GParamObject")
  (docs "The ClutterPath object representing the path to animate along")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBehaviourRotate

(define-property angle-start
  (of-object "ClutterBehaviourRotate")
  (prop-type "GParamDouble")
  (docs "Initial angle")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle-end
  (of-object "ClutterBehaviourRotate")
  (prop-type "GParamDouble")
  (docs "Final angle")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property axis
  (of-object "ClutterBehaviourRotate")
  (prop-type "GParamEnum")
  (docs "Axis of rotation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property direction
  (of-object "ClutterBehaviourRotate")
  (prop-type "GParamEnum")
  (docs "Direction of rotation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property center-x
  (of-object "ClutterBehaviourRotate")
  (prop-type "GParamInt")
  (docs "X coordinate of the center of rotation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property center-y
  (of-object "ClutterBehaviourRotate")
  (prop-type "GParamInt")
  (docs "Y coordinate of the center of rotation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property center-z
  (of-object "ClutterBehaviourRotate")
  (prop-type "GParamInt")
  (docs "Z coordinate of the center of rotation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBehaviourScale

(define-property x-scale-start
  (of-object "ClutterBehaviourScale")
  (prop-type "GParamDouble")
  (docs "Initial scale on the X axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y-scale-start
  (of-object "ClutterBehaviourScale")
  (prop-type "GParamDouble")
  (docs "Initial scale on the Y axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property x-scale-end
  (of-object "ClutterBehaviourScale")
  (prop-type "GParamDouble")
  (docs "Final scale on the X axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y-scale-end
  (of-object "ClutterBehaviourScale")
  (prop-type "GParamDouble")
  (docs "Final scale on the Y axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBinLayout

(define-property x-align
  (of-object "ClutterBinLayout")
  (prop-type "GParamEnum")
  (docs "Default horizontal alignment for the actors inside the layout manager")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y-align
  (of-object "ClutterBinLayout")
  (prop-type "GParamEnum")
  (docs "Default vertical alignment for the actors inside the layout manager")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBindConstraint

(define-property source
  (of-object "ClutterBindConstraint")
  (prop-type "GParamObject")
  (docs "The source of the binding")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property coordinate
  (of-object "ClutterBindConstraint")
  (prop-type "GParamEnum")
  (docs "The coordinate to bind")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property offset
  (of-object "ClutterBindConstraint")
  (prop-type "GParamFloat")
  (docs "The offset in pixels to apply to the binding")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBlurEffect

;; From ClutterBox

(define-property color
  (of-object "ClutterBox")
  (prop-type "ClutterParamSpecColor")
  (docs "The background color of the box")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property color-set
  (of-object "ClutterBox")
  (prop-type "GParamBoolean")
  (docs "Whether the background color is set")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBoxLayout

(define-property spacing
  (of-object "ClutterBoxLayout")
  (prop-type "GParamUInt")
  (docs "Spacing between children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property vertical
  (of-object "ClutterBoxLayout")
  (prop-type "GParamBoolean")
  (docs "Whether the layout should be vertical, rather than horizontal")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property homogeneous
  (of-object "ClutterBoxLayout")
  (prop-type "GParamBoolean")
  (docs "Whether the layout should be homogeneous, i.e. all childs get the same size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pack-start
  (of-object "ClutterBoxLayout")
  (prop-type "GParamBoolean")
  (docs "Whether to pack items at the start of the box")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-animations
  (of-object "ClutterBoxLayout")
  (prop-type "GParamBoolean")
  (docs "Whether layout changes should be animated")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property easing-mode
  (of-object "ClutterBoxLayout")
  (prop-type "GParamULong")
  (docs "The easing mode of the animations")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property easing-duration
  (of-object "ClutterBoxLayout")
  (prop-type "GParamUInt")
  (docs "The duration of the animations")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property orientation
  (of-object "ClutterBoxLayout")
  (prop-type "GParamEnum")
  (docs "The orientation of the layout")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBrightnessContrastEffect

(define-property brightness
  (of-object "ClutterBrightnessContrastEffect")
  (prop-type "ClutterParamSpecColor")
  (docs "The brightness change to apply")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property contrast
  (of-object "ClutterBrightnessContrastEffect")
  (prop-type "ClutterParamSpecColor")
  (docs "The contrast change to apply")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterCairoTexture

(define-signal draw
  (of-object "ClutterCairoTexture")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("cairo_t*" "p0")
  )
)

(define-signal create-surface
  (of-object "ClutterCairoTexture")
  (return-type "CairoSurface*")
  (when "last")
  (parameters
    '("guint" "p0")
    '("guint" "p1")
  )
)

(define-property surface-width
  (of-object "ClutterCairoTexture")
  (prop-type "GParamUInt")
  (docs "The width of the Cairo surface")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property surface-height
  (of-object "ClutterCairoTexture")
  (prop-type "GParamUInt")
  (docs "The height of the Cairo surface")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property auto-resize
  (of-object "ClutterCairoTexture")
  (prop-type "GParamBoolean")
  (docs "Whether the surface should match the allocation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterCanvas

(define-signal draw
  (of-object "ClutterCanvas")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("cairo_t*" "p0")
    '("gint" "p1")
    '("gint" "p2")
  )
)

(define-property width
  (of-object "ClutterCanvas")
  (prop-type "GParamInt")
  (docs "The width of the canvas")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "ClutterCanvas")
  (prop-type "GParamInt")
  (docs "The height of the canvas")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-factor
  (of-object "ClutterCanvas")
  (prop-type "GParamInt")
  (docs "The scaling factor for the surface")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-factor-set
  (of-object "ClutterCanvas")
  (prop-type "GParamBoolean")
  (docs "Whether the scale-factor property is set")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From ClutterChildMeta

(define-property container
  (of-object "ClutterChildMeta")
  (prop-type "GParamObject")
  (docs "The container that created this data")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property actor
  (of-object "ClutterChildMeta")
  (prop-type "GParamObject")
  (docs "The actor wrapped by this data")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From ClutterClickAction

(define-signal clicked
  (of-object "ClutterClickAction")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal long-press
  (of-object "ClutterClickAction")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
    '("ClutterLongPressState" "p1")
  )
)

(define-property held
  (of-object "ClutterClickAction")
  (prop-type "GParamBoolean")
  (docs "Whether the clickable has a grab")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property pressed
  (of-object "ClutterClickAction")
  (prop-type "GParamBoolean")
  (docs "Whether the clickable should be in pressed state")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property long-press-threshold
  (of-object "ClutterClickAction")
  (prop-type "GParamInt")
  (docs "The maximum threshold before a long press is cancelled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property long-press-duration
  (of-object "ClutterClickAction")
  (prop-type "GParamInt")
  (docs "The minimum duration of a long press to recognize the gesture")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterClone

(define-property source
  (of-object "ClutterClone")
  (prop-type "GParamObject")
  (docs "Specifies the actor to be cloned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; ClutterColor is neither a GObject nor a GInterface. Not checked for signals and properties.

;; From ClutterColorizeEffect

(define-property tint
  (of-object "ClutterColorizeEffect")
  (prop-type "ClutterParamSpecColor")
  (docs "The tint to apply")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterConstraint

;; From ClutterContent

(define-signal attached
  (of-object "ClutterContent")
  (return-type "void")
  (when "first")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal detached
  (of-object "ClutterContent")
  (return-type "void")
  (when "first")
  (parameters
    '("ClutterActor*" "p0")
  )
)

;; From ClutterContainer

(define-signal actor-added
  (of-object "ClutterContainer")
  (return-type "void")
  (when "first")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal actor-removed
  (of-object "ClutterContainer")
  (return-type "void")
  (when "first")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal child-notify
  (of-object "ClutterContainer")
  (return-type "void")
  (when "first")
  (parameters
    '("ClutterActor*" "p0")
    '("GParam" "p1")
  )
)

;; From ClutterContent

(define-signal attached
  (of-object "ClutterContent")
  (return-type "void")
  (when "first")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal detached
  (of-object "ClutterContent")
  (return-type "void")
  (when "first")
  (parameters
    '("ClutterActor*" "p0")
  )
)

;; From ClutterDeformEffect

(define-property x-tiles
  (of-object "ClutterDeformEffect")
  (prop-type "GParamUInt")
  (docs "The number of horizontal tiles")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y-tiles
  (of-object "ClutterDeformEffect")
  (prop-type "GParamUInt")
  (docs "The number of vertical tiles")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property back-material
  (of-object "ClutterDeformEffect")
  (prop-type "GParamBoxed")
  (docs "The material to be used when painting the back of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterDeviceManager

(define-signal device-added
  (of-object "ClutterDeviceManager")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterInputDevice*" "p0")
  )
)

(define-signal device-removed
  (of-object "ClutterDeviceManager")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterInputDevice*" "p0")
  )
)

(define-property backend
  (of-object "ClutterDeviceManager")
  (prop-type "GParamObject")
  (docs "The ClutterBackend of the device manager")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From ClutterDesaturateEffect

(define-property factor
  (of-object "ClutterDesaturateEffect")
  (prop-type "GParamDouble")
  (docs "The desaturation factor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterDragAction

(define-signal drag-begin
  (of-object "ClutterDragAction")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
    '("gfloat" "p1")
    '("gfloat" "p2")
    '("ClutterModifierType" "p3")
  )
)

(define-signal drag-progress
  (of-object "ClutterDragAction")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
    '("gfloat" "p1")
    '("gfloat" "p2")
  )
)

(define-signal drag-motion
  (of-object "ClutterDragAction")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
    '("gfloat" "p1")
    '("gfloat" "p2")
  )
)

(define-signal drag-end
  (of-object "ClutterDragAction")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
    '("gfloat" "p1")
    '("gfloat" "p2")
    '("ClutterModifierType" "p3")
  )
)

(define-property x-drag-threshold
  (of-object "ClutterDragAction")
  (prop-type "GParamInt")
  (docs "The horizontal amount of pixels required to start dragging")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y-drag-threshold
  (of-object "ClutterDragAction")
  (prop-type "GParamInt")
  (docs "The vertical amount of pixels required to start dragging")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property drag-handle
  (of-object "ClutterDragAction")
  (prop-type "GParamObject")
  (docs "The actor that is being dragged")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property drag-axis
  (of-object "ClutterDragAction")
  (prop-type "GParamEnum")
  (docs "Constraints the dragging to an axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property drag-area
  (of-object "ClutterDragAction")
  (prop-type "GParamBoxed")
  (docs "Constrains the dragging to a rectangle")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property drag-area-set
  (of-object "ClutterDragAction")
  (prop-type "GParamBoolean")
  (docs "Whether the drag area is set")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From ClutterDropAction

(define-signal can-drop
  (of-object "ClutterDropAction")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
    '("gfloat" "p1")
    '("gfloat" "p2")
  )
)

(define-signal over-in
  (of-object "ClutterDropAction")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal over-out
  (of-object "ClutterDropAction")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal drop
  (of-object "ClutterDropAction")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
    '("gfloat" "p1")
    '("gfloat" "p2")
  )
)

(define-signal drop-cancel
  (of-object "ClutterDropAction")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
    '("gfloat" "p1")
    '("gfloat" "p2")
  )
)

;; From ClutterEffect

;; ClutterEvent is neither a GObject nor a GInterface. Not checked for signals and properties.

;; From ClutterFixedLayout

;; From ClutterFlowLayout

(define-property orientation
  (of-object "ClutterFlowLayout")
  (prop-type "GParamEnum")
  (docs "The orientation of the layout")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property homogeneous
  (of-object "ClutterFlowLayout")
  (prop-type "GParamBoolean")
  (docs "Whether each item should receive the same allocation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property column-spacing
  (of-object "ClutterFlowLayout")
  (prop-type "GParamFloat")
  (docs "The spacing between columns")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property row-spacing
  (of-object "ClutterFlowLayout")
  (prop-type "GParamFloat")
  (docs "The spacing between rows")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property min-column-width
  (of-object "ClutterFlowLayout")
  (prop-type "GParamFloat")
  (docs "Minimum width for each column")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-column-width
  (of-object "ClutterFlowLayout")
  (prop-type "GParamFloat")
  (docs "Maximum width for each column")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property min-row-height
  (of-object "ClutterFlowLayout")
  (prop-type "GParamFloat")
  (docs "Minimum height for each row")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-row-height
  (of-object "ClutterFlowLayout")
  (prop-type "GParamFloat")
  (docs "Maximum height for each row")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property snap-to-grid
  (of-object "ClutterFlowLayout")
  (prop-type "GParamBoolean")
  (docs "Snap to grid")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterGestureAction

(define-signal gesture-begin
  (of-object "ClutterGestureAction")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal gesture-progress
  (of-object "ClutterGestureAction")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal gesture-end
  (of-object "ClutterGestureAction")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal gesture-cancel
  (of-object "ClutterGestureAction")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-property n-touch-points
  (of-object "ClutterGestureAction")
  (prop-type "GParamInt")
  (docs "Number of touch points")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property threshold-trigger-edge
  (of-object "ClutterGestureAction")
  (prop-type "GParamEnum")
  (docs "The trigger edge used by the action")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property threshold-trigger-distance-x
  (of-object "ClutterGestureAction")
  (prop-type "GParamFloat")
  (docs "The horizontal trigger distance used by the action")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property threshold-trigger-distance-y
  (of-object "ClutterGestureAction")
  (prop-type "GParamFloat")
  (docs "The vertical trigger distance used by the action")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From ClutterGridLayout

(define-property orientation
  (of-object "ClutterGridLayout")
  (prop-type "GParamEnum")
  (docs "The orientation of the layout")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property row-spacing
  (of-object "ClutterGridLayout")
  (prop-type "GParamUInt")
  (docs "The amount of space between two consecutive rows")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property column-spacing
  (of-object "ClutterGridLayout")
  (prop-type "GParamUInt")
  (docs "The amount of space between two consecutive columns")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property row-homogeneous
  (of-object "ClutterGridLayout")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the rows are all the same height")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property column-homogeneous
  (of-object "ClutterGridLayout")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the columns are all the same width")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterGroup

;; From ClutterInterval

(define-property value-type
  (of-object "ClutterInterval")
  (prop-type "GParamGType")
  (docs "The type of the values in the interval")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property initial
  (of-object "ClutterInterval")
  (prop-type "GParamBoxed")
  (docs "Initial value of the interval")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property final
  (of-object "ClutterInterval")
  (prop-type "GParamBoxed")
  (docs "Final value of the interval")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterImage

;; From ClutterInputDevice

(define-property backend
  (of-object "ClutterInputDevice")
  (prop-type "GParamObject")
  (docs "The backend instance")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property id
  (of-object "ClutterInputDevice")
  (prop-type "GParamInt")
  (docs "Unique identifier of the device")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property name
  (of-object "ClutterInputDevice")
  (prop-type "GParamString")
  (docs "The name of the device")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property device-type
  (of-object "ClutterInputDevice")
  (prop-type "GParamEnum")
  (docs "The type of the device")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property device-manager
  (of-object "ClutterInputDevice")
  (prop-type "GParamObject")
  (docs "The device manager instance")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property device-mode
  (of-object "ClutterInputDevice")
  (prop-type "GParamEnum")
  (docs "The mode of the device")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property has-cursor
  (of-object "ClutterInputDevice")
  (prop-type "GParamBoolean")
  (docs "Whether the device has a cursor")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property enabled
  (of-object "ClutterInputDevice")
  (prop-type "GParamBoolean")
  (docs "Whether the device is enabled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property n-axes
  (of-object "ClutterInputDevice")
  (prop-type "GParamUInt")
  (docs "The number of axes on the device")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From ClutterInterval

(define-property value-type
  (of-object "ClutterInterval")
  (prop-type "GParamGType")
  (docs "The type of the values in the interval")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property initial
  (of-object "ClutterInterval")
  (prop-type "GParamBoxed")
  (docs "Initial value of the interval")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property final
  (of-object "ClutterInterval")
  (prop-type "GParamBoxed")
  (docs "Final value of the interval")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterKeyframeTransition

;; From ClutterLayoutManager

(define-signal layout-changed
  (of-object "ClutterLayoutManager")
  (return-type "void")
  (when "last")
)

;; From ClutterLayoutMeta

(define-property manager
  (of-object "ClutterLayoutMeta")
  (prop-type "GParamObject")
  (docs "The manager that created this data")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From ClutterListModel

;; From ClutterMedia

(define-signal eos
  (of-object "ClutterMedia")
  (return-type "void")
  (when "last")
)

(define-signal error
  (of-object "ClutterMedia")
  (return-type "void")
  (when "last")
  (parameters
    '("GError*" "p0")
  )
)

(define-property audio-volume
  (of-object "ClutterMedia")
  (prop-type "GParamDouble")
  (docs "The volume of the audio")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property buffer-fill
  (of-object "ClutterMedia")
  (prop-type "GParamDouble")
  (docs "The fill level of the buffer")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property can-seek
  (of-object "ClutterMedia")
  (prop-type "GParamBoolean")
  (docs "Whether the current stream is seekable")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property duration
  (of-object "ClutterMedia")
  (prop-type "GParamDouble")
  (docs "The duration of the stream, in seconds")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property playing
  (of-object "ClutterMedia")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is playing")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property progress
  (of-object "ClutterMedia")
  (prop-type "GParamDouble")
  (docs "Current progress of the playback")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property subtitle-font-name
  (of-object "ClutterMedia")
  (prop-type "GParamString")
  (docs "The font used to display subtitles")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property subtitle-uri
  (of-object "ClutterMedia")
  (prop-type "GParamString")
  (docs "URI of a subtitle file")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property uri
  (of-object "ClutterMedia")
  (prop-type "GParamString")
  (docs "URI of a media file")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterModel

(define-signal row-added
  (of-object "ClutterModel")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterModelIter*" "p0")
  )
)

(define-signal row-removed
  (of-object "ClutterModel")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterModelIter*" "p0")
  )
)

(define-signal row-changed
  (of-object "ClutterModel")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterModelIter*" "p0")
  )
)

(define-signal sort-changed
  (of-object "ClutterModel")
  (return-type "void")
  (when "last")
)

(define-signal filter-changed
  (of-object "ClutterModel")
  (return-type "void")
  (when "last")
)

(define-property filter-set
  (of-object "ClutterModel")
  (prop-type "GParamBoolean")
  (docs "Whether the model has a filter")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From ClutterOffscreenEffect

;; From ClutterPageTurnEffect

(define-property period
  (of-object "ClutterPageTurnEffect")
  (prop-type "GParamDouble")
  (docs "The period of the page turn")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle
  (of-object "ClutterPageTurnEffect")
  (prop-type "GParamDouble")
  (docs "The angle of the page rotation, in degrees")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property radius
  (of-object "ClutterPageTurnEffect")
  (prop-type "GParamFloat")
  (docs "The radius of the page curl")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; ClutterPaintNode is neither a GObject nor a GInterface. Not checked for signals and properties.

;; From ClutterPanAction

(define-signal pan
  (of-object "ClutterPanAction")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
    '("gboolean" "p1")
  )
)

(define-signal pan-stopped
  (of-object "ClutterPanAction")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-property pan-axis
  (of-object "ClutterPanAction")
  (prop-type "GParamEnum")
  (docs "Constraints the panning to an axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property interpolate
  (of-object "ClutterPanAction")
  (prop-type "GParamBoolean")
  (docs "Whether interpolated events emission is enabled.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property deceleration
  (of-object "ClutterPanAction")
  (prop-type "GParamDouble")
  (docs "Rate at which the interpolated panning will decelerate in")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property acceleration-factor
  (of-object "ClutterPanAction")
  (prop-type "GParamDouble")
  (docs "Factor applied to the momentum when starting the interpolated phase")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterPath

(define-property description
  (of-object "ClutterPath")
  (prop-type "GParamString")
  (docs "SVG-style description of the path")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property length
  (of-object "ClutterPath")
  (prop-type "GParamUInt")
  (docs "An approximation of the total length of the path.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From ClutterPathConstraint

(define-signal node-reached
  (of-object "ClutterPathConstraint")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
    '("guint" "p1")
  )
)

(define-property path
  (of-object "ClutterPathConstraint")
  (prop-type "GParamObject")
  (docs "The path used to constrain an actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property offset
  (of-object "ClutterPathConstraint")
  (prop-type "GParamFloat")
  (docs "The offset along the path, between -1.0 and 2.0")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterPropertyTransition

(define-property property-name
  (of-object "ClutterPropertyTransition")
  (prop-type "GParamString")
  (docs "The name of the property to animate")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterRectangle

(define-property color
  (of-object "ClutterRectangle")
  (prop-type "ClutterParamSpecColor")
  (docs "The color of the rectangle")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-color
  (of-object "ClutterRectangle")
  (prop-type "ClutterParamSpecColor")
  (docs "The color of the border of the rectangle")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "ClutterRectangle")
  (prop-type "GParamUInt")
  (docs "The width of the border of the rectangle")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-border
  (of-object "ClutterRectangle")
  (prop-type "GParamBoolean")
  (docs "Whether the rectangle should have a border")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterRotateAction

(define-signal rotate
  (of-object "ClutterRotateAction")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
    '("gdouble" "p1")
  )
)

;; From ClutterScore

(define-signal completed
  (of-object "ClutterScore")
  (return-type "void")
  (when "last")
)

(define-signal started
  (of-object "ClutterScore")
  (return-type "void")
  (when "last")
)

(define-signal paused
  (of-object "ClutterScore")
  (return-type "void")
  (when "last")
)

(define-signal timeline-started
  (of-object "ClutterScore")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterTimeline*" "p0")
  )
)

(define-signal timeline-completed
  (of-object "ClutterScore")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterTimeline*" "p0")
  )
)

(define-property loop
  (of-object "ClutterScore")
  (prop-type "GParamBoolean")
  (docs "Whether the score should restart once finished")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterScript

(define-property filename-set
  (of-object "ClutterScript")
  (prop-type "GParamBoolean")
  (docs "Whether the :filename property is set")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property filename
  (of-object "ClutterScript")
  (prop-type "GParamString")
  (docs "The path of the currently parsed file")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property translation-domain
  (of-object "ClutterScript")
  (prop-type "GParamString")
  (docs "The translation domain used to localize string")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterScriptable

;; From ClutterScrollActor

(define-property scroll-mode
  (of-object "ClutterScrollActor")
  (prop-type "GParamFlags")
  (docs "The scrolling direction")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterShader

(define-property vertex-source
  (of-object "ClutterShader")
  (prop-type "GParamString")
  (docs "Source of vertex shader")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property fragment-source
  (of-object "ClutterShader")
  (prop-type "GParamString")
  (docs "Source of fragment shader")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property compiled
  (of-object "ClutterShader")
  (prop-type "GParamBoolean")
  (docs "Whether the shader is compiled and linked")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property enabled
  (of-object "ClutterShader")
  (prop-type "GParamBoolean")
  (docs "Whether the shader is enabled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterShaderEffect

(define-property shader-type
  (of-object "ClutterShaderEffect")
  (prop-type "GParamEnum")
  (docs "The type of shader used")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

;; From ClutterSnapConstraint

(define-property source
  (of-object "ClutterSnapConstraint")
  (prop-type "GParamObject")
  (docs "The source of the constraint")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property from-edge
  (of-object "ClutterSnapConstraint")
  (prop-type "GParamEnum")
  (docs "The edge of the actor that should be snapped")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property to-edge
  (of-object "ClutterSnapConstraint")
  (prop-type "GParamEnum")
  (docs "The edge of the source that should be snapped")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property offset
  (of-object "ClutterSnapConstraint")
  (prop-type "GParamFloat")
  (docs "The offset in pixels to apply to the constraint")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterStage

(define-signal activate
  (of-object "ClutterStage")
  (return-type "void")
  (when "last")
)

(define-signal fullscreen
  (of-object "ClutterStage")
  (return-type "void")
  (when "first")
)

(define-signal unfullscreen
  (of-object "ClutterStage")
  (return-type "void")
  (when "last")
)

(define-signal deactivate
  (of-object "ClutterStage")
  (return-type "void")
  (when "last")
)

(define-signal delete-event
  (of-object "ClutterStage")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterEvent*" "p0")
  )
)

(define-property color
  (of-object "ClutterStage")
  (prop-type "ClutterParamSpecColor")
  (docs "The color of the stage")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property fullscreen-set
  (of-object "ClutterStage")
  (prop-type "GParamBoolean")
  (docs "Whether the main stage is fullscreen")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property offscreen
  (of-object "ClutterStage")
  (prop-type "GParamBoolean")
  (docs "Whether the main stage should be rendered offscreen")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cursor-visible
  (of-object "ClutterStage")
  (prop-type "GParamBoolean")
  (docs "Whether the mouse pointer is visible on the main stage")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property perspective
  (of-object "ClutterStage")
  (prop-type "GParamBoxed")
  (docs "Perspective projection parameters")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property title
  (of-object "ClutterStage")
  (prop-type "GParamString")
  (docs "Stage Title")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property user-resizable
  (of-object "ClutterStage")
  (prop-type "GParamBoolean")
  (docs "Whether the stage is able to be resized via user interaction")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-fog
  (of-object "ClutterStage")
  (prop-type "GParamBoolean")
  (docs "Whether to enable depth cueing")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property fog
  (of-object "ClutterStage")
  (prop-type "GParamBoxed")
  (docs "Settings for the depth cueing")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-alpha
  (of-object "ClutterStage")
  (prop-type "GParamBoolean")
  (docs "Whether to honour the alpha component of the stage color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property key-focus
  (of-object "ClutterStage")
  (prop-type "GParamObject")
  (docs "The currently key focused actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-clear-hint
  (of-object "ClutterStage")
  (prop-type "GParamBoolean")
  (docs "Whether the stage should clear its contents")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accept-focus
  (of-object "ClutterStage")
  (prop-type "GParamBoolean")
  (docs "Whether the stage should accept focus on show")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterStageManager

(define-signal stage-added
  (of-object "ClutterStageManager")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterStage*" "p0")
  )
)

(define-signal stage-removed
  (of-object "ClutterStageManager")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterStage*" "p0")
  )
)

(define-property default-stage
  (of-object "ClutterStageManager")
  (prop-type "GParamObject")
  (docs "The default stage")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From ClutterSwipeAction

(define-signal swept
  (of-object "ClutterSwipeAction")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
    '("ClutterSwipeDirection" "p1")
  )
)

(define-signal swipe
  (of-object "ClutterSwipeAction")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
    '("ClutterSwipeDirection" "p1")
  )
)

;; From ClutterTableLayout

(define-property row-spacing
  (of-object "ClutterTableLayout")
  (prop-type "GParamUInt")
  (docs "Spacing between rows")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property column-spacing
  (of-object "ClutterTableLayout")
  (prop-type "GParamUInt")
  (docs "Spacing between columns")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-animations
  (of-object "ClutterTableLayout")
  (prop-type "GParamBoolean")
  (docs "Whether layout changes should be animated")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property easing-mode
  (of-object "ClutterTableLayout")
  (prop-type "GParamULong")
  (docs "The easing mode of the animations")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property easing-duration
  (of-object "ClutterTableLayout")
  (prop-type "GParamUInt")
  (docs "The duration of the animations")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterTapAction

(define-signal tap
  (of-object "ClutterTapAction")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
  )
)

;; From ClutterText

(define-signal text-changed
  (of-object "ClutterText")
  (return-type "void")
  (when "last")
)

(define-signal insert-text
  (of-object "ClutterText")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
    '("gint" "p1")
    '("gpointer" "p2")
  )
)

(define-signal delete-text
  (of-object "ClutterText")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
  )
)

; We add the const- manually:
(define-signal cursor-event
  (of-object "ClutterText")
  (return-type "void")
  (when "last")
  (parameters
    '("const-ClutterGeometry*" "p0")
  )
)

(define-signal cursor-changed
  (of-object "ClutterText")
  (return-type "void")
  (when "last")
)

(define-signal activate
  (of-object "ClutterText")
  (return-type "void")
  (when "last")
)

(define-property buffer
  (of-object "ClutterText")
  (prop-type "GParamObject")
  (docs "The buffer for the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font-name
  (of-object "ClutterText")
  (prop-type "GParamString")
  (docs "The font to be used by the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font-description
  (of-object "ClutterText")
  (prop-type "GParamBoxed")
  (docs "The font description to be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text
  (of-object "ClutterText")
  (prop-type "GParamString")
  (docs "The text to render")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property color
  (of-object "ClutterText")
  (prop-type "ClutterParamSpecColor")
  (docs "Color of the font used by the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-markup
  (of-object "ClutterText")
  (prop-type "GParamBoolean")
  (docs "Whether or not the text includes Pango markup")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property attributes
  (of-object "ClutterText")
  (prop-type "GParamBoxed")
  (docs "A list of style attributes to apply to the contents of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property line-alignment
  (of-object "ClutterText")
  (prop-type "GParamEnum")
  (docs "The preferred alignment for the string, for multi-line text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property line-wrap
  (of-object "ClutterText")
  (prop-type "GParamBoolean")
  (docs "If set, wrap the lines if the text becomes too wide")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property line-wrap-mode
  (of-object "ClutterText")
  (prop-type "GParamEnum")
  (docs "Control how line-wrapping is done")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property justify
  (of-object "ClutterText")
  (prop-type "GParamBoolean")
  (docs "Whether the text should be justified")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ellipsize
  (of-object "ClutterText")
  (prop-type "GParamEnum")
  (docs "The preferred place to ellipsize the string")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property position
  (of-object "ClutterText")
  (prop-type "GParamInt")
  (docs "The cursor position")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property selection-bound
  (of-object "ClutterText")
  (prop-type "GParamInt")
  (docs "The cursor position of the other end of the selection")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property selection-color
  (of-object "ClutterText")
  (prop-type "ClutterParamSpecColor")
  (docs "Selection Color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property selection-color-set
  (of-object "ClutterText")
  (prop-type "GParamBoolean")
  (docs "Whether the selection color has been set")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property cursor-visible
  (of-object "ClutterText")
  (prop-type "GParamBoolean")
  (docs "Whether the input cursor is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cursor-color
  (of-object "ClutterText")
  (prop-type "ClutterParamSpecColor")
  (docs "Cursor Color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cursor-color-set
  (of-object "ClutterText")
  (prop-type "GParamBoolean")
  (docs "Whether the cursor color has been set")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property cursor-size
  (of-object "ClutterText")
  (prop-type "GParamInt")
  (docs "The width of the cursor, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cursor-position
  (of-object "ClutterText")
  (prop-type "GParamInt")
  (docs "The cursor position")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property editable
  (of-object "ClutterText")
  (prop-type "GParamBoolean")
  (docs "Whether the text is editable")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property selectable
  (of-object "ClutterText")
  (prop-type "GParamBoolean")
  (docs "Whether the text is selectable")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property activatable
  (of-object "ClutterText")
  (prop-type "GParamBoolean")
  (docs "Whether pressing return causes the activate signal to be emitted")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property password-char
  (of-object "ClutterText")
  (prop-type "GParamUnichar")
  (docs "If non-zero, use this character to display the actor's contents")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-length
  (of-object "ClutterText")
  (prop-type "GParamInt")
  (docs "Maximum length of the text inside the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property single-line-mode
  (of-object "ClutterText")
  (prop-type "GParamBoolean")
  (docs "Whether the text should be a single line")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property selected-text-color
  (of-object "ClutterText")
  (prop-type "ClutterParamSpecColor")
  (docs "Selected Text Color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property selected-text-color-set
  (of-object "ClutterText")
  (prop-type "GParamBoolean")
  (docs "Whether the selected text color has been set")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From ClutterTexture

(define-signal size-change
  (of-object "ClutterTexture")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
  )
)

(define-signal pixbuf-change
  (of-object "ClutterTexture")
  (return-type "void")
  (when "last")
)

(define-signal load-finished
  (of-object "ClutterTexture")
  (return-type "void")
  (when "last")
  (parameters
    '("GError*" "p0")
  )
)

(define-property disable-slicing
  (of-object "ClutterTexture")
  (prop-type "GParamBoolean")
  (docs "Forces the underlying texture to be singular and not made of smaller space saving individual textures")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property tile-waste
  (of-object "ClutterTexture")
  (prop-type "GParamInt")
  (docs "Maximum waste area of a sliced texture")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property pixel-format
  (of-object "ClutterTexture")
  (prop-type "GParamEnum")
  (docs "The Cogl pixel format to use")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property sync-size
  (of-object "ClutterTexture")
  (prop-type "GParamBoolean")
  (docs "Auto sync size of actor to underlying pixbuf dimensions")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property repeat-y
  (of-object "ClutterTexture")
  (prop-type "GParamBoolean")
  (docs "Repeat the contents rather than scaling them vertically")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property repeat-x
  (of-object "ClutterTexture")
  (prop-type "GParamBoolean")
  (docs "Repeat the contents rather than scaling them horizontally")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property filter-quality
  (of-object "ClutterTexture")
  (prop-type "GParamEnum")
  (docs "Rendering quality used when drawing the texture")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cogl-texture
  (of-object "ClutterTexture")
  (prop-type "GParamBoxed")
  (docs "The underlying Cogl texture handle used to draw this actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cogl-material
  (of-object "ClutterTexture")
  (prop-type "GParamBoxed")
  (docs "The underlying Cogl material handle used to draw this actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property filename
  (of-object "ClutterTexture")
  (prop-type "GParamString")
  (docs "The path of the file containing the image data")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property keep-aspect-ratio
  (of-object "ClutterTexture")
  (prop-type "GParamBoolean")
  (docs "Keep the aspect ratio of the texture when requesting the preferred width or height")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property load-async
  (of-object "ClutterTexture")
  (prop-type "GParamBoolean")
  (docs "Load files inside a thread to avoid blocking when loading images from disk")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property load-data-async
  (of-object "ClutterTexture")
  (prop-type "GParamBoolean")
  (docs "Decode image data files inside a thread to reduce blocking when loading images from disk")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property pick-with-alpha
  (of-object "ClutterTexture")
  (prop-type "GParamBoolean")
  (docs "Shape actor with alpha channel when picking")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterTextBuffer

(define-signal inserted-text
  (of-object "ClutterTextBuffer")
  (return-type "void")
  (when "first")
  (parameters
    '("guint" "p0")
    '("const-gchar*" "p1")
    '("guint" "p2")
  )
)

(define-signal deleted-text
  (of-object "ClutterTextBuffer")
  (return-type "void")
  (when "first")
  (parameters
    '("guint" "p0")
    '("guint" "p1")
  )
)

(define-property text
  (of-object "ClutterTextBuffer")
  (prop-type "GParamString")
  (docs "The contents of the buffer")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property length
  (of-object "ClutterTextBuffer")
  (prop-type "GParamUInt")
  (docs "Length of the text currently in the buffer")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property max-length
  (of-object "ClutterTextBuffer")
  (prop-type "GParamInt")
  (docs "Maximum number of characters for this entry. Zero if no maximum")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterTimeline

(define-signal new-frame
  (of-object "ClutterTimeline")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
  )
)

(define-signal completed
  (of-object "ClutterTimeline")
  (return-type "void")
  (when "last")
)

(define-signal started
  (of-object "ClutterTimeline")
  (return-type "void")
  (when "last")
)

(define-signal paused
  (of-object "ClutterTimeline")
  (return-type "void")
  (when "last")
)

(define-signal marker-reached
  (of-object "ClutterTimeline")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
    '("gint" "p1")
  )
)

(define-signal stopped
  (of-object "ClutterTimeline")
  (return-type "void")
  (when "last")
  (parameters
    '("gboolean" "p0")
  )
)

(define-property loop
  (of-object "ClutterTimeline")
  (prop-type "GParamBoolean")
  (docs "Should the timeline automatically restart")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property delay
  (of-object "ClutterTimeline")
  (prop-type "GParamUInt")
  (docs "Delay before start")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property duration
  (of-object "ClutterTimeline")
  (prop-type "GParamUInt")
  (docs "Duration of the timeline in milliseconds")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property direction
  (of-object "ClutterTimeline")
  (prop-type "GParamEnum")
  (docs "Direction of the timeline")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property auto-reverse
  (of-object "ClutterTimeline")
  (prop-type "GParamBoolean")
  (docs "Whether the direction should be reversed when reaching the end")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property repeat-count
  (of-object "ClutterTimeline")
  (prop-type "GParamInt")
  (docs "How many times the timeline should repeat")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property progress-mode
  (of-object "ClutterTimeline")
  (prop-type "GParamEnum")
  (docs "How the timeline should compute the progress")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterTransition

(define-property interval
  (of-object "ClutterTransition")
  (prop-type "GParamObject")
  (docs "The interval of values to transition")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property animatable
  (of-object "ClutterTransition")
  (prop-type "GParamObject")
  (docs "The animatable object")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property remove-on-complete
  (of-object "ClutterTransition")
  (prop-type "GParamBoolean")
  (docs "Detach the transition when completed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterTransitionGroup

;; From ClutterZoomAction

(define-signal zoom
  (of-object "ClutterZoomAction")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
    '("ClutterPoint*" "p1")
    '("gdouble" "p2")
  )
)

(define-property zoom-axis
  (of-object "ClutterZoomAction")
  (prop-type "GParamEnum")
  (docs "Constraints the zoom to an axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

