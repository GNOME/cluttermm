;; From ClutterActor

(define-signal destroy
  (of-object "ClutterActor")
  (return-type "void")
  (when "unknown")
)

(define-signal show
  (of-object "ClutterActor")
  (return-type "void")
  (when "first")
)

(define-signal hide
  (of-object "ClutterActor")
  (return-type "void")
  (when "first")
)

(define-signal parent-set
  (of-object "ClutterActor")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterEvent*" "p0")
  )
)

(define-signal button-press-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterEvent*" "p0")
  )
)

(define-signal button-release-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterEvent*" "p0")
  )
)

(define-signal scroll-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterEvent*" "p0")
  )
)

(define-signal key-press-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterEvent*" "p0")
  )
)

(define-signal key-release-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterEvent*" "p0")
  )
)

(define-signal motion-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterEvent*" "p0")
  )
)

(define-signal focus-in
  (of-object "ClutterActor")
  (return-type "void")
  (when "last")
)

(define-signal focus-out
  (of-object "ClutterActor")
  (return-type "void")
  (when "last")
)

(define-signal enter-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterEvent*" "p0")
  )
)

(define-signal leave-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterEvent*" "p0")
  )
)

(define-signal captured-event
  (of-object "ClutterActor")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("ClutterEvent*" "p0")
  )
)

(define-property x
  (of-object "ClutterActor")
  (prop-type "GParamInt")
  (docs "X co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y
  (of-object "ClutterActor")
  (prop-type "GParamInt")
  (docs "Y co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "ClutterActor")
  (prop-type "GParamInt")
  (docs "Width of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "ClutterActor")
  (prop-type "GParamInt")
  (docs "Height of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property depth
  (of-object "ClutterActor")
  (prop-type "GParamInt")
  (docs "Depth of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property clip
  (of-object "ClutterActor")
  (prop-type "GParamBoxed")
  (docs "The clip region for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-clip
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether the actor has a clip set or not")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property opacity
  (of-object "ClutterActor")
  (prop-type "GParamUChar")
  (docs "Opacity of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "ClutterActor")
  (prop-type "GParamString")
  (docs "Name of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is visible or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-x
  (of-object "ClutterActor")
  (prop-type "GParamDouble")
  (docs "Scale X")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-y
  (of-object "ClutterActor")
  (prop-type "GParamDouble")
  (docs "Scale Y")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reactive
  (of-object "ClutterActor")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is reactive to events or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterAlpha

(define-property timeline
  (of-object "ClutterAlpha")
  (prop-type "GParamObject")
  (docs "Timeline")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property alpha
  (of-object "ClutterAlpha")
  (prop-type "GParamUInt")
  (docs "Alpha value")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From ClutterBackend

;; From ClutterBehaviourBspline

(define-signal knot-reached
  (of-object "ClutterBehaviourBspline")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterKnot*" "p0")
  )
)

(define-property alpha
  (of-object "ClutterBehaviourBspline")
  (prop-type "GParamObject")
  (docs "Alpha Object to drive the behaviour")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBehaviourDepth

(define-property alpha
  (of-object "ClutterBehaviourDepth")
  (prop-type "GParamObject")
  (docs "Alpha Object to drive the behaviour")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property start-depth
  (of-object "ClutterBehaviourDepth")
  (prop-type "GParamInt")
  (docs "Start depth to apply")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property end-depth
  (of-object "ClutterBehaviourDepth")
  (prop-type "GParamInt")
  (docs "End depth to apply")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBehaviourEllipse

(define-property alpha
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamObject")
  (docs "Alpha Object to drive the behaviour")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property center
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamBoxed")
  (docs "Center of ellipse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamInt")
  (docs "Width of ellipse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamInt")
  (docs "Height of ellipse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle-begin
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamDouble")
  (docs "Initial angle")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle-end
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamDouble")
  (docs "Final angle")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle-tilt-x
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamDouble")
  (docs "Tilt of the ellipse around x axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle-tilt-y
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamDouble")
  (docs "Tilt of the ellipse around y axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle-tilt-z
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamDouble")
  (docs "Tilt of the ellipse around z axis")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property direction
  (of-object "ClutterBehaviourEllipse")
  (prop-type "GParamEnum")
  (docs "Direction of rotation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBehaviour

(define-signal applied
  (of-object "ClutterBehaviour")
  (return-type "void")
  (when "first")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal removed
  (of-object "ClutterBehaviour")
  (return-type "void")
  (when "first")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-property alpha
  (of-object "ClutterBehaviour")
  (prop-type "GParamObject")
  (docs "Alpha Object to drive the behaviour")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBehaviourOpacity

(define-property alpha
  (of-object "ClutterBehaviourOpacity")
  (prop-type "GParamObject")
  (docs "Alpha Object to drive the behaviour")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property opacity-start
  (of-object "ClutterBehaviourOpacity")
  (prop-type "GParamUInt")
  (docs "Initial opacity level")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property opacity-end
  (of-object "ClutterBehaviourOpacity")
  (prop-type "GParamUInt")
  (docs "Final opacity level")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBehaviourPath

(define-signal knot-reached
  (of-object "ClutterBehaviourPath")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterKnot*" "p0")
  )
)

(define-property alpha
  (of-object "ClutterBehaviourPath")
  (prop-type "GParamObject")
  (docs "Alpha Object to drive the behaviour")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property knot
  (of-object "ClutterBehaviourPath")
  (prop-type "GParamBoxed")
  (docs "Can be used to append a knot to the path")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBehaviourRotate

(define-property alpha
  (of-object "ClutterBehaviourRotate")
  (prop-type "GParamObject")
  (docs "Alpha Object to drive the behaviour")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle-begin
  (of-object "ClutterBehaviourRotate")
  (prop-type "GParamDouble")
  (docs "Initial angle")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle-end
  (of-object "ClutterBehaviourRotate")
  (prop-type "GParamDouble")
  (docs "Final angle")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property axis
  (of-object "ClutterBehaviourRotate")
  (prop-type "GParamEnum")
  (docs "Axis of rotation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property direction
  (of-object "ClutterBehaviourRotate")
  (prop-type "GParamEnum")
  (docs "Direction of rotation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property center-x
  (of-object "ClutterBehaviourRotate")
  (prop-type "GParamInt")
  (docs "X center of rotation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property center-y
  (of-object "ClutterBehaviourRotate")
  (prop-type "GParamInt")
  (docs "Y center of rotation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property center-z
  (of-object "ClutterBehaviourRotate")
  (prop-type "GParamInt")
  (docs "Z center of rotation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBehaviourScale

(define-property alpha
  (of-object "ClutterBehaviourScale")
  (prop-type "GParamObject")
  (docs "Alpha Object to drive the behaviour")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-begin
  (of-object "ClutterBehaviourScale")
  (prop-type "GParamDouble")
  (docs "Initial scale")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-end
  (of-object "ClutterBehaviourScale")
  (prop-type "GParamDouble")
  (docs "Final scale")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-gravity
  (of-object "ClutterBehaviourScale")
  (prop-type "GParamEnum")
  (docs "The gravity of the scaling")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterBox

(define-property x
  (of-object "ClutterBox")
  (prop-type "GParamInt")
  (docs "X co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y
  (of-object "ClutterBox")
  (prop-type "GParamInt")
  (docs "Y co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "ClutterBox")
  (prop-type "GParamInt")
  (docs "Width of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "ClutterBox")
  (prop-type "GParamInt")
  (docs "Height of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property depth
  (of-object "ClutterBox")
  (prop-type "GParamInt")
  (docs "Depth of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property clip
  (of-object "ClutterBox")
  (prop-type "GParamBoxed")
  (docs "The clip region for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-clip
  (of-object "ClutterBox")
  (prop-type "GParamBoolean")
  (docs "Whether the actor has a clip set or not")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property opacity
  (of-object "ClutterBox")
  (prop-type "GParamUChar")
  (docs "Opacity of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "ClutterBox")
  (prop-type "GParamString")
  (docs "Name of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "ClutterBox")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is visible or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-x
  (of-object "ClutterBox")
  (prop-type "GParamDouble")
  (docs "Scale X")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-y
  (of-object "ClutterBox")
  (prop-type "GParamDouble")
  (docs "Scale Y")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reactive
  (of-object "ClutterBox")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is reactive to events or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property margin
  (of-object "ClutterBox")
  (prop-type "GParamBoxed")
  (docs "Margin between the inner border of a box and its children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property color
  (of-object "ClutterBox")
  (prop-type "GParamBoxed")
  (docs "Background color of a box")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterCloneTexture

(define-property x
  (of-object "ClutterCloneTexture")
  (prop-type "GParamInt")
  (docs "X co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y
  (of-object "ClutterCloneTexture")
  (prop-type "GParamInt")
  (docs "Y co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "ClutterCloneTexture")
  (prop-type "GParamInt")
  (docs "Width of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "ClutterCloneTexture")
  (prop-type "GParamInt")
  (docs "Height of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property depth
  (of-object "ClutterCloneTexture")
  (prop-type "GParamInt")
  (docs "Depth of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property clip
  (of-object "ClutterCloneTexture")
  (prop-type "GParamBoxed")
  (docs "The clip region for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-clip
  (of-object "ClutterCloneTexture")
  (prop-type "GParamBoolean")
  (docs "Whether the actor has a clip set or not")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property opacity
  (of-object "ClutterCloneTexture")
  (prop-type "GParamUChar")
  (docs "Opacity of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "ClutterCloneTexture")
  (prop-type "GParamString")
  (docs "Name of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "ClutterCloneTexture")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is visible or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-x
  (of-object "ClutterCloneTexture")
  (prop-type "GParamDouble")
  (docs "Scale X")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-y
  (of-object "ClutterCloneTexture")
  (prop-type "GParamDouble")
  (docs "Scale Y")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reactive
  (of-object "ClutterCloneTexture")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is reactive to events or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent-texture
  (of-object "ClutterCloneTexture")
  (prop-type "GParamObject")
  (docs "The parent texture to clone")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterColor

;; From ClutterContainer

(define-signal actor-added
  (of-object "ClutterContainer")
  (return-type "void")
  (when "first")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal actor-removed
  (of-object "ClutterContainer")
  (return-type "void")
  (when "first")
  (parameters
    '("ClutterActor*" "p0")
  )
)

;; From ClutterEffectTemplate

(define-property alpha-func
  (of-object "ClutterEffectTemplate")
  (prop-type "GParamPointer")
  (docs "Alpha reference Function")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property timeline
  (of-object "ClutterEffectTemplate")
  (prop-type "GParamObject")
  (docs "Timeline to use as a reference for the Template")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property clone
  (of-object "ClutterEffectTemplate")
  (prop-type "GParamBoolean")
  (docs "controls if effects should clone or reference the templated timeline")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterEntry

(define-signal activate
  (of-object "ClutterEntry")
  (return-type "void")
  (when "last")
)

(define-signal text-changed
  (of-object "ClutterEntry")
  (return-type "void")
  (when "last")
)

(define-signal cursor-event
  (of-object "ClutterEntry")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterGeometry*" "p0")
  )
)

(define-property x
  (of-object "ClutterEntry")
  (prop-type "GParamInt")
  (docs "X co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y
  (of-object "ClutterEntry")
  (prop-type "GParamInt")
  (docs "Y co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "ClutterEntry")
  (prop-type "GParamInt")
  (docs "Width of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "ClutterEntry")
  (prop-type "GParamInt")
  (docs "Height of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property depth
  (of-object "ClutterEntry")
  (prop-type "GParamInt")
  (docs "Depth of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property clip
  (of-object "ClutterEntry")
  (prop-type "GParamBoxed")
  (docs "The clip region for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-clip
  (of-object "ClutterEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the actor has a clip set or not")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property opacity
  (of-object "ClutterEntry")
  (prop-type "GParamUChar")
  (docs "Opacity of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "ClutterEntry")
  (prop-type "GParamString")
  (docs "Name of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "ClutterEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is visible or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-x
  (of-object "ClutterEntry")
  (prop-type "GParamDouble")
  (docs "Scale X")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-y
  (of-object "ClutterEntry")
  (prop-type "GParamDouble")
  (docs "Scale Y")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reactive
  (of-object "ClutterEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is reactive to events or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font-name
  (of-object "ClutterEntry")
  (prop-type "GParamString")
  (docs "Pango font description")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text
  (of-object "ClutterEntry")
  (prop-type "GParamString")
  (docs "Text to render")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property color
  (of-object "ClutterEntry")
  (prop-type "GParamBoxed")
  (docs "Font Colour")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property alignment
  (of-object "ClutterEntry")
  (prop-type "GParamEnum")
  (docs "The preferred alignment for the string,")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property position
  (of-object "ClutterEntry")
  (prop-type "GParamInt")
  (docs "The cursor position")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cursor-visible
  (of-object "ClutterEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the input cursor is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text-visible
  (of-object "ClutterEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the text is visible in plain text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-length
  (of-object "ClutterEntry")
  (prop-type "GParamInt")
  (docs "The maximum length of the entry text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property entry-padding
  (of-object "ClutterEntry")
  (prop-type "GParamUInt")
  (docs "The padding space between the text and the left and right borders")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterEvent

;; From ClutterGroup

(define-signal add
  (of-object "ClutterGroup")
  (return-type "void")
  (when "first")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-signal remove
  (of-object "ClutterGroup")
  (return-type "void")
  (when "first")
  (parameters
    '("ClutterActor*" "p0")
  )
)

(define-property x
  (of-object "ClutterGroup")
  (prop-type "GParamInt")
  (docs "X co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y
  (of-object "ClutterGroup")
  (prop-type "GParamInt")
  (docs "Y co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "ClutterGroup")
  (prop-type "GParamInt")
  (docs "Width of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "ClutterGroup")
  (prop-type "GParamInt")
  (docs "Height of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property depth
  (of-object "ClutterGroup")
  (prop-type "GParamInt")
  (docs "Depth of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property clip
  (of-object "ClutterGroup")
  (prop-type "GParamBoxed")
  (docs "The clip region for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-clip
  (of-object "ClutterGroup")
  (prop-type "GParamBoolean")
  (docs "Whether the actor has a clip set or not")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property opacity
  (of-object "ClutterGroup")
  (prop-type "GParamUChar")
  (docs "Opacity of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "ClutterGroup")
  (prop-type "GParamString")
  (docs "Name of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "ClutterGroup")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is visible or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-x
  (of-object "ClutterGroup")
  (prop-type "GParamDouble")
  (docs "Scale X")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-y
  (of-object "ClutterGroup")
  (prop-type "GParamDouble")
  (docs "Scale Y")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reactive
  (of-object "ClutterGroup")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is reactive to events or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterHBox

(define-property layout-flags
  (of-object "ClutterHBox")
  (prop-type "GParamFlags")
  (docs "Supported layouts")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property x
  (of-object "ClutterHBox")
  (prop-type "GParamInt")
  (docs "X co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y
  (of-object "ClutterHBox")
  (prop-type "GParamInt")
  (docs "Y co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "ClutterHBox")
  (prop-type "GParamInt")
  (docs "Width of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "ClutterHBox")
  (prop-type "GParamInt")
  (docs "Height of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property depth
  (of-object "ClutterHBox")
  (prop-type "GParamInt")
  (docs "Depth of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property clip
  (of-object "ClutterHBox")
  (prop-type "GParamBoxed")
  (docs "The clip region for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-clip
  (of-object "ClutterHBox")
  (prop-type "GParamBoolean")
  (docs "Whether the actor has a clip set or not")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property opacity
  (of-object "ClutterHBox")
  (prop-type "GParamUChar")
  (docs "Opacity of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "ClutterHBox")
  (prop-type "GParamString")
  (docs "Name of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "ClutterHBox")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is visible or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-x
  (of-object "ClutterHBox")
  (prop-type "GParamDouble")
  (docs "Scale X")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-y
  (of-object "ClutterHBox")
  (prop-type "GParamDouble")
  (docs "Scale Y")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reactive
  (of-object "ClutterHBox")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is reactive to events or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property margin
  (of-object "ClutterHBox")
  (prop-type "GParamBoxed")
  (docs "Margin between the inner border of a box and its children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property color
  (of-object "ClutterHBox")
  (prop-type "GParamBoxed")
  (docs "Background color of a box")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterLabel

(define-property layout-flags
  (of-object "ClutterLabel")
  (prop-type "GParamFlags")
  (docs "Supported layouts")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property x
  (of-object "ClutterLabel")
  (prop-type "GParamInt")
  (docs "X co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y
  (of-object "ClutterLabel")
  (prop-type "GParamInt")
  (docs "Y co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "ClutterLabel")
  (prop-type "GParamInt")
  (docs "Width of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "ClutterLabel")
  (prop-type "GParamInt")
  (docs "Height of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property depth
  (of-object "ClutterLabel")
  (prop-type "GParamInt")
  (docs "Depth of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property clip
  (of-object "ClutterLabel")
  (prop-type "GParamBoxed")
  (docs "The clip region for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-clip
  (of-object "ClutterLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the actor has a clip set or not")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property opacity
  (of-object "ClutterLabel")
  (prop-type "GParamUChar")
  (docs "Opacity of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "ClutterLabel")
  (prop-type "GParamString")
  (docs "Name of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "ClutterLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is visible or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-x
  (of-object "ClutterLabel")
  (prop-type "GParamDouble")
  (docs "Scale X")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-y
  (of-object "ClutterLabel")
  (prop-type "GParamDouble")
  (docs "Scale Y")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reactive
  (of-object "ClutterLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is reactive to events or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font-name
  (of-object "ClutterLabel")
  (prop-type "GParamString")
  (docs "Pango font description")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text
  (of-object "ClutterLabel")
  (prop-type "GParamString")
  (docs "Text to render")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property color
  (of-object "ClutterLabel")
  (prop-type "GParamBoxed")
  (docs "Font Colour")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property attributes
  (of-object "ClutterLabel")
  (prop-type "GParamBoxed")
  (docs "A list of style attributes to apply to thetext of the label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-markup
  (of-object "ClutterLabel")
  (prop-type "GParamBoolean")
  (docs "The text of the label includes XML markup.See pango_parse_markup()")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property alignment
  (of-object "ClutterLabel")
  (prop-type "GParamEnum")
  (docs "The preferred alignment for the string,")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap
  (of-object "ClutterLabel")
  (prop-type "GParamBoolean")
  (docs "If set, wrap lines if the text becomes too wide")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-mode
  (of-object "ClutterLabel")
  (prop-type "GParamEnum")
  (docs "If wrap is set, controls how linewrapping is done")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ellipsize
  (of-object "ClutterLabel")
  (prop-type "GParamEnum")
  (docs "The preferred place to ellipsize the string,if the label does not have enough room to display the entire string")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterLayout

;; From ClutterMedia

;; From ClutterRectangle

(define-property x
  (of-object "ClutterRectangle")
  (prop-type "GParamInt")
  (docs "X co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y
  (of-object "ClutterRectangle")
  (prop-type "GParamInt")
  (docs "Y co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "ClutterRectangle")
  (prop-type "GParamInt")
  (docs "Width of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "ClutterRectangle")
  (prop-type "GParamInt")
  (docs "Height of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property depth
  (of-object "ClutterRectangle")
  (prop-type "GParamInt")
  (docs "Depth of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property clip
  (of-object "ClutterRectangle")
  (prop-type "GParamBoxed")
  (docs "The clip region for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-clip
  (of-object "ClutterRectangle")
  (prop-type "GParamBoolean")
  (docs "Whether the actor has a clip set or not")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property opacity
  (of-object "ClutterRectangle")
  (prop-type "GParamUChar")
  (docs "Opacity of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "ClutterRectangle")
  (prop-type "GParamString")
  (docs "Name of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "ClutterRectangle")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is visible or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-x
  (of-object "ClutterRectangle")
  (prop-type "GParamDouble")
  (docs "Scale X")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-y
  (of-object "ClutterRectangle")
  (prop-type "GParamDouble")
  (docs "Scale Y")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reactive
  (of-object "ClutterRectangle")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is reactive to events or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property color
  (of-object "ClutterRectangle")
  (prop-type "GParamBoxed")
  (docs "The color of the rectangle")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-color
  (of-object "ClutterRectangle")
  (prop-type "GParamBoxed")
  (docs "The color of the border of the rectangle")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "ClutterRectangle")
  (prop-type "GParamUInt")
  (docs "The width of the border of the rectangle")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-border
  (of-object "ClutterRectangle")
  (prop-type "GParamBoolean")
  (docs "Whether the rectangle should have a border")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterScore

(define-signal completed
  (of-object "ClutterScore")
  (return-type "void")
  (when "last")
)

(define-signal started
  (of-object "ClutterScore")
  (return-type "void")
  (when "last")
)

(define-signal paused
  (of-object "ClutterScore")
  (return-type "void")
  (when "last")
)

(define-signal new-timeline
  (of-object "ClutterScore")
  (return-type "void")
  (when "last")
  (parameters
    '("ClutterTimeline*" "p0")
  )
)

;; From ClutterScript

;; From ClutterStage

(define-signal fullscreen
  (of-object "ClutterStage")
  (return-type "void")
  (when "last")
)

(define-signal unfullscreen
  (of-object "ClutterStage")
  (return-type "void")
  (when "last")
)

(define-signal activate
  (of-object "ClutterStage")
  (return-type "void")
  (when "last")
)

(define-signal deactivate
  (of-object "ClutterStage")
  (return-type "void")
  (when "last")
)

(define-property x
  (of-object "ClutterStage")
  (prop-type "GParamInt")
  (docs "X co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y
  (of-object "ClutterStage")
  (prop-type "GParamInt")
  (docs "Y co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "ClutterStage")
  (prop-type "GParamInt")
  (docs "Width of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "ClutterStage")
  (prop-type "GParamInt")
  (docs "Height of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property depth
  (of-object "ClutterStage")
  (prop-type "GParamInt")
  (docs "Depth of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property clip
  (of-object "ClutterStage")
  (prop-type "GParamBoxed")
  (docs "The clip region for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-clip
  (of-object "ClutterStage")
  (prop-type "GParamBoolean")
  (docs "Whether the actor has a clip set or not")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property opacity
  (of-object "ClutterStage")
  (prop-type "GParamUChar")
  (docs "Opacity of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "ClutterStage")
  (prop-type "GParamString")
  (docs "Name of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "ClutterStage")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is visible or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-x
  (of-object "ClutterStage")
  (prop-type "GParamDouble")
  (docs "Scale X")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-y
  (of-object "ClutterStage")
  (prop-type "GParamDouble")
  (docs "Scale Y")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reactive
  (of-object "ClutterStage")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is reactive to events or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property color
  (of-object "ClutterStage")
  (prop-type "GParamBoxed")
  (docs "The color of the main stage")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property fullscreen
  (of-object "ClutterStage")
  (prop-type "GParamBoolean")
  (docs "Whether the main stage is fullscreen")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property offscreen
  (of-object "ClutterStage")
  (prop-type "GParamBoolean")
  (docs "Whether the main stage is renderer offscreen")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cursor-visible
  (of-object "ClutterStage")
  (prop-type "GParamBoolean")
  (docs "Whether the mouse pointer is visible on the main stage ")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property title
  (of-object "ClutterStage")
  (prop-type "GParamString")
  (docs "Stage Title")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property user-resizable
  (of-object "ClutterStage")
  (prop-type "GParamBoolean")
  (docs "Whether the stage is able to be resized via user interaction")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterTexture

(define-signal size-change
  (of-object "ClutterTexture")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
  )
)

(define-signal pixbuf-change
  (of-object "ClutterTexture")
  (return-type "void")
  (when "last")
)

(define-property x
  (of-object "ClutterTexture")
  (prop-type "GParamInt")
  (docs "X co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y
  (of-object "ClutterTexture")
  (prop-type "GParamInt")
  (docs "Y co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "ClutterTexture")
  (prop-type "GParamInt")
  (docs "Width of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "ClutterTexture")
  (prop-type "GParamInt")
  (docs "Height of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property depth
  (of-object "ClutterTexture")
  (prop-type "GParamInt")
  (docs "Depth of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property clip
  (of-object "ClutterTexture")
  (prop-type "GParamBoxed")
  (docs "The clip region for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-clip
  (of-object "ClutterTexture")
  (prop-type "GParamBoolean")
  (docs "Whether the actor has a clip set or not")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property opacity
  (of-object "ClutterTexture")
  (prop-type "GParamUChar")
  (docs "Opacity of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "ClutterTexture")
  (prop-type "GParamString")
  (docs "Name of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "ClutterTexture")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is visible or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-x
  (of-object "ClutterTexture")
  (prop-type "GParamDouble")
  (docs "Scale X")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-y
  (of-object "ClutterTexture")
  (prop-type "GParamDouble")
  (docs "Scale Y")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reactive
  (of-object "ClutterTexture")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is reactive to events or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixbuf
  (of-object "ClutterTexture")
  (prop-type "GParamObject")
  (docs "Pixbuf source for Texture.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tiled
  (of-object "ClutterTexture")
  (prop-type "GParamBoolean")
  (docs "Enables the use of tiled GL textures to more efficiently use available texture memory")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property tile-waste
  (of-object "ClutterTexture")
  (prop-type "GParamInt")
  (docs "Max wastage dimention of a texture when using tiled textures. Bigger values use less textures, smaller values less texture memory. ")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property pixel-type
  (of-object "ClutterTexture")
  (prop-type "GParamInt")
  (docs "GL texture pixel type used")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property pixel-format
  (of-object "ClutterTexture")
  (prop-type "GParamInt")
  (docs "GL texture pixel format used")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property sync-size
  (of-object "ClutterTexture")
  (prop-type "GParamBoolean")
  (docs "Auto sync size of actor to underlying pixbufdimentions")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property repeat-y
  (of-object "ClutterTexture")
  (prop-type "GParamBoolean")
  (docs "Reapeat underlying pixbuf rather than scalein y direction. Currently UNWORKING")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property repeat-x
  (of-object "ClutterTexture")
  (prop-type "GParamBoolean")
  (docs "Reapeat underlying pixbuf rather than scalein x direction. Currently UNWORKING")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property filter-quality
  (of-object "ClutterTexture")
  (prop-type "GParamInt")
  (docs "Values 0 and 1 current only supported, with 0being lower quality but fast, 1 being better quality but slower. ( Currently just maps to  GL_NEAREST / GL_LINEAR )")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterTimeline

(define-signal new-frame
  (of-object "ClutterTimeline")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
  )
)

(define-signal completed
  (of-object "ClutterTimeline")
  (return-type "void")
  (when "last")
)

(define-signal started
  (of-object "ClutterTimeline")
  (return-type "void")
  (when "last")
)

(define-signal paused
  (of-object "ClutterTimeline")
  (return-type "void")
  (when "last")
)

(define-property fps
  (of-object "ClutterTimeline")
  (prop-type "GParamUInt")
  (docs "Timeline frames per second")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property num-frames
  (of-object "ClutterTimeline")
  (prop-type "GParamUInt")
  (docs "Timelines total number of frames")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property loop
  (of-object "ClutterTimeline")
  (prop-type "GParamBoolean")
  (docs "Should the timeline automatically restart")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property delay
  (of-object "ClutterTimeline")
  (prop-type "GParamUInt")
  (docs "Delay before start")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property duration
  (of-object "ClutterTimeline")
  (prop-type "GParamUInt")
  (docs "Duration of the timeline in milliseconds")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From ClutterVBox

(define-property layout-flags
  (of-object "ClutterVBox")
  (prop-type "GParamFlags")
  (docs "Supported layouts")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property x
  (of-object "ClutterVBox")
  (prop-type "GParamInt")
  (docs "X co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property y
  (of-object "ClutterVBox")
  (prop-type "GParamInt")
  (docs "Y co-ord of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "ClutterVBox")
  (prop-type "GParamInt")
  (docs "Width of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "ClutterVBox")
  (prop-type "GParamInt")
  (docs "Height of actor in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property depth
  (of-object "ClutterVBox")
  (prop-type "GParamInt")
  (docs "Depth of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property clip
  (of-object "ClutterVBox")
  (prop-type "GParamBoxed")
  (docs "The clip region for the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-clip
  (of-object "ClutterVBox")
  (prop-type "GParamBoolean")
  (docs "Whether the actor has a clip set or not")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property opacity
  (of-object "ClutterVBox")
  (prop-type "GParamUChar")
  (docs "Opacity of actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "ClutterVBox")
  (prop-type "GParamString")
  (docs "Name of the actor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "ClutterVBox")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is visible or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-x
  (of-object "ClutterVBox")
  (prop-type "GParamDouble")
  (docs "Scale X")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-y
  (of-object "ClutterVBox")
  (prop-type "GParamDouble")
  (docs "Scale Y")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reactive
  (of-object "ClutterVBox")
  (prop-type "GParamBoolean")
  (docs "Whether the actor is reactive to events or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property margin
  (of-object "ClutterVBox")
  (prop-type "GParamBoxed")
  (docs "Margin between the inner border of a box and its children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property color
  (of-object "ClutterVBox")
  (prop-type "GParamBoxed")
  (docs "Background color of a box")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

