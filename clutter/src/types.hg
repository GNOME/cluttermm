/* Copyright (C) 2007 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <clutter/clutter.h>
#include <cogl/cogl.h>

_DEFS(cluttermm,clutter)
namespace Cogl
{
typedef CoglAngle Angle;
typedef CoglFixed Fixed;
} // namespace Cogl

namespace Clutter
{

typedef ClutterEvent Event;
typedef ClutterButtonEvent ButtonEvent;
typedef ClutterKeyEvent KeyEvent;
typedef ClutterMotionEvent MotionEvent;
typedef ClutterScrollEvent ScrollEvent;
typedef ClutterCrossingEvent CrossingEvent;

//TODO: Maybe redefine these, to avoid including a C header in our C++ header:

_WRAP_GERROR(InitError, ClutterInitError, CLUTTER_INIT_ERROR)

_WRAP_ENUM(AnimationMode, ClutterAnimationMode)
_WRAP_ENUM(RotateDirection, ClutterRotateDirection)
_WRAP_ENUM(RotateAxis, ClutterRotateAxis)
_WRAP_ENUM(Gravity, ClutterGravity)
_WRAP_ENUM(RequestMode, ClutterRequestMode)
_WRAP_ENUM(FontFlags, ClutterFontFlags)
_WRAP_ENUM(TextDirection, ClutterTextDirection)

class Vertex
{
  _CLASS_BOXEDTYPE_STATIC(Vertex, ClutterVertex)
public:
  Vertex(float x, float y, float z = 0);

  _MEMBER_GET(x, x, float, float)
  _MEMBER_SET(x, x, float, float)
  _MEMBER_GET(y, y, float, float)
  _MEMBER_SET(y, y, float, float)
  _MEMBER_GET(z, z, float, float)
  _MEMBER_SET(z, z, float, float)
};

class Geometry
{
  _CLASS_BOXEDTYPE_STATIC(Geometry, ClutterGeometry)
public:
  Geometry(int x, int y, guint width = 0, guint height = 0);

  _MEMBER_GET(x, x, int, gint)
  void set_x(int x);
  _MEMBER_GET(y, y, int, gint)
  void set_y(int y);
  void set_xy(int x, int y);

  _MEMBER_GET(width, width, guint, guint)
  void set_width(guint width);
  _MEMBER_GET(height, height, guint, guint)
  void set_height(guint height);
  void set_size(guint width, guint height);
};

/** A Clutter::Point is a 2D point in space.
 *
 * It is used to return points, either in absolute coordinates or relative,
 * depending on the method.
 */
class Point
{
  _CLASS_BOXEDTYPE(Point, ClutterPoint, NONE, clutter_point_copy, clutter_point_free)
  _IGNORE(clutter_point_init, clutter_point_copy, clutter_point_free)

public:

  //We do not want the normal generated constructor
  //because that creates an unusable object.
  _CUSTOM_DEFAULT_CTOR

  /** Constructor.
   */
  explicit Point(float x = 0, float y = 0);

  // This constructor is just here to prevent calls to Point(int, int) being ambiguous 
  // between Point(float, float) and Point(ClutterPoint*, bool).
  Point(int x, int y);

  // This constructor is just here to prevent calls to Point(double, double) being ambiguous 
  // between Point(float, float) and Point(int, int).
  Point(double x, double y);

  _WRAP_EQUAL(clutter_point_equals)

  _WRAP_METHOD(float distance(const Point& b, float& x_distance, float& y_distance) const, clutter_point_distance)

  _MEMBER_GET(x, x, float, gfloat)
  _MEMBER_GET(y, y, float, gfloat)
  _MEMBER_SET(x, x, float, gfloat)
  _MEMBER_SET(y, y, float, gfloat)
};

//This has replaced Clutter::Geometry in new code.
//Note: ClutterRect normalizes the rects in each call, even get_x(),
//and should not be accessed directly via its struct fields,
//so we consider several methods to be const even though they actually
//change the internal struct field values.
//TODO: Put this in its own file.
class Rect
{
  _CLASS_BOXEDTYPE(Rect, ClutterRect,  NONE , clutter_rect_copy, clutter_rect_free)
  _IGNORE(clutter_rect_alloc, clutter_rect_copy, clutter_rect_free)

public:
  _CUSTOM_DEFAULT_CTOR

  /**
   * Create a new Rect object, optionally specifying its dimensions.
   */
  explicit Rect(float x = 0, float y = 0, float width = 0, float height = 0);

  _WRAP_EQUAL(cluttermm_rect_equals)

  _WRAP_METHOD(Rect normalise(), clutter_rect_normalize)

  /** Retrieves the center of the rect and returns a rect with the correct coordinates.
   */
  Point get_centre() const;
  _IGNORE(clutter_rect_get_center)

  _WRAP_METHOD(bool contains_point(const Point& point) const, clutter_rect_contains_point)
  _WRAP_METHOD(bool contains_rect(const Rect& b) const, clutter_rect_contains_rect)

  //We can't call this union() because it's a reserved word. 
  /**
   * Computes the smallest possible rectangle capable of fully containing both this rect and @a b, and returns it.
   */
  Rect rect_union(const Rect& b) const;
  _IGNORE(clutter_rect_union)

#m4 _INITIALIZATION(`Rect&',`ClutterRect', `$3 = Glib::wrap(&($4))') 
  _WRAP_METHOD(bool intersection(const Rect& b, Rect& res{>>}) const, clutter_rect_intersection)

  _WRAP_METHOD(void offset(float d_x, float d_y), clutter_rect_offset)
  _WRAP_METHOD(void inset(float d_x, float d_y), clutter_rect_inset)
  _WRAP_METHOD(void clamp_to_pixel(), clutter_rect_clamp_to_pixel )
  _WRAP_METHOD(float get_x() const, clutter_rect_get_x)
  _WRAP_METHOD(float get_y() const, clutter_rect_get_y)
  _WRAP_METHOD(float get_width() const, clutter_rect_get_width)
  _WRAP_METHOD(float get_height() const, clutter_rect_get_height)
};


class Knot
{
  _CLASS_BOXEDTYPE(Knot, ClutterKnot, NONE, clutter_knot_copy, clutter_knot_free)
  _IGNORE(clutter_knot_copy)
  _IGNORE(clutter_knot_free)
public:

  // NOTE: _CUSTOM_DEFAULT_CTOR must be used on the last class definition
  // as it "falls through" to any following definitions in the same file.
  _CUSTOM_DEFAULT_CTOR
  Knot();
  Knot(int x, int y);

  _MEMBER_GET(x, x, int, int)
  void set_x(int x);
  _MEMBER_GET(y, y, int, int)
  void set_y(int y);
  void set_xy(int x, int y);

#m4begin
  _WRAP_EQUAL(clutter_knot_equal)
#m4end
  _IGNORE(clutter_knot_equal)
};

} // namespace Clutter
