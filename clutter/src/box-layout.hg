/* Copyright (C) 2011 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <cluttermm/layout-manager.h>

_DEFS(cluttermm,clutter)
_PINCLUDE(cluttermm/private/layout-manager_p.h)

namespace Clutter
{

_WRAP_ENUM(BoxAlignment, ClutterBoxAlignment)

class BoxLayout :
    public LayoutManager
{
  _CLASS_GOBJECT(BoxLayout, ClutterBoxLayout, CLUTTER_BOX_LAYOUT, LayoutManager, ClutterLayoutManager)

protected:
  _CTOR_DEFAULT()

public:
  _WRAP_CREATE()

  _WRAP_METHOD(void set_pack_start(bool pack_start), clutter_box_layout_set_pack_start)
  _WRAP_METHOD(bool get_pack_start(), clutter_box_layout_get_pack_start)
  _WRAP_METHOD(void set_spacing(guint spacing), clutter_box_layout_set_spacing)
  _WRAP_METHOD(guint get_spacing(), clutter_box_layout_get_spacing)
  _WRAP_METHOD(void set_vertical(bool vertical), clutter_box_layout_set_vertical)
  _WRAP_METHOD(bool get_vertical(), clutter_box_layout_get_vertical)
  // 1.4
  // _WRAP_METHOD(void set_homogeneous(bool homogeneous), clutter_box_layout_set_homogeneous)
  // _WRAP_METHOD(bool get_homogeneous(), clutter_box_layout_get_homogeneous)

  _WRAP_METHOD(void pack(const Glib::RefPtr<Actor>&, bool expand, bool x_fill, bool y_fill, BoxAlignment x_align, BoxAlignment y_align), clutter_box_layout_pack)

  _WRAP_METHOD(void set_alignment(const Glib::RefPtr<Actor>& child, BoxAlignment x_align, BoxAlignment y_align), clutter_box_layout_set_alignment)
  _WRAP_METHOD(void get_alignment(const Glib::RefPtr<Actor>& child, BoxAlignment &x_align, BoxAlignment &y_align), clutter_box_layout_get_alignment)
  _WRAP_METHOD(void set_expand(const Glib::RefPtr<Actor>& child, bool expand), clutter_box_layout_set_expand)
  _WRAP_METHOD(bool get_expand(const Glib::RefPtr<Actor>& child), clutter_box_layout_get_expand)
  _WRAP_METHOD(void set_fill(const Glib::RefPtr<Actor>& child, bool x_fill, bool y_fill), clutter_box_layout_set_fill)
  #m4 _CONVERSION(`bool&',`gboolean*',`(($2) &($3))')
  _WRAP_METHOD(void get_fill(const Glib::RefPtr<Actor>& child, bool &x_fill, bool &y_fill), clutter_box_layout_get_fill)

  _WRAP_METHOD(void set_use_animations(bool animate), set_use_animations)
  _WRAP_METHOD(bool get_use_animations(), clutter_box_layout_get_use_animations)
  _WRAP_METHOD(void set_easing_duration(guint msecs), clutter_box_layout_set_easing_duration)
  _WRAP_METHOD(guint get_easing_duration(), clutter_box_layout_get_easing_duration)
  _WRAP_METHOD(void set_easing_mode(gulong mode), clutter_box_layout_set_easing_mode)
  _WRAP_METHOD(gulong get_easing_mode(), clutter_box_layout_get_easing_mode)

  _WRAP_PROPERTY("easing-duration", unsigned int)
  _WRAP_PROPERTY("easing-mode", unsigned long)
  // 1.4 _WRAP_PROPERTY("homogeneous", bool)
  _WRAP_PROPERTY("pack-start", bool)
  _WRAP_PROPERTY("spacing", unsigned int)
  _WRAP_PROPERTY("use-animations", bool)
  _WRAP_PROPERTY("vertical", bool)
};

} // namespace Clutter

