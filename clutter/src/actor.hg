/* Copyright (C) 2007 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>
#include <cluttermm/color.h>
#include <clutter/clutter-event.h> //For Clutter*Event
 
_DEFS(cluttermm,clutter)
_PINCLUDE(glibmm/private/object_p.h)


namespace Clutter
{

typedef ClutterEvent Event;
typedef ClutterButtonEvent ButtonEvent;
typedef ClutterKeyEvent KeyEvent;
typedef ClutterMotionEvent MotionEvent;
typedef ClutterScrollEvent ScrollEvent;
typedef ClutterCrossingEvent CrossingEvent;

class Actor : public Glib::Object
{
  _CLASS_GOBJECT(Actor, ClutterActor, CLUTTER_ACTOR, Glib::Object, GObject)
  _DERIVES_INITIALLY_UNOWNED()

protected:
  _CTOR_DEFAULT()

public:
  //There is no create() because this is an abstract base class.
  //_WRAP_CREATE()
  
  _WRAP_METHOD(void show(), clutter_actor_show)
  _WRAP_METHOD(void show_all(), clutter_actor_show_all)
  _WRAP_METHOD(void hide(), clutter_actor_hide)
  _WRAP_METHOD(void hide_all(), clutter_actor_hide_all)
  _WRAP_METHOD(void realize(), clutter_actor_realize)
  _WRAP_METHOD(void unrealize(), clutter_actor_unrealize)
  _WRAP_METHOD(void paint(), clutter_actor_paint)
  _WRAP_METHOD(void pick(const Color& color), clutter_actor_pick)
  _WRAP_METHOD(void queue_redraw(), clutter_actor_queue_redraw)

  //TODO: Check that we don't want to wrap this: _WRAP_METHOD(void destroy(), clutter_actor_destroy)

  //TODO: If these are output parameters, then they probably need to be hand-coded:
  //TODO: _WRAP_METHOD(void request_coords(const Glib::RefPtr<ActorBox>& box), clutter_actor_request_coords)
  //TODO: _WRAP_METHOD(void query_coords(const Glib::RefPtr<ActorBox>& box), clutter_actor_query_coords)
  _WRAP_METHOD(void set_geometry(const ClutterGeometry *geometry), clutter_actor_set_geometry)
  _WRAP_METHOD(void get_geometry(ClutterGeometry *geometry), clutter_actor_get_geometry)
  _WRAP_METHOD(void get_coords(int *x_1, int *y_1, int *x_2, int *y_2) const, clutter_actor_get_coords)
  _WRAP_METHOD(void set_size(int width, int height), clutter_actor_set_size)
  _WRAP_METHOD(void set_position(int x, int y), clutter_actor_set_position)
  _WRAP_METHOD(void get_abs_position(int& x, int& y) const, clutter_actor_get_abs_position)
  _WRAP_METHOD(guint get_width() const, clutter_actor_get_width)
  _WRAP_METHOD(guint get_height() const, clutter_actor_get_height)
  _WRAP_METHOD(void set_width(guint width), clutter_actor_set_width)
  _WRAP_METHOD(void set_height(guint height), clutter_actor_set_height)


  _WRAP_METHOD(int get_x() const, clutter_actor_get_x)
  _WRAP_METHOD(int get_y() const, clutter_actor_get_y)
  _WRAP_METHOD(void rotate_x(float angle, int y, int z), clutter_actor_rotate_x)
  _WRAP_METHOD(void rotate_y(float angle, int x, int z), clutter_actor_rotate_y)
  _WRAP_METHOD(void rotate_z(float angle, int x, int y), clutter_actor_rotate_z)
  _WRAP_METHOD(void rotate_xx(Fixed angle, int y, int z), clutter_actor_rotate_xx)
  _WRAP_METHOD(void rotate_yx(Fixed angle, int x, int z), clutter_actor_rotate_yx)
  _WRAP_METHOD(void rotate_zx(Fixed angle, int x, int y), clutter_actor_rotate_zx)
  _WRAP_METHOD(double get_rxang() const, clutter_actor_get_rxang)
  _WRAP_METHOD(double get_ryang() const, clutter_actor_get_ryang)
  _WRAP_METHOD(double get_rzang() const, clutter_actor_get_rzang)
  _WRAP_METHOD(Fixed get_rxangx() const, clutter_actor_get_rxangx)
  _WRAP_METHOD(Fixed get_ryangx() const, clutter_actor_get_ryangx)
  _WRAP_METHOD(Fixed get_rzangx() const, clutter_actor_get_rzangx)
  _WRAP_METHOD(void set_opacity (guint8 opacity), clutter_actor_set_opacity)
  _WRAP_METHOD(guint8 get_opacity() const, clutter_actor_get_opacity)
  _WRAP_METHOD(void set_name(const gchar           *name), clutter_actor_set_name)
  _WRAP_METHOD(Glib::ustring get_name() const, clutter_actor_get_name)
  _WRAP_METHOD(guint32 get_id() const, clutter_actor_get_id)
  _WRAP_METHOD(void set_clip(int xoff, int yoff, int width, int height), clutter_actor_set_clip)
  _WRAP_METHOD(void remove_clip(), clutter_actor_remove_clip)
  _WRAP_METHOD(bool has_clip() const, clutter_actor_has_clip)
  _WRAP_METHOD(void set_parent(const Glib::RefPtr<Actor>& parent), clutter_actor_set_parent)
  _WRAP_METHOD(Glib::RefPtr<Actor> get_parent(), clutter_actor_get_parent, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Actor> get_parent() const, clutter_actor_get_parent, refreturn, constversion)
  _WRAP_METHOD(void reparent(const Glib::RefPtr<Actor>& new_parent), clutter_actor_reparent)
  _WRAP_METHOD(void unparent(), clutter_actor_unparent)
  _WRAP_METHOD(void raise(const Glib::RefPtr<Actor>& below), clutter_actor_raise)
  _WRAP_METHOD(void lower(const Glib::RefPtr<Actor>& above), clutter_actor_lower)
  _WRAP_METHOD(void raise_top (), clutter_actor_raise_top)
  _WRAP_METHOD(void lower_bottom(), clutter_actor_lower_bottom)
  _WRAP_METHOD(void set_depth(int depth), clutter_actor_set_depth)
  _WRAP_METHOD(int get_depth() const, clutter_actor_get_depth)
  _WRAP_METHOD(void set_scalex(Fixed scale_x, Fixed scale_y), clutter_actor_set_scalex)
  _WRAP_METHOD(void set_scale(double scale_x, double scale_y), clutter_actor_set_scale)
  _WRAP_METHOD(void get_scalex(Fixed& scale_x, Fixed& scale_y) const, clutter_actor_get_scalex)
  _WRAP_METHOD(void get_scale(double& scale_x, double& scale_y) const, clutter_actor_get_scale)

  _WRAP_METHOD(void set_scale_with_gravityx(Fixed scale_x, Fixed scale_y, ClutterGravity gravity), clutter_actor_set_scale_with_gravityx)

  _WRAP_METHOD(void set_scale_with_gravity(float scale_x, float scale_y, ClutterGravity gravity), clutter_actor_set_scale_with_gravity)

  _WRAP_METHOD(void get_abs_size(guint& width, guint& height) const, clutter_actor_get_abs_size)
  _WRAP_METHOD(void get_size(guint& width, guint& height) const, clutter_actor_get_size)
  _WRAP_METHOD(void move_by(int dx, int dy), clutter_actor_move_by)

  //TODO: _WRAP_METHOD(void get_vertices(ClutterVertex verts[4]) const, clutter_actor_get_vertices)

  //TODO: _WRAP_METHOD(void apply_transform_to_point(ClutterVertex& point, ClutterVertex& vertex), clutter_actor_apply_transform_to_point)

// signals
  _WRAP_SIGNAL(bool button_press_event(ButtonEvent* event), "button_press_event")
  _WRAP_SIGNAL(bool button_release_event(ButtonEvent* event), "button_release_event")
  _WRAP_SIGNAL(bool motion_event(MotionEvent* event), "motion_event")
  //_WRAP_SIGNAL(bool leave_event(CrossingEvent* event), "leave_event")
  _WRAP_SIGNAL(void show(), "show")
  _WRAP_SIGNAL(void hide(), "hide")
  _WRAP_SIGNAL(void destroy(), "destroy")
  _WRAP_SIGNAL(bool key_release_event(KeyEvent* event), "key_release_event")
  //_WRAP_SIGNAL(bool enter_event(CrossingEvent* event), "enter_event")
  _WRAP_SIGNAL(bool event(Event* event), "event")
  _WRAP_SIGNAL(void focus_out(), "focus_out")
  _WRAP_SIGNAL(void focus_in(), "focus_in")
  //_WRAP_SIGNAL(void parent_set(const Glib::RefPtr<Actor>& old_parent), "parent_set")
  _WRAP_SIGNAL(bool scroll_event(ScrollEvent* event), "scroll_event")
  _WRAP_SIGNAL(bool key_press_event(KeyEvent* event), "key_press_event")
  //_WRAP_SIGNAL(bool captured_event(Event* event), "captured_event")
};

} // namespace Clutter

