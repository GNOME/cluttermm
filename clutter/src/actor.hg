/* Copyright (C) 2007 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>
#include <pangomm/context.h>
#include <pangomm/layout.h>
#include <atkmm/object.h>
#include <cluttermm/action.h>
#include <cluttermm/actor-box.h>
#include <cluttermm/animation.h>
#include <cluttermm/animatable.h>
#include <cluttermm/color.h>
//#include <cluttermm/content.h>
#include <cluttermm/effect.h>
//#include <cluttermm/layout-manager.h>
#include <cluttermm/scriptable.h>
#include <cluttermm/shader.h>
#include <cluttermm/types.h> // For Event*

_DEFS(cluttermm,clutter)
_PINCLUDE(glibmm/private/object_p.h)

#m4 _PUSH(SECTION_CC_PRE_INCLUDES)
#define CLUTTER_DISABLE_DEPRECATION_WARNINGS 1
#m4 _POP()

namespace Clutter
{

typedef ClutterMatrix Matrix;

class Animation;
class Content;
class LayoutManager;

_WRAP_ENUM(ActorAlign, ClutterActorAlign)
_WRAP_ENUM(ActorFlags, ClutterActorFlags)
_WRAP_ENUM(AllocationFlags, ClutterAllocationFlags)
_WRAP_ENUM(ContentRepeat, ClutterContentRepeat)
_WRAP_ENUM(ContentGravity, ClutterContentGravity)
_WRAP_ENUM(Orientation, ClutterOrientation)

//TODO: Write a version of the large description from here: http://clutter-project.org/docs/clutter/stable/ClutterActor.html#ClutterActor.description
class Actor : public Glib::Object, public Scriptable, public Animatable
{
  _CLASS_GOBJECT(Actor, ClutterActor, CLUTTER_ACTOR, Glib::Object, GObject)
  _DERIVES_INITIALLY_UNOWNED()
  _IMPLEMENTS_INTERFACE(Scriptable)
  _IMPLEMENTS_INTERFACE(Animatable)

protected:
  _CTOR_DEFAULT()

public:

  _WRAP_CREATE()

  _WRAP_METHOD(void set_flags(ActorFlags flags), clutter_actor_set_flags)
  _WRAP_METHOD(void unset_flags(ActorFlags flags), clutter_actor_unset_flags)
  _WRAP_METHOD(ActorFlags get_flags() const, clutter_actor_get_flags)

  //TODO: Remove these now that there are properties instead?
  // Not at present; there are no accessors available.
  bool is_mapped() const;
  bool is_realized() const;
  bool is_visible() const;
  bool is_reactive() const;

  _IGNORE(clutter_actor_destroy)

  _WRAP_METHOD(void show(), clutter_actor_show)
  _WRAP_METHOD(void show_all(), clutter_actor_show_all, deprecated "Actors are visible by default.")
  _WRAP_METHOD(void hide(), clutter_actor_hide)
  _WRAP_METHOD(void hide_all(), clutter_actor_hide_all, deprecated "Using hide() on the actor will now prevent its children from being painted as well.")
  _WRAP_METHOD(void realize(), clutter_actor_realize)
  _WRAP_METHOD(void unrealize(), clutter_actor_unrealize)
  _WRAP_METHOD(void map(), clutter_actor_map)
  _WRAP_METHOD(void unmap(), clutter_actor_unmap)
  _WRAP_METHOD(void paint(), clutter_actor_paint)
  _WRAP_METHOD(void continue_paint(), clutter_actor_continue_paint)
  _WRAP_METHOD(void queue_redraw(), clutter_actor_queue_redraw)
  _WRAP_METHOD(void queue_relayout(), clutter_actor_queue_relayout)
  _IGNORE(clutter_actor_queue_redraw_with_clip) //internal.
  _IGNORE(clutter_actor_queue_relayout) //not for application code.
  _IGNORE(clutter_actor_should_pick_paint ) //not for application code.

  _WRAP_METHOD(bool has_overlaps(), clutter_actor_has_overlaps)

  _WRAP_METHOD(void set_content(const Glib::RefPtr<Content>& content), clutter_actor_set_content)

  _WRAP_METHOD(Glib::RefPtr<Content> get_content(), clutter_actor_get_content, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Content> get_content() const, clutter_actor_get_content, refreturn, constversion)

  _WRAP_METHOD(void set_content_gravity(ContentGravity gravity), clutter_actor_set_content_gravity)

  _WRAP_METHOD(ContentGravity get_content_gravity() const, clutter_actor_get_content_gravity)

  _WRAP_METHOD(void set_content_scaling_filters(ScalingFilter min_filter, ScalingFilter mag_filter), clutter_actor_set_content_scaling_filters)

#m4 _CONVERSION(`ScalingFilter&', `ClutterScalingFilter*', `(($2)&($3))')
  _WRAP_METHOD(void get_content_scaling_filters(ScalingFilter& min_filter, ScalingFilter& mag_filter), clutter_actor_get_content_scaling_filters)

  _WRAP_METHOD(void set_content_repeat(ContentRepeat repeat), clutter_actor_set_content_repeat)
  _WRAP_METHOD(ContentRepeat get_content_repeat() const, clutter_actor_get_content_repeat)


#m4 dnl // Those are varargs convenience functions for C coders
  _IGNORE(clutter_actor_animate, clutter_actor_animate_with_alpha, clutter_actor_animate_with_timeline)

  //TODO: Check that we don't want to wrap this: _WRAP_METHOD(void destroy(), clutter_actor_destroy)
  //_IGNORE(clutter_actor_destroy)
  _WRAP_METHOD(void destroy(), clutter_actor_destroy)

  _WRAP_METHOD(Glib::RefPtr<Pango::Context> get_pango_context(),
               clutter_actor_get_pango_context, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Pango::Context> get_pango_context() const,
               clutter_actor_get_pango_context, refreturn, constversion)
  _WRAP_METHOD(Glib::RefPtr<Pango::Context> create_pango_context(),
               clutter_actor_create_pango_context)

  _WRAP_METHOD(Glib::RefPtr<Pango::Layout> create_pango_layout(const Glib::ustring& text),
               clutter_actor_create_pango_layout)

  _IGNORE( clutter_actor_get_transform) //handcoded to allow returning the Matrix.

  /**
   * Returns the transformation matrix being used by the actor.
   * */
  Matrix get_transform() const;

  _WRAP_METHOD(void get_transformation_matrix(ClutterMatrix* matrix), clutter_actor_get_transformation_matrix, deprecated "Use get_transform() instead")
  _WRAP_METHOD(void set_transform(const Matrix& transform), clutter_actor_set_transform)
  _WRAP_METHOD(void set_child_transform(const Matrix& transform), clutter_actor_set_child_transform)

  _WRAP_METHOD(bool is_in_clone_paint() const, clutter_actor_is_in_clone_paint)
  _WRAP_METHOD(bool has_pointer() const, clutter_actor_has_pointer)
  _WRAP_METHOD(void set_text_direction(TextDirection text_dir), clutter_actor_set_text_direction)
  _WRAP_METHOD(TextDirection get_text_direction() const, clutter_actor_get_text_direction)


  _WRAP_METHOD(Glib::RefPtr<Actor> get_stage(), clutter_actor_get_stage, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Actor> get_stage() const, clutter_actor_get_stage, refreturn, constversion)

#m4 _CONVERSION(`const Geometry&', `const ClutterGeometry*', `($3).gobj()')
  _WRAP_METHOD(void set_geometry(const Geometry& geometry), clutter_actor_set_geometry, deprecated "Use set_position() and set_size() instead.")

_DEPRECATE_IFDEF_START
  _WRAP_METHOD_DOCS_ONLY(clutter_actor_get_geometry)
  /**
   * @deprecated Use get_position() and get_size(), or get_allocation_geometry() instead.
   */
  Geometry get_geometry() const;
_DEPRECATE_IFDEF_END

  //_WRAP_METHOD(void get_coords(float *x_1, float *y_1, float *x_2, float *y_2) const, clutter_actor_get_coords)
  _WRAP_METHOD(void set_size(float width, float height), clutter_actor_set_size)
  _WRAP_METHOD(void get_position(float& x, float& y), clutter_actor_get_position)
  _WRAP_METHOD(void set_position(float x, float y), clutter_actor_set_position)
  //_WRAP_METHOD(void get_abs_position(float& x, float& y) const, clutter_actor_get_abs_position)
  _WRAP_METHOD(float get_width() const, clutter_actor_get_width)
  _WRAP_METHOD(float get_height() const, clutter_actor_get_height)
  _WRAP_METHOD(void set_width(float width), clutter_actor_set_width)
  _WRAP_METHOD(void set_height(float height), clutter_actor_set_height)

  _WRAP_METHOD(void set_x(float x), clutter_actor_set_x)
  _WRAP_METHOD(float get_x() const, clutter_actor_get_x)
  _WRAP_METHOD(void set_y(float y), clutter_actor_set_y)
  _WRAP_METHOD(float get_y() const, clutter_actor_get_y)
  _WRAP_METHOD(void set_z_position(float z_position), clutter_actor_set_z_position)
  _WRAP_METHOD(float get_z_position() const, clutter_actor_get_z_position)

 _WRAP_METHOD(void set_x_align(ActorAlign x_align), clutter_actor_set_x_align)
 _WRAP_METHOD(ActorAlign get_x_align() const, clutter_actor_get_x_align)
 _WRAP_METHOD(void set_y_align(ActorAlign y_align), clutter_actor_set_y_align)
 _WRAP_METHOD(ActorAlign get_y_align() const,clutter_actor_get_y_align)

  _WRAP_METHOD(bool get_x_expand() const, clutter_actor_get_x_expand)
  _WRAP_METHOD(void set_x_expand(bool expand = true), clutter_actor_set_x_expand)
  _WRAP_METHOD(bool get_y_expand() const, clutter_actor_get_y_expand)
  _WRAP_METHOD(void set_y_expand(bool expand = true), clutter_actor_set_y_expand)
  _WRAP_METHOD(bool needs_expand(Orientation orientation) const, clutter_actor_needs_expand)

  _WRAP_METHOD(void set_layout_manager(const Glib::RefPtr<LayoutManager>& manager), clutter_actor_set_layout_manager)

  /** Unset the layout manager.
   */
  void unset_layout_manager();

  _WRAP_METHOD(Glib::RefPtr<LayoutManager> get_layout_manager(), clutter_actor_get_layout_manager, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const LayoutManager> get_layout_manager() const, clutter_actor_get_layout_manager, refreturn, constversion)

  _WRAP_METHOD(void set_reactive(bool reactive = true), clutter_actor_set_reactive)
  _WRAP_METHOD(bool get_reactive() const, clutter_actor_get_reactive)

  _WRAP_METHOD(void set_rotation(RotateAxis axis, double angle, float x, float y, float z), clutter_actor_set_rotation, deprecated "Use set_rotation_angle() and set_pivot_point() instead.")
  _WRAP_METHOD(void set_z_rotation_from_gravity(double angle, Gravity gravity), clutter_actor_set_z_rotation_from_gravity, deprecated "Use set_rotation_angle() and set_pivot_point() instead.")
  _WRAP_METHOD(double get_rotation(RotateAxis axis, float& x, float& y, float& z) const, clutter_actor_get_rotation, deprecated "Use get_rotation_angle() and get_pivot_point() instead.")
  _WRAP_METHOD(Gravity get_z_rotation_gravity() const, clutter_actor_get_z_rotation_gravity, deprecated "Use the “pivot-point” instead of a Gravity.")
  _WRAP_METHOD(void set_opacity(guint8 opacity), clutter_actor_set_opacity)
  _WRAP_METHOD(guint8 get_opacity() const, clutter_actor_get_opacity)

  _WRAP_METHOD(void set_background_color(const Color& color), clutter_actor_set_background_color)

  /** Retrieves the color set using set_background_color().
   */
  Color get_background_color() const;
  _IGNORE(clutter_actor_get_background_color)

  _WRAP_METHOD(void set_name(const gchar *name), clutter_actor_set_name)
  _WRAP_METHOD(Glib::ustring get_name() const, clutter_actor_get_name)
  _WRAP_METHOD(guint32 get_gid() const, clutter_actor_get_gid)
  _WRAP_METHOD(void set_clip(float xoff, float yoff, float width, float height), clutter_actor_set_clip)
  _WRAP_METHOD(void get_clip(float& xoff, float& yoff, float& width, float& height), clutter_actor_get_clip)
  _WRAP_METHOD(void set_clip_to_allocation(bool clip_set = true), clutter_actor_set_clip_to_allocation)
  _WRAP_METHOD(bool get_clip_to_allocation() const, clutter_actor_get_clip_to_allocation)
  _WRAP_METHOD(void remove_clip(), clutter_actor_remove_clip)
  _WRAP_METHOD(bool has_clip() const, clutter_actor_has_clip)
  _WRAP_METHOD(void set_parent(const Glib::RefPtr<Actor>& parent), clutter_actor_set_parent, deprecated "Use clutter_actor_add_child() instead.")
  _WRAP_METHOD(Glib::RefPtr<Actor> get_parent(), clutter_actor_get_parent, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Actor> get_parent() const, clutter_actor_get_parent, refreturn, constversion)
  _WRAP_METHOD(void reparent(const Glib::RefPtr<Actor>& new_parent), clutter_actor_reparent, deprecated "Use remove_child() and add_child() instead.")
  _WRAP_METHOD(void unparent(), clutter_actor_unparent, deprecated "Use clutter_actor_remove_child() instead.")
  _WRAP_METHOD(bool contains(const Glib::RefPtr<const Actor>& descendant) const, clutter_actor_contains)
  _WRAP_METHOD(void raise(const Glib::RefPtr<Actor>& below), clutter_actor_raise, deprecated "Use set_child_above_sibling() instead.")
  _WRAP_METHOD(void lower(const Glib::RefPtr<Actor>& above), clutter_actor_lower, deprecated "Use set_child_below_sibling() instead")
  _WRAP_METHOD(void raise_top (), clutter_actor_raise_top)
  _WRAP_METHOD(void lower_bottom(), clutter_actor_lower_bottom)

  _WRAP_METHOD(Glib::RefPtr<Shader> get_shader(), clutter_actor_get_shader, refreturn, deprecated "Use get_effect() instead.")
  _WRAP_METHOD(Glib::RefPtr<const Shader> get_shader() const, clutter_actor_get_shader, refreturn, constversion, deprecated "Use get_effect() instead.")
  _WRAP_METHOD(void set_shader(const Glib::RefPtr<Shader>& shader), clutter_actor_set_shader, deprecated "Use add_effect() instead.")

_DEPRECATE_IFDEF_START
  _WRAP_METHOD_DOCS_ONLY(clutter_actor_set_shader_param)
  /**
   * @deprecated Use ShaderEffect::set_uniform_value() instead."
   */
  template <class ParamType> void set_shader_param(const Glib::ustring& param, const ParamType& value);
_DEPRECATE_IFDEF_END
  _IGNORE(clutter_actor_set_shader_param_int, clutter_actor_set_shader_param_float)

  //_WRAP_METHOD_DOCS_ONLY(clutter_actor_get_paint_area)
  //ActorBox get_paint_area() const;
  _WRAP_METHOD(bool is_rotated() const, clutter_actor_is_rotated)
  _WRAP_METHOD(bool is_scaled() const, clutter_actor_is_scaled)

  _WRAP_METHOD(void set_pivot_point(float x, float y), clutter_actor_set_pivot_point)
  _WRAP_METHOD(void get_pivot_point(float& pivot_x, float& pivot_y) const, clutter_actor_get_pivot_point)
  _WRAP_METHOD(void set_pivot_point_z(float pivot_z), clutter_actor_set_pivot_point_z)
  _WRAP_METHOD(float get_pivot_point_z() const, clutter_actor_get_pivot_point_z)
  _WRAP_METHOD(void set_rotation_angle(RotateAxis axis, double angle), clutter_actor_set_rotation_angle)
  _WRAP_METHOD(double get_rotation_angle(RotateAxis axis) const, clutter_actor_get_rotation_angle)

  _WRAP_METHOD(void set_translation(float translate_x, float translate_y, float translate_z), clutter_actor_set_translation)
  _WRAP_METHOD(void get_translation(float& translate_x, float& translate_y, float& translate_z) const, clutter_actor_get_translation)

  _WRAP_METHOD(bool should_pick_paint() const, clutter_actor_should_pick_paint)

  _WRAP_METHOD_DOCS_ONLY(clutter_actor_get_allocation_vertices)
  void get_allocation_vertices(Vertex vertices[4]) const;

  _WRAP_METHOD_DOCS_ONLY(clutter_actor_get_allocation_vertices)
  void get_allocation_vertices(const Glib::RefPtr<Actor>& ancestor, Vertex vertices[4]) const;

  _WRAP_METHOD_DOCS_ONLY(clutter_actor_get_abs_allocation_vertices)
  void get_abs_allocation_vertices(Vertex vertices[4]) const;

  _WRAP_METHOD_DOCS_ONLY(clutter_actor_get_allocation_box)
  ActorBox get_allocation_box() const;

  _WRAP_METHOD(void allocate(const ActorBox& box, AllocationFlags absolute_origin_changed = ALLOCATION_NONE), clutter_actor_allocate)

  //TODO: Make this protected?
  _WRAP_METHOD(void allocate_preferred_size(AllocationFlags absolute_origin_changed = ALLOCATION_NONE), clutter_actor_allocate_preferred_size)

  _WRAP_METHOD(void allocate_available_size(float x, float y, float available_width, float available_height, AllocationFlags flags = ALLOCATION_NONE), clutter_actor_allocate_available_size)

  _WRAP_METHOD(void apply_transform_to_point(const Vertex& point, Vertex& vertex) const, clutter_actor_apply_transform_to_point)
  _WRAP_METHOD(void transform_stage_point(float x, float y, float& x_out, float& y_out) const, clutter_actor_transform_stage_point)
#m4 _CONVERSION(`const Vertex&',`ClutterVertex*',`const_cast<ClutterVertex*>(($3).gobj())')
#m4 _CONVERSION(`Vertex&',`ClutterVertex*',`($3).gobj()')
  _WRAP_METHOD(void apply_relative_transform_to_point(const Glib::RefPtr<Actor>& ancestor, const Vertex& point, Vertex& vertex) const, clutter_actor_apply_relative_transform_to_point)
  _WRAP_METHOD_DOCS_ONLY(clutter_actor_get_allocation_vertices)
  void apply_relative_transform_to_point(const Vertex& point, Vertex& vertex) const;
  _WRAP_METHOD(void get_transformed_position(float& x, float& y) const, clutter_actor_get_transformed_position)
  _WRAP_METHOD(void get_transformed_size(float& width, float& height) const, clutter_actor_get_transformed_size)

  _WRAP_METHOD(void set_request_mode(RequestMode mode), clutter_actor_set_request_mode)
  _WRAP_METHOD(RequestMode get_request_mode() const, clutter_actor_get_request_mode)

  _WRAP_METHOD(void get_preferred_size(float& min_width_p, float& min_height_p, float& natural_width_p, float& natural_height_p) const, clutter_actor_get_preferred_size)
  _WRAP_METHOD(void get_preferred_width(float for_height, float& min_width_p, float& natural_width_p) const, clutter_actor_get_preferred_width)
  _WRAP_METHOD(void get_preferred_height(float for_width, float& min_height_p, float& natural_height_p) const, clutter_actor_get_preferred_height)
  _WRAP_METHOD(guint8 get_paint_opacity() const, clutter_actor_get_paint_opacity)
  _WRAP_METHOD(bool get_paint_visibility() const, clutter_actor_get_paint_visibility)
  _WRAP_METHOD(void move_anchor_point_from_gravity(Gravity gravity), clutter_actor_move_anchor_point_from_gravity, deprecated "Use “pivot-point” instead.")
  _WRAP_METHOD(void move_anchor_point(float anchor_x, float anchor_y), clutter_actor_move_anchor_point, deprecated "Use “pivot-point” instead.")

// IM: ClutterMargin.
  _IGNORE(clutter_actor_set_margin, clutter_actor_get_margin)
  _WRAP_METHOD(void set_margin_top(float margin), clutter_actor_set_margin_top)
  _WRAP_METHOD(float get_margin_top() const, clutter_actor_get_margin_top)
  _WRAP_METHOD(void set_margin_bottom(float margin), clutter_actor_set_margin_bottom)
  _WRAP_METHOD(float get_margin_bottom() const, clutter_actor_get_margin_bottom)
  _WRAP_METHOD(void set_margin_left(float margin), clutter_actor_set_margin_left)
  _WRAP_METHOD(float get_margin_left() const, clutter_actor_get_margin_left)
  _WRAP_METHOD(void set_margin_right(float margin), clutter_actor_set_margin_right)
  _WRAP_METHOD(float get_margin_right() const, clutter_actor_get_margin_right)
  /**
  * Convenience method for setting all margins at once.
  *
  * @param top The top margin
  * @param left the left margin
  * @param bottom The bottom margin
  * @param right The right margin.
  * */
  void set_margins(float top, float left, float bottom, float right);

  _WRAP_METHOD(bool get_fixed_position_set() const, clutter_actor_get_fixed_position_set)
  _WRAP_METHOD(void set_fixed_position_set(bool is_set), clutter_actor_set_fixed_position_set)

_DEPRECATE_IFDEF_START
  _WRAP_METHOD_DOCS_ONLY(clutter_actor_get_allocation_geometry)
  /**
   * @deprecated Use get_allocation_box() instead.
   */
  Geometry get_allocation_geometry() const;
_DEPRECATE_IFDEF_END

  _WRAP_METHOD(void set_depth(float depth), clutter_actor_set_depth, deprecated "Use set_z_position() instead.)
  _WRAP_METHOD(float get_depth() const, clutter_actor_get_depth, deprecated "Use get_z_position() instead.")
  _WRAP_METHOD(void set_scale(double scale_x, double scale_y), clutter_actor_set_scale)
  _WRAP_METHOD(void set_scale_z(double scale_z), clutter_actor_set_scale_z)
  _WRAP_METHOD(void set_scale_full(double scale_x, double scale_y, float center_x, float center_y), clutter_actor_set_scale_full, deprecated "Use set_pivot_point() to control the scale center.")
  _WRAP_METHOD(void set_scale_with_gravity(double scale_x, double scale_y, Gravity gravity), clutter_actor_set_scale_with_gravity, deprecated "Use clutter_actor_set_pivot_point() to set the scale center using normalized coordinates instead.")
  _WRAP_METHOD(void get_scale(double& scale_x, double& scale_y) const, clutter_actor_get_scale)
  _WRAP_METHOD(double get_scale_z() const, clutter_actor_get_scale_z)
  _WRAP_METHOD(void get_scale_center(float& center_x, float& center_y) const, clutter_actor_get_scale_center, deprecated "Use get_pivot_point() instead.")
  _WRAP_METHOD(Gravity get_scale_gravity() const, clutter_actor_get_scale_gravity, deprecated "Use get_pivot_point() instead.")

  //_WRAP_METHOD(void get_abs_size(float& width, float& height) const, clutter_actor_get_abs_size)
  _WRAP_METHOD(void get_size(float& width, float& height) const, clutter_actor_get_size)
  _WRAP_METHOD(void move_by(float dx, float dy), clutter_actor_move_by)

  _WRAP_METHOD(bool event(const ClutterEvent* event, bool capture), clutter_actor_event)
  _WRAP_METHOD(static Glib::RefPtr<Actor> get_actor_by_gid(guint32 id), clutter_get_actor_by_gid, refreturn, deprecated "The ID is no longer used.")

  _WRAP_METHOD(void set_anchor_point(float anchor_x, float anchor_y), clutter_actor_set_anchor_point, deprecated "Use “pivot-point” instead.")
  _WRAP_METHOD(void get_anchor_point(float& anchor_x, float& anchor_y) const, clutter_actor_get_anchor_point, deprecated "Use “pivot-point” instead.")
  _WRAP_METHOD(void set_anchor_point_from_gravity(ClutterGravity gravity), clutter_actor_set_anchor_point_from_gravity, deprecated "Use “pivot-point” instead.")
  _WRAP_METHOD(Gravity get_anchor_point_gravity(), clutter_actor_get_anchor_point_gravity, deprecated "Use “pivot-point” instead.")

  _WRAP_METHOD(void grab_key_focus(), clutter_actor_grab_key_focus)

  _WRAP_METHOD(void add_child(const Glib::RefPtr<Actor>& child), clutter_actor_add_child)
  _WRAP_METHOD(void insert_child_above(const Glib::RefPtr<Actor>& child, const Glib::RefPtr<Actor>& sibling), clutter_actor_insert_child_above)
  _WRAP_METHOD(void insert_child_at_index(const Glib::RefPtr<Actor>& child, int index{?}), clutter_actor_insert_child_at_index)
  _WRAP_METHOD(void insert_child_below(const Glib::RefPtr<Actor>& child, const Glib::RefPtr<Actor>& sibling), clutter_actor_insert_child_below)
  _WRAP_METHOD(void replace_child(const Glib::RefPtr<Actor>& old_child, const Glib::RefPtr<Actor>& new_child), clutter_actor_replace_child)

  _WRAP_METHOD(void remove_child(const Glib::RefPtr<Actor>& child), clutter_actor_remove_child )
  _WRAP_METHOD(void remove_all_children(), clutter_actor_remove_all_children )

   //deprecated
  _IGNORE(clutter_actor_animate, clutter_actor_animatev, clutter_actor_animate_with_timelinev, clutter_actor_animate_with_alphav)

  _WRAP_METHOD(Glib::RefPtr<Animation> get_animation(), clutter_actor_get_animation, refreturn, deprecated "Use the implicit transition for animatable properties in ClutterActor instead, and clutter_actor_get_transition() to retrieve the transition.")
  _WRAP_METHOD(Glib::RefPtr<const Animation> get_animation() const, clutter_actor_get_animation, refreturn, constversion, deprecated "Use the implicit transition for animatable properties in ClutterActor instead, and clutter_actor_get_transition() to retrieve the transition.")

  _WRAP_METHOD(void push_internal(), clutter_actor_push_internal, deprecated "All children of an actor are accessible through the ClutterActor API, and ClutterActor implements the ClutterContainer interface, so this function is only useful for legacy containers overriding the default implementation.")
  _WRAP_METHOD(void pop_internal(), clutter_actor_pop_internal, deprecated "All children of an actor are accessible through the ClutterActor API. This function is only useful for legacy containers overriding the default implementation of the ClutterContainer interface.")

  _WRAP_METHOD(bool has_allocation() const, clutter_actor_has_allocation)

  _WRAP_METHOD(Glib::RefPtr<Atk::Object> get_accessible(), clutter_actor_get_accessible, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Atk::Object> get_accessible() const, clutter_actor_get_accessible, refreturn, constversion)

  _WRAP_METHOD(void add_action(const Glib::RefPtr<Action>& action), clutter_actor_add_action)
  _WRAP_METHOD(void add_action(const Glib::ustring& name, const Glib::RefPtr<Action>& action), clutter_actor_add_action_with_name)
  _WRAP_METHOD(void remove_action(const Glib::RefPtr<Action>&action), clutter_actor_remove_action)
  _WRAP_METHOD(void remove_action(const Glib::ustring& name), clutter_actor_remove_action_by_name)

  _WRAP_METHOD(Glib::RefPtr<Action> get_action(const Glib::ustring& name), clutter_actor_get_action, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Action> get_action(const Glib::ustring& name) const, clutter_actor_get_action, refreturn, constversion)

//TODO:   _WRAP_METHOD(GLis* get_actions(), clutter_actor_get_actions)
  _WRAP_METHOD(void clear_actions(), clutter_actor_clear_actions)


  _WRAP_METHOD(void add_effect(const Glib::RefPtr<Effect>& effect), clutter_actor_add_effect)
  _WRAP_METHOD(void add_effect_with_name(const Glib::ustring& name,
                                                    const Glib::RefPtr<Effect>& effect), clutter_actor_add_effect_with_name)
  _WRAP_METHOD(void remove_effect(const Glib::RefPtr<Effect>& effect), clutter_actor_remove_effect)
  _WRAP_METHOD(void remove_effect(const Glib::ustring& name), clutter_actor_remove_effect_by_name )
  //TODO: GList *        clutter_actor_get_effects           (ClutterActor  *self);
  _WRAP_METHOD(Glib::RefPtr<Effect> get_effect(const Glib::ustring& name), clutter_actor_get_effect, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Effect> get_effect(const Glib::ustring& name) const, clutter_actor_get_effect, refreturn, constversion)
  _WRAP_METHOD(void clear_effects(), clutter_actor_clear_effects)

  //Animation Framework.  The Easing state is used for basic animations.

  _WRAP_METHOD(void save_easing_state(), clutter_actor_save_easing_state)
  _WRAP_METHOD(void restore_easing_state(), clutter_actor_restore_easing_state)
  _WRAP_METHOD(void set_easing_duration(guint msecs), clutter_actor_set_easing_duration)
  _WRAP_METHOD(guint get_easing_duration() const, clutter_actor_get_easing_duration)
  _WRAP_METHOD(AnimationMode get_easing_mode() const, clutter_actor_get_easing_mode)
  _WRAP_METHOD(void set_easing_mode(AnimationMode mode), clutter_actor_set_easing_mode)
  _WRAP_METHOD(guint get_easing_delay() const, clutter_actor_get_easing_delay)
  _WRAP_METHOD(void set_easing_delay(guint msecs), clutter_actor_set_easing_delay)


// signals
  _WRAP_SIGNAL(bool button_press_event(ButtonEvent* event), "button_press_event")
  _WRAP_SIGNAL(bool button_release_event(ButtonEvent* event), "button_release_event")
  _WRAP_SIGNAL(bool motion_event(MotionEvent* event), "motion_event")
  _WRAP_SIGNAL(bool leave_event(CrossingEvent* event), "leave_event")
  _WRAP_SIGNAL(void show(), "show")
  _WRAP_SIGNAL(void hide(), "hide")
  _WRAP_SIGNAL(void destroy(), "destroy")
  _WRAP_SIGNAL(bool key_release_event(KeyEvent* event), "key_release_event")
  _WRAP_SIGNAL(bool enter_event(CrossingEvent* event), "enter_event")
  _WRAP_SIGNAL(bool event(Event* event), "event")
  _WRAP_SIGNAL(void key_focus_out(), "key-focus_out")
  _WRAP_SIGNAL(void key_focus_in(), "key-focus_in")
#m4 _CONVERSION(`ClutterActor*', `const Glib::RefPtr<Actor>&', `Glib::wrap(($3),true)')
  _WRAP_SIGNAL(void parent_set(const Glib::RefPtr<Actor>& old_parent), "parent_set")
  _WRAP_SIGNAL(bool scroll_event(ScrollEvent* event), "scroll_event")
  _WRAP_SIGNAL(bool key_press_event(KeyEvent* event), "key_press_event")
  _WRAP_SIGNAL(bool captured_event(Event* event), "captured_event")
  _WRAP_SIGNAL(void paint(), "paint")
  _WRAP_SIGNAL(void queue_redaw(const Glib::RefPtr<Actor>& origin), "queue_redraw")
  _WRAP_SIGNAL(void queue_relayout(), "queue_relayout")
  _WRAP_SIGNAL(void realize(), "realize")
  _WRAP_SIGNAL(void unrealize(), "unrealize")

#m4 _CONVERSION(`const ClutterColor*', `const Color&', `Color(const_cast<ClutterColor*>($3), true)')
  _WRAP_SIGNAL(void pick(const Color& color), "pick")

#m4 _CONVERSION(`ClutterActorBox*', `const ActorBox&', `ActorBox(const_cast<ClutterActorBox*>($3))')
  _WRAP_SIGNAL(void allocation_changed(const ActorBox& box, AllocationFlags flags), "allocation-changed", no_default_handler)

  _WRAP_PROPERTY("allocation", ActorBox)
  _WRAP_PROPERTY("anchor-x", float)
  _WRAP_PROPERTY("anchor-y", float)
  _WRAP_PROPERTY("anchor-gravity", Gravity)
  _WRAP_PROPERTY("clip", Geometry)
  _WRAP_PROPERTY("clip-to-allocation", bool)
  _WRAP_PROPERTY("depth", float)
  _WRAP_PROPERTY("fixed-position-set", bool)
  _WRAP_PROPERTY("fixed-x", float)
  _WRAP_PROPERTY("fixed-y", float)
  _WRAP_PROPERTY("has-clip", bool)
  _WRAP_PROPERTY("has-pointer", bool)
  _WRAP_PROPERTY("height", float)
  _WRAP_PROPERTY("min-height", float)
  _WRAP_PROPERTY("min-height-set", bool)
  _WRAP_PROPERTY("min-width", float)
  _WRAP_PROPERTY("min-width-set", bool)
  _WRAP_PROPERTY("name", Glib::ustring)
  _WRAP_PROPERTY("opacity", guint8)
  _WRAP_PROPERTY("reactive", bool)
  _WRAP_PROPERTY("request-mode", RequestMode)
  _WRAP_PROPERTY("rotation-angle-x", double)
  _WRAP_PROPERTY("rotation-angle-y", double)
  _WRAP_PROPERTY("rotation-angle-z", double)
  _WRAP_PROPERTY("rotation-center-x", Vertex)
  _WRAP_PROPERTY("rotation-center-y", Vertex)
  _WRAP_PROPERTY("rotation-center-z", Vertex)
  _WRAP_PROPERTY("rotation-center-z-gravity", Gravity)
  _WRAP_PROPERTY("scale-x", double)
  _WRAP_PROPERTY("scale-y", double)
  _WRAP_PROPERTY("scale-center-x", double)
  _WRAP_PROPERTY("scale-center-y", double)
  _WRAP_PROPERTY("scale-gravity", Gravity)
  _WRAP_PROPERTY("show-on-set-parent", bool)
  _WRAP_PROPERTY("text-direction", TextDirection)
  _WRAP_PROPERTY("visible", bool)
  _WRAP_PROPERTY("width", float)
  _WRAP_PROPERTY("x", float)
  _WRAP_PROPERTY("x-align", ActorAlign )
  _WRAP_PROPERTY("x-expand", bool)
  _WRAP_PROPERTY("y", float)
  _WRAP_PROPERTY("y-align", ActorAlign )
  _WRAP_PROPERTY("y-expand", bool)

protected:
  //TODO: Wrap ClutterShaderEffect.
  _WRAP_METHOD(void set_shader_param_value(const Glib::ustring& param, const Glib::ValueBase& value),
               clutter_actor_set_shader_param, deprecated "Use ShaderEffect::set_uniform_value() instead.")

  //TODO: Add new vfuncs.
  _WRAP_VFUNC(void show_all(), "show_all")
  _WRAP_VFUNC(void hide_all(), "hide_all")

  // TODO: I think we need to hand-code the vfuncs if we need to handle
  // the float* being NULL.
  #m4 _CONVERSION(`float*', `float&', `*($3)')
  #m4 _CONVERSION(`const ClutterActorBox*', `const ActorBox&', `Glib::wrap($3)')
  _WRAP_VFUNC(void pick(const Color& color), "pick")
  _WRAP_VFUNC(void get_preferred_width(float for_height, float& min_width_p, float& natural_width_p) const, "get_preferred_width")
  _WRAP_VFUNC(void get_preferred_height(float for_width, float& min_height_p, float& natural_height_p) const, "get_preferred_height")
  _WRAP_VFUNC(void allocate(const ActorBox& box, AllocationFlags absolute_origin_changed), "allocate")

};

_DEPRECATE_IFDEF_START
#ifndef DOXYGEN_SHOULD_SKIP_THIS
template <class ParamType>
void Actor::set_shader_param(const Glib::ustring& param, const ParamType& value)
{
  Glib::Value<ParamType> param_value;
  param_value.init(Glib::Value<ParamType>::value_type());

  param_value.set(value);
  this->set_shader_param_value(param, param_value);
}
#endif /* DOXYGEN_SHOULD_SKIP_THIS */
_DEPRECATE_IFDEF_END

} // namespace Clutter
