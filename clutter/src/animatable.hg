/* Copyright (C) 207 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/interface.h>
#include <glibmm/ustring.h>
#include <glibmm/value.h>
#include <cluttermm/interval.h>

_DEFS(cluttermm,clutter)
_PINCLUDE(glibmm/private/interface_p.h)


#ifndef DOXYGEN_SHOULD_SKIP_THIS
extern "C"
{
typedef struct _ClutterAnimatableIface ClutterAnimatableIface;
}
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

namespace Clutter
{

class Interval;

class Animatable : public Glib::Interface
{
  _CLASS_INTERFACE(Animatable, ClutterAnimatable, CLUTTER_ANIMATABLE, ClutterAnimatableIface)

public:
  //no constructor- virtual base class.

  //TODO: Maybe we shouldn't bother wrapping this? It might not be useful and we have no GParamSpec wrapper:
  _WRAP_METHOD(GParamSpec* find_property(const Glib::ustring& property_name), clutter_animatable_find_property)

  _WRAP_METHOD(void get_initial_state_value(const Glib::ustring& property_name, Glib::ValueBase& value) const, clutter_animatable_get_initial_state, constversion)
  _WRAP_METHOD(void set_final_state_value(const Glib::ustring& property_name, const Glib::ValueBase& value), clutter_animatable_set_final_state)

  _WRAP_METHOD(void interpolate_value_value(const Glib::ustring& property_name, const Glib::RefPtr<const Interval>& interval, double progress, Glib::ValueBase& value), clutter_animatable_interpolate_value)

  /**
   * Gets the initial state of an animation
   *
   * @param property_name the name of the animatable property to retrieve
   * @param value the value of the property.
   */
  template <class ValueType>
  void get_initial_state(const Glib::ustring& property_name, ValueType& value) const;

  /**
   * Sets the final state for an animation.
   *
   * @param property_name the name of the animatable property to set.
   * @param gvalue a value of the appropriate type.
   */
  template <class ValueType>
  void set_final_state(const Glib::ustring& property_name, const ValueType& gvalue);


  //TODO: Documentation
  template <class ValueType>
  bool interpolate(const Glib::ustring& property_name,
    const Glib::RefPtr<const Interval>& interval,
    double progress,
    ValueType& gvalue);

protected:

  //TODO: Maybe we shouldn't bother wrapping this? It might not be useful and we have no GParamSpec wrapper:
  _WRAP_VFUNC(GParamSpec* find_property(const Glib::ustring& property_name), find_property)

  _WRAP_VFUNC(void get_initial_state(const Glib::ustring& property_name, Glib::ValueBase& value), get_initial_state)
  _WRAP_VFUNC(void set_final_state(const Glib::ustring& property_name, const Glib::ValueBase& value), set_final_state)

  //TODO: this function doesn't wrap.  removed from build for the present.
  //_WRAP_VFUNC(bool interpolate_value(const Glib::ustring& property_name, const Glib::RefPtr<const Interval>& interval, double progress, Glib::ValueBase& value), interpolate_value)
};


template <class ValueType>
void Animatable::get_initial_state(const Glib::ustring& property_name, ValueType& value) const
{
  Glib::Value<ValueType> glibmm_g_value;
  glibmm_g_value.init(Glib::Value<ValueType>::value_type());

  get_initial_state(property_name, glibmm_g_value);
  value = glibmm_g_value.get();
}

template <class ValueType>
void Animatable::set_final_state(const Glib::ustring& property_name, const ValueType& gvalue)
{
  Glib::Value<ValueType> glibmm_g_value;
  glibmm_g_value.init(Glib::Value<ValueType>::value_type());
  glibmm_g_value.set(gvalue);

  set_final_state_value(property_name, glibmm_g_value);
}

template <class ValueType>
bool Animatable::interpolate(const Glib::ustring& property_name,
  const Glib::RefPtr<const Interval>& interval,
  double progress,
  ValueType& gvalue)
{
  Glib::Value<ValueType> glibmm_g_value;
  glibmm_g_value.init(Glib::Value<ValueType>::value_type());
  glibmm_g_value.set(gvalue);

  const bool out = interpolate_value_value(
    gobj(),
    property_name,
    interval,
    progress,
    glibmm_g_value);

  gvalue = glibmm_g_value.get();
  return out;
}

} // namespace Clutter
