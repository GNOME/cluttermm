/* Copyright (C) 2011 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <cluttermm/backend.h>
#include <clutter/clutter.h>

namespace Clutter
{


Glib::RefPtr<DeviceManager> DeviceManager::get_default()
{
  return Glib::wrap(clutter_device_manager_get_default());
}

std::vector<Glib::RefPtr<InputDevice> > DeviceManager::list_devices()
{
  GSList* deviceList = clutter_device_manager_list_devices(gobj());

  const guint deviceCount = g_slist_length(deviceList);
  std::vector<Glib::RefPtr<InputDevice> > deviceVec;
  deviceVec.reserve(deviceCount);

  for(GSList* deviceNode = deviceList; deviceNode->next; deviceNode = deviceList->next)
  {
    deviceVec.push_back(Glib::wrap(static_cast<ClutterInputDevice*>(deviceNode->data), true));
  }

  return deviceVec;
}

std::vector<Glib::RefPtr<const InputDevice> > DeviceManager::list_devices() const
{
  GSList* deviceList = clutter_device_manager_list_devices(const_cast<ClutterDeviceManager*>(gobj()));

  const guint deviceCount = g_slist_length(deviceList);
  std::vector<Glib::RefPtr<const InputDevice> > deviceVec;
  deviceVec.reserve(deviceCount);

  for(GSList* deviceNode = deviceList; deviceNode->next; deviceNode = deviceList->next)
  {
    deviceVec.push_back(Glib::wrap(static_cast<ClutterInputDevice*>(deviceNode->data), true));
  }

  return deviceVec;
}

} // namespace Clutter
