;; -*- scheme -*-
; object definitions ...
(define-object Actor
  (in-module "Clutter")
  (parent "GInitiallyUnowned")
  (c-name "ClutterActor")
  (gtype-id "CLUTTER_TYPE_ACTOR")
)

(define-object ActorMeta
  (in-module "Clutter")
  (parent "GInitiallyUnowned")
  (c-name "ClutterActorMeta")
  (gtype-id "CLUTTER_TYPE_ACTOR_META")
)

(define-object Action
  (in-module "Clutter")
  (parent "ClutterActorMeta")
  (c-name "ClutterAction")
  (gtype-id "CLUTTER_TYPE_ACTION")
)

(define-object Animatable
  (in-module "Clutter")
  (c-name "ClutterAnimatable")
  (gtype-id "CLUTTER_TYPE_ANIMATABLE")
)

(define-object Backend
  (in-module "Clutter")
  (parent "GObject")
  (c-name "ClutterBackend")
  (gtype-id "CLUTTER_TYPE_BACKEND")
)

(define-object Canvas
  (in-module "Clutter")
  (parent "GObject")
  (c-name "ClutterCanvas")
  (gtype-id "CLUTTER_TYPE_CANVAS")
)

(define-object ChildMeta
  (in-module "Clutter")
  (parent "GObject")
  (c-name "ClutterChildMeta")
  (gtype-id "CLUTTER_TYPE_CHILD_META")
)

(define-object ClickAction
  (in-module "Clutter")
  (parent "ClutterAction")
  (c-name "ClutterClickAction")
  (gtype-id "CLUTTER_TYPE_CLICK_ACTION")
)

(define-object Clone
  (in-module "Clutter")
  (parent "ClutterActor")
  (c-name "ClutterClone")
  (gtype-id "CLUTTER_TYPE_CLONE")
)

(define-object Constraint
  (in-module "Clutter")
  (parent "ClutterActorMeta")
  (c-name "ClutterConstraint")
  (gtype-id "CLUTTER_TYPE_CONSTRAINT")
)

(define-object Container
  (in-module "Clutter")
  (c-name "ClutterContainer")
  (gtype-id "CLUTTER_TYPE_CONTAINER")
)

(define-object Content
  (in-module "Clutter")
  (c-name "ClutterContent")
  (gtype-id "CLUTTER_TYPE_CONTENT")
)

(define-object DeviceManager
  (in-module "Clutter")
  (parent "GObject")
  (c-name "ClutterDeviceManager")
  (gtype-id "CLUTTER_TYPE_DEVICE_MANAGER")
)

(define-object DragAction
  (in-module "Clutter")
  (parent "ClutterAction")
  (c-name "ClutterDragAction")
  (gtype-id "CLUTTER_TYPE_DRAG_ACTION")
)

(define-object DropAction
  (in-module "Clutter")
  (parent "ClutterAction")
  (c-name "ClutterDropAction")
  (gtype-id "CLUTTER_TYPE_DROP_ACTION")
)

(define-object Effect
  (in-module "Clutter")
  (parent "ClutterActorMeta")
  (c-name "ClutterEffect")
  (gtype-id "CLUTTER_TYPE_EFFECT")
)

(define-object EventTranslator
  (in-module "Clutter")
  (c-name "ClutterEventTranslator")
  (gtype-id "CLUTTER_TYPE_EVENT_TRANSLATOR")
)

(define-object GestureAction
  (in-module "Clutter")
  (parent "ClutterAction")
  (c-name "ClutterGestureAction")
  (gtype-id "CLUTTER_TYPE_GESTURE_ACTION")
)

(define-object Group
  (in-module "Clutter")
  (parent "ClutterActor")
  (c-name "ClutterGroup")
  (gtype-id "CLUTTER_TYPE_GROUP")
)

(define-object Image
  (in-module "Clutter")
  (parent "GObject")
  (c-name "ClutterImage")
  (gtype-id "CLUTTER_TYPE_IMAGE")
)

(define-object InputDevice
  (in-module "Clutter")
  (parent "GObject")
  (c-name "ClutterInputDevice")
  (gtype-id "CLUTTER_TYPE_INPUT_DEVICE")
)

(define-object Interval
  (in-module "Clutter")
  (parent "GInitiallyUnowned")
  (c-name "ClutterInterval")
  (gtype-id "CLUTTER_TYPE_INTERVAL")
)

(define-object LayoutManager
  (in-module "Clutter")
  (parent "GInitiallyUnowned")
  (c-name "ClutterLayoutManager")
  (gtype-id "CLUTTER_TYPE_LAYOUT_MANAGER")
)

(define-object GridLayout
  (in-module "Clutter")
  (parent "ClutterLayoutManager")
  (c-name "ClutterGridLayout")
  (gtype-id "CLUTTER_TYPE_GRID_LAYOUT")
)

(define-object FlowLayout
  (in-module "Clutter")
  (parent "ClutterLayoutManager")
  (c-name "ClutterFlowLayout")
  (gtype-id "CLUTTER_TYPE_FLOW_LAYOUT")
)

(define-object FixedLayout
  (in-module "Clutter")
  (parent "ClutterLayoutManager")
  (c-name "ClutterFixedLayout")
  (gtype-id "CLUTTER_TYPE_FIXED_LAYOUT")
)

(define-object BoxLayout
  (in-module "Clutter")
  (parent "ClutterLayoutManager")
  (c-name "ClutterBoxLayout")
  (gtype-id "CLUTTER_TYPE_BOX_LAYOUT")
)

(define-object BinLayout
  (in-module "Clutter")
  (parent "ClutterLayoutManager")
  (c-name "ClutterBinLayout")
  (gtype-id "CLUTTER_TYPE_BIN_LAYOUT")
)

(define-object LayoutMeta
  (in-module "Clutter")
  (parent "ClutterChildMeta")
  (c-name "ClutterLayoutMeta")
  (gtype-id "CLUTTER_TYPE_LAYOUT_META")
)

(define-object MetaGroup
  (in-module "Clutter")
  (parent "GObject")
  (c-name "ClutterMetaGroup")
  (gtype-id "CLUTTER_TYPE_META_GROUP")
)

(define-object Model
  (in-module "Clutter")
  (parent "GObject")
  (c-name "ClutterModel")
  (gtype-id "CLUTTER_TYPE_MODEL")
)

(define-object ListModel
  (in-module "Clutter")
  (parent "ClutterModel")
  (c-name "ClutterListModel")
  (gtype-id "CLUTTER_TYPE_LIST_MODEL")
)

(define-object ModelIter
  (in-module "Clutter")
  (parent "GObject")
  (c-name "ClutterModelIter")
  (gtype-id "CLUTTER_TYPE_MODEL_ITER")
)

(define-object OffscreenEffect
  (in-module "Clutter")
  (parent "ClutterEffect")
  (c-name "ClutterOffscreenEffect")
  (gtype-id "CLUTTER_TYPE_OFFSCREEN_EFFECT")
)

(define-object FlattenEffect
  (in-module "Clutter")
  (parent "ClutterOffscreenEffect")
  (c-name "ClutterFlattenEffect")
  (gtype-id "CLUTTER_TYPE_FLATTEN_EFFECT")
)

(define-object DeformEffect
  (in-module "Clutter")
  (parent "ClutterOffscreenEffect")
  (c-name "ClutterDeformEffect")
  (gtype-id "CLUTTER_TYPE_DEFORM_EFFECT")
)

(define-object PanAction
  (in-module "Clutter")
  (parent "ClutterGestureAction")
  (c-name "ClutterPanAction")
  (gtype-id "CLUTTER_TYPE_PAN_ACTION")
)

(define-object Path
  (in-module "Clutter")
  (parent "GInitiallyUnowned")
  (c-name "ClutterPath")
  (gtype-id "CLUTTER_TYPE_PATH")
)

(define-object RotateAction
  (in-module "Clutter")
  (parent "ClutterGestureAction")
  (c-name "ClutterRotateAction")
  (gtype-id "CLUTTER_TYPE_ROTATE_ACTION")
)

(define-object Script
  (in-module "Clutter")
  (parent "GObject")
  (c-name "ClutterScript")
  (gtype-id "CLUTTER_TYPE_SCRIPT")
)

(define-object Scriptable
  (in-module "Clutter")
  (c-name "ClutterScriptable")
  (gtype-id "CLUTTER_TYPE_SCRIPTABLE")
)

(define-object ScrollActor
  (in-module "Clutter")
  (parent "ClutterActor")
  (c-name "ClutterScrollActor")
  (gtype-id "CLUTTER_TYPE_SCROLL_ACTOR")
)

(define-object ShaderEffect
  (in-module "Clutter")
  (parent "ClutterOffscreenEffect")
  (c-name "ClutterShaderEffect")
  (gtype-id "CLUTTER_TYPE_SHADER_EFFECT")
)

(define-object Stage
  (in-module "Clutter")
  (parent "ClutterGroup")
  (c-name "ClutterStage")
  (gtype-id "CLUTTER_TYPE_STAGE")
)

(define-object StageWindow
  (in-module "Clutter")
  (c-name "ClutterStageWindow")
  (gtype-id "CLUTTER_TYPE_STAGE_WINDOW")
)

(define-object SwipeAction
  (in-module "Clutter")
  (parent "ClutterGestureAction")
  (c-name "ClutterSwipeAction")
  (gtype-id "CLUTTER_TYPE_SWIPE_ACTION")
)

(define-object TapAction
  (in-module "Clutter")
  (parent "ClutterGestureAction")
  (c-name "ClutterTapAction")
  (gtype-id "CLUTTER_TYPE_TAP_ACTION")
)

(define-object Text
  (in-module "Clutter")
  (parent "ClutterActor")
  (c-name "ClutterText")
  (gtype-id "CLUTTER_TYPE_TEXT")
)

(define-object TextBuffer
  (in-module "Clutter")
  (parent "GObject")
  (c-name "ClutterTextBuffer")
  (gtype-id "CLUTTER_TYPE_TEXT_BUFFER")
)

(define-object Texture
  (in-module "Clutter")
  (parent "ClutterActor")
  (c-name "ClutterTexture")
  (gtype-id "CLUTTER_TYPE_TEXTURE")
)

(define-object Timeline
  (in-module "Clutter")
  (parent "GObject")
  (c-name "ClutterTimeline")
  (gtype-id "CLUTTER_TYPE_TIMELINE")
)

(define-object Transition
  (in-module "Clutter")
  (parent "ClutterTimeline")
  (c-name "ClutterTransition")
  (gtype-id "CLUTTER_TYPE_TRANSITION")
)

(define-object PropertyTransition
  (in-module "Clutter")
  (parent "ClutterTransition")
  (c-name "ClutterPropertyTransition")
  (gtype-id "CLUTTER_TYPE_PROPERTY_TRANSITION")
)

(define-object KeyframeTransition
  (in-module "Clutter")
  (parent "ClutterPropertyTransition")
  (c-name "ClutterKeyframeTransition")
  (gtype-id "CLUTTER_TYPE_KEYFRAME_TRANSITION")
)

(define-object TransitionGroup
  (in-module "Clutter")
  (parent "ClutterTransition")
  (c-name "ClutterTransitionGroup")
  (gtype-id "CLUTTER_TYPE_TRANSITION_GROUP")
)

(define-object ZoomAction
  (in-module "Clutter")
  (parent "ClutterGestureAction")
  (c-name "ClutterZoomAction")
  (gtype-id "CLUTTER_TYPE_ZOOM_ACTION")
)

;; Enumerations and flags ...

(define-flags RedrawFlags
  (in-module "Clutter")
  (c-name "ClutterRedrawFlags")
  (gtype-id "CLUTTER_TYPE_REDRAW_FLAGS")
  (values
    '("allocation" "CLUTTER_REDRAW_CLIPPED_TO_ALLOCATION")
  )
)

(define-flags ActorTraverseFlags
  (in-module "Clutter")
  (c-name "ClutterActorTraverseFlags")
  (gtype-id "CLUTTER_TYPE_ACTOR_TRAVERSE_FLAGS")
  (values
    '("depth-first" "CLUTTER_ACTOR_TRAVERSE_DEPTH_FIRST")
    '("breadth-first" "CLUTTER_ACTOR_TRAVERSE_BREADTH_FIRST")
  )
)

(define-flags ActorTraverseVisitFlags
  (in-module "Clutter")
  (c-name "ClutterActorTraverseVisitFlags")
  (gtype-id "CLUTTER_TYPE_ACTOR_TRAVERSE_VISIT_FLAGS")
  (values
    '("continue" "CLUTTER_ACTOR_TRAVERSE_VISIT_CONTINUE")
    '("skip-children" "CLUTTER_ACTOR_TRAVERSE_VISIT_SKIP_CHILDREN")
    '("break" "CLUTTER_ACTOR_TRAVERSE_VISIT_BREAK")
  )
)

(define-flags DebugFlag
  (in-module "Clutter")
  (c-name "ClutterDebugFlag")
  (gtype-id "CLUTTER_TYPE_DEBUG_FLAG")
  (values
    '("misc" "CLUTTER_DEBUG_MISC")
    '("actor" "CLUTTER_DEBUG_ACTOR")
    '("texture" "CLUTTER_DEBUG_TEXTURE")
    '("event" "CLUTTER_DEBUG_EVENT")
    '("paint" "CLUTTER_DEBUG_PAINT")
    '("pango" "CLUTTER_DEBUG_PANGO")
    '("backend" "CLUTTER_DEBUG_BACKEND")
    '("scheduler" "CLUTTER_DEBUG_SCHEDULER")
    '("script" "CLUTTER_DEBUG_SCRIPT")
    '("shader" "CLUTTER_DEBUG_SHADER")
    '("multistage" "CLUTTER_DEBUG_MULTISTAGE")
    '("animation" "CLUTTER_DEBUG_ANIMATION")
    '("layout" "CLUTTER_DEBUG_LAYOUT")
    '("pick" "CLUTTER_DEBUG_PICK")
    '("eventloop" "CLUTTER_DEBUG_EVENTLOOP")
    '("clipping" "CLUTTER_DEBUG_CLIPPING")
    '("oob-transforms" "CLUTTER_DEBUG_OOB_TRANSFORMS")
  )
)

(define-flags PickDebugFlag
  (in-module "Clutter")
  (c-name "ClutterPickDebugFlag")
  (gtype-id "CLUTTER_TYPE_PICK_DEBUG_FLAG")
  (values
    '("nop-picking" "CLUTTER_DEBUG_NOP_PICKING")
    '("dump-pick-buffers" "CLUTTER_DEBUG_DUMP_PICK_BUFFERS")
  )
)

(define-flags DrawDebugFlag
  (in-module "Clutter")
  (c-name "ClutterDrawDebugFlag")
  (gtype-id "CLUTTER_TYPE_DRAW_DEBUG_FLAG")
  (values
    '("disable-swap-events" "CLUTTER_DEBUG_DISABLE_SWAP_EVENTS")
    '("disable-clipped-redraws" "CLUTTER_DEBUG_DISABLE_CLIPPED_REDRAWS")
    '("redraws" "CLUTTER_DEBUG_REDRAWS")
    '("paint-volumes" "CLUTTER_DEBUG_PAINT_VOLUMES")
    '("disable-culling" "CLUTTER_DEBUG_DISABLE_CULLING")
    '("disable-offscreen-redirect" "CLUTTER_DEBUG_DISABLE_OFFSCREEN_REDIRECT")
    '("continuous-redraw" "CLUTTER_DEBUG_CONTINUOUS_REDRAW")
    '("paint-deform-tiles" "CLUTTER_DEBUG_PAINT_DEFORM_TILES")
  )
)

(define-enum Gravity
  (in-module "Clutter")
  (c-name "ClutterGravity")
  (gtype-id "CLUTTER_TYPE_GRAVITY")
  (values
    '("none" "CLUTTER_GRAVITY_NONE")
    '("north" "CLUTTER_GRAVITY_NORTH")
    '("north-east" "CLUTTER_GRAVITY_NORTH_EAST")
    '("east" "CLUTTER_GRAVITY_EAST")
    '("south-east" "CLUTTER_GRAVITY_SOUTH_EAST")
    '("south" "CLUTTER_GRAVITY_SOUTH")
    '("south-west" "CLUTTER_GRAVITY_SOUTH_WEST")
    '("west" "CLUTTER_GRAVITY_WEST")
    '("north-west" "CLUTTER_GRAVITY_NORTH_WEST")
    '("center" "CLUTTER_GRAVITY_CENTER")
  )
)

(define-enum RotateAxis
  (in-module "Clutter")
  (c-name "ClutterRotateAxis")
  (gtype-id "CLUTTER_TYPE_ROTATE_AXIS")
  (values
    '("x-axis" "CLUTTER_X_AXIS")
    '("y-axis" "CLUTTER_Y_AXIS")
    '("z-axis" "CLUTTER_Z_AXIS")
  )
)

(define-enum RotateDirection
  (in-module "Clutter")
  (c-name "ClutterRotateDirection")
  (gtype-id "CLUTTER_TYPE_ROTATE_DIRECTION")
  (values
    '("cw" "CLUTTER_ROTATE_CW")
    '("ccw" "CLUTTER_ROTATE_CCW")
  )
)

(define-enum RequestMode
  (in-module "Clutter")
  (c-name "ClutterRequestMode")
  (gtype-id "CLUTTER_TYPE_REQUEST_MODE")
  (values
    '("height-for-width" "CLUTTER_REQUEST_HEIGHT_FOR_WIDTH")
    '("width-for-height" "CLUTTER_REQUEST_WIDTH_FOR_HEIGHT")
  )
)

(define-enum AnimationMode
  (in-module "Clutter")
  (c-name "ClutterAnimationMode")
  (gtype-id "CLUTTER_TYPE_ANIMATION_MODE")
  (values
    '("custom-mode" "CLUTTER_CUSTOM_MODE")
    '("linear" "CLUTTER_LINEAR")
    '("ease-in-quad" "CLUTTER_EASE_IN_QUAD")
    '("ease-out-quad" "CLUTTER_EASE_OUT_QUAD")
    '("ease-in-out-quad" "CLUTTER_EASE_IN_OUT_QUAD")
    '("ease-in-cubic" "CLUTTER_EASE_IN_CUBIC")
    '("ease-out-cubic" "CLUTTER_EASE_OUT_CUBIC")
    '("ease-in-out-cubic" "CLUTTER_EASE_IN_OUT_CUBIC")
    '("ease-in-quart" "CLUTTER_EASE_IN_QUART")
    '("ease-out-quart" "CLUTTER_EASE_OUT_QUART")
    '("ease-in-out-quart" "CLUTTER_EASE_IN_OUT_QUART")
    '("ease-in-quint" "CLUTTER_EASE_IN_QUINT")
    '("ease-out-quint" "CLUTTER_EASE_OUT_QUINT")
    '("ease-in-out-quint" "CLUTTER_EASE_IN_OUT_QUINT")
    '("ease-in-sine" "CLUTTER_EASE_IN_SINE")
    '("ease-out-sine" "CLUTTER_EASE_OUT_SINE")
    '("ease-in-out-sine" "CLUTTER_EASE_IN_OUT_SINE")
    '("ease-in-expo" "CLUTTER_EASE_IN_EXPO")
    '("ease-out-expo" "CLUTTER_EASE_OUT_EXPO")
    '("ease-in-out-expo" "CLUTTER_EASE_IN_OUT_EXPO")
    '("ease-in-circ" "CLUTTER_EASE_IN_CIRC")
    '("ease-out-circ" "CLUTTER_EASE_OUT_CIRC")
    '("ease-in-out-circ" "CLUTTER_EASE_IN_OUT_CIRC")
    '("ease-in-elastic" "CLUTTER_EASE_IN_ELASTIC")
    '("ease-out-elastic" "CLUTTER_EASE_OUT_ELASTIC")
    '("ease-in-out-elastic" "CLUTTER_EASE_IN_OUT_ELASTIC")
    '("ease-in-back" "CLUTTER_EASE_IN_BACK")
    '("ease-out-back" "CLUTTER_EASE_OUT_BACK")
    '("ease-in-out-back" "CLUTTER_EASE_IN_OUT_BACK")
    '("ease-in-bounce" "CLUTTER_EASE_IN_BOUNCE")
    '("ease-out-bounce" "CLUTTER_EASE_OUT_BOUNCE")
    '("ease-in-out-bounce" "CLUTTER_EASE_IN_OUT_BOUNCE")
    '("steps" "CLUTTER_STEPS")
    '("step-start" "CLUTTER_STEP_START")
    '("step-end" "CLUTTER_STEP_END")
    '("cubic-bezier" "CLUTTER_CUBIC_BEZIER")
    '("ease" "CLUTTER_EASE")
    '("ease-in" "CLUTTER_EASE_IN")
    '("ease-out" "CLUTTER_EASE_OUT")
    '("ease-in-out" "CLUTTER_EASE_IN_OUT")
    '("animation-last" "CLUTTER_ANIMATION_LAST")
  )
)

(define-flags FontFlags
  (in-module "Clutter")
  (c-name "ClutterFontFlags")
  (gtype-id "CLUTTER_TYPE_FONT_FLAGS")
  (values
    '("mipmapping" "CLUTTER_FONT_MIPMAPPING")
    '("hinting" "CLUTTER_FONT_HINTING")
  )
)

(define-enum TextDirection
  (in-module "Clutter")
  (c-name "ClutterTextDirection")
  (gtype-id "CLUTTER_TYPE_TEXT_DIRECTION")
  (values
    '("default" "CLUTTER_TEXT_DIRECTION_DEFAULT")
    '("ltr" "CLUTTER_TEXT_DIRECTION_LTR")
    '("rtl" "CLUTTER_TEXT_DIRECTION_RTL")
  )
)

(define-enum ShaderType
  (in-module "Clutter")
  (c-name "ClutterShaderType")
  (gtype-id "CLUTTER_TYPE_SHADER_TYPE")
  (values
    '("vertex-shader" "CLUTTER_VERTEX_SHADER")
    '("fragment-shader" "CLUTTER_FRAGMENT_SHADER")
  )
)

(define-flags ModifierType
  (in-module "Clutter")
  (c-name "ClutterModifierType")
  (gtype-id "CLUTTER_TYPE_MODIFIER_TYPE")
  (values
    '("shift-mask" "CLUTTER_SHIFT_MASK")
    '("lock-mask" "CLUTTER_LOCK_MASK")
    '("control-mask" "CLUTTER_CONTROL_MASK")
    '("mod1-mask" "CLUTTER_MOD1_MASK")
    '("mod2-mask" "CLUTTER_MOD2_MASK")
    '("mod3-mask" "CLUTTER_MOD3_MASK")
    '("mod4-mask" "CLUTTER_MOD4_MASK")
    '("mod5-mask" "CLUTTER_MOD5_MASK")
    '("button1-mask" "CLUTTER_BUTTON1_MASK")
    '("button2-mask" "CLUTTER_BUTTON2_MASK")
    '("button3-mask" "CLUTTER_BUTTON3_MASK")
    '("button4-mask" "CLUTTER_BUTTON4_MASK")
    '("button5-mask" "CLUTTER_BUTTON5_MASK")
    '("modifier-reserved-13-mask" "CLUTTER_MODIFIER_RESERVED_13_MASK")
    '("modifier-reserved-14-mask" "CLUTTER_MODIFIER_RESERVED_14_MASK")
    '("modifier-reserved-15-mask" "CLUTTER_MODIFIER_RESERVED_15_MASK")
    '("modifier-reserved-16-mask" "CLUTTER_MODIFIER_RESERVED_16_MASK")
    '("modifier-reserved-17-mask" "CLUTTER_MODIFIER_RESERVED_17_MASK")
    '("modifier-reserved-18-mask" "CLUTTER_MODIFIER_RESERVED_18_MASK")
    '("modifier-reserved-19-mask" "CLUTTER_MODIFIER_RESERVED_19_MASK")
    '("modifier-reserved-20-mask" "CLUTTER_MODIFIER_RESERVED_20_MASK")
    '("modifier-reserved-21-mask" "CLUTTER_MODIFIER_RESERVED_21_MASK")
    '("modifier-reserved-22-mask" "CLUTTER_MODIFIER_RESERVED_22_MASK")
    '("modifier-reserved-23-mask" "CLUTTER_MODIFIER_RESERVED_23_MASK")
    '("modifier-reserved-24-mask" "CLUTTER_MODIFIER_RESERVED_24_MASK")
    '("modifier-reserved-25-mask" "CLUTTER_MODIFIER_RESERVED_25_MASK")
    '("super-mask" "CLUTTER_SUPER_MASK")
    '("hyper-mask" "CLUTTER_HYPER_MASK")
    '("meta-mask" "CLUTTER_META_MASK")
    '("modifier-reserved-29-mask" "CLUTTER_MODIFIER_RESERVED_29_MASK")
    '("release-mask" "CLUTTER_RELEASE_MASK")
    '("modifier-mask" "CLUTTER_MODIFIER_MASK")
  )
)

(define-flags ActorFlags
  (in-module "Clutter")
  (c-name "ClutterActorFlags")
  (gtype-id "CLUTTER_TYPE_ACTOR_FLAGS")
  (values
    '("mapped" "CLUTTER_ACTOR_MAPPED")
    '("realized" "CLUTTER_ACTOR_REALIZED")
    '("reactive" "CLUTTER_ACTOR_REACTIVE")
    '("visible" "CLUTTER_ACTOR_VISIBLE")
    '("no-layout" "CLUTTER_ACTOR_NO_LAYOUT")
  )
)

(define-flags OffscreenRedirect
  (in-module "Clutter")
  (c-name "ClutterOffscreenRedirect")
  (gtype-id "CLUTTER_TYPE_OFFSCREEN_REDIRECT")
  (values
    '("automatic-for-opacity" "CLUTTER_OFFSCREEN_REDIRECT_AUTOMATIC_FOR_OPACITY")
    '("always" "CLUTTER_OFFSCREEN_REDIRECT_ALWAYS")
  )
)

(define-flags AllocationFlags
  (in-module "Clutter")
  (c-name "ClutterAllocationFlags")
  (gtype-id "CLUTTER_TYPE_ALLOCATION_FLAGS")
  (values
    '("allocation-none" "CLUTTER_ALLOCATION_NONE")
    '("absolute-origin-changed" "CLUTTER_ABSOLUTE_ORIGIN_CHANGED")
    '("delegate-layout" "CLUTTER_DELEGATE_LAYOUT")
  )
)

(define-enum AlignAxis
  (in-module "Clutter")
  (c-name "ClutterAlignAxis")
  (gtype-id "CLUTTER_TYPE_ALIGN_AXIS")
  (values
    '("x-axis" "CLUTTER_ALIGN_X_AXIS")
    '("y-axis" "CLUTTER_ALIGN_Y_AXIS")
    '("both" "CLUTTER_ALIGN_BOTH")
  )
)

(define-enum Interpolation
  (in-module "Clutter")
  (c-name "ClutterInterpolation")
  (gtype-id "CLUTTER_TYPE_INTERPOLATION")
  (values
    '("linear" "CLUTTER_INTERPOLATION_LINEAR")
    '("cubic" "CLUTTER_INTERPOLATION_CUBIC")
  )
)

(define-enum BinAlignment
  (in-module "Clutter")
  (c-name "ClutterBinAlignment")
  (gtype-id "CLUTTER_TYPE_BIN_ALIGNMENT")
  (values
    '("fixed" "CLUTTER_BIN_ALIGNMENT_FIXED")
    '("fill" "CLUTTER_BIN_ALIGNMENT_FILL")
    '("start" "CLUTTER_BIN_ALIGNMENT_START")
    '("end" "CLUTTER_BIN_ALIGNMENT_END")
    '("center" "CLUTTER_BIN_ALIGNMENT_CENTER")
  )
)

(define-enum BindCoordinate
  (in-module "Clutter")
  (c-name "ClutterBindCoordinate")
  (gtype-id "CLUTTER_TYPE_BIND_COORDINATE")
  (values
    '("x" "CLUTTER_BIND_X")
    '("y" "CLUTTER_BIND_Y")
    '("width" "CLUTTER_BIND_WIDTH")
    '("height" "CLUTTER_BIND_HEIGHT")
    '("position" "CLUTTER_BIND_POSITION")
    '("size" "CLUTTER_BIND_SIZE")
    '("all" "CLUTTER_BIND_ALL")
  )
)

(define-flags EffectPaintFlags
  (in-module "Clutter")
  (c-name "ClutterEffectPaintFlags")
  (gtype-id "CLUTTER_TYPE_EFFECT_PAINT_FLAGS")
  (values
    '("dirty" "CLUTTER_EFFECT_PAINT_ACTOR_DIRTY")
  )
)

(define-enum BoxAlignment
  (in-module "Clutter")
  (c-name "ClutterBoxAlignment")
  (gtype-id "CLUTTER_TYPE_BOX_ALIGNMENT")
  (values
    '("start" "CLUTTER_BOX_ALIGNMENT_START")
    '("end" "CLUTTER_BOX_ALIGNMENT_END")
    '("center" "CLUTTER_BOX_ALIGNMENT_CENTER")
  )
)

(define-enum LongPressState
  (in-module "Clutter")
  (c-name "ClutterLongPressState")
  (gtype-id "CLUTTER_TYPE_LONG_PRESS_STATE")
  (values
    '("query" "CLUTTER_LONG_PRESS_QUERY")
    '("activate" "CLUTTER_LONG_PRESS_ACTIVATE")
    '("cancel" "CLUTTER_LONG_PRESS_CANCEL")
  )
)

(define-enum StaticColor
  (in-module "Clutter")
  (c-name "ClutterStaticColor")
  (gtype-id "CLUTTER_TYPE_STATIC_COLOR")
  (values
    '("white" "CLUTTER_COLOR_WHITE")
    '("black" "CLUTTER_COLOR_BLACK")
    '("red" "CLUTTER_COLOR_RED")
    '("dark-red" "CLUTTER_COLOR_DARK_RED")
    '("green" "CLUTTER_COLOR_GREEN")
    '("dark-green" "CLUTTER_COLOR_DARK_GREEN")
    '("blue" "CLUTTER_COLOR_BLUE")
    '("dark-blue" "CLUTTER_COLOR_DARK_BLUE")
    '("cyan" "CLUTTER_COLOR_CYAN")
    '("dark-cyan" "CLUTTER_COLOR_DARK_CYAN")
    '("magenta" "CLUTTER_COLOR_MAGENTA")
    '("dark-magenta" "CLUTTER_COLOR_DARK_MAGENTA")
    '("yellow" "CLUTTER_COLOR_YELLOW")
    '("dark-yellow" "CLUTTER_COLOR_DARK_YELLOW")
    '("gray" "CLUTTER_COLOR_GRAY")
    '("dark-gray" "CLUTTER_COLOR_DARK_GRAY")
    '("light-gray" "CLUTTER_COLOR_LIGHT_GRAY")
    '("butter" "CLUTTER_COLOR_BUTTER")
    '("butter-light" "CLUTTER_COLOR_BUTTER_LIGHT")
    '("butter-dark" "CLUTTER_COLOR_BUTTER_DARK")
    '("orange" "CLUTTER_COLOR_ORANGE")
    '("orange-light" "CLUTTER_COLOR_ORANGE_LIGHT")
    '("orange-dark" "CLUTTER_COLOR_ORANGE_DARK")
    '("chocolate" "CLUTTER_COLOR_CHOCOLATE")
    '("chocolate-light" "CLUTTER_COLOR_CHOCOLATE_LIGHT")
    '("chocolate-dark" "CLUTTER_COLOR_CHOCOLATE_DARK")
    '("chameleon" "CLUTTER_COLOR_CHAMELEON")
    '("chameleon-light" "CLUTTER_COLOR_CHAMELEON_LIGHT")
    '("chameleon-dark" "CLUTTER_COLOR_CHAMELEON_DARK")
    '("sky-blue" "CLUTTER_COLOR_SKY_BLUE")
    '("sky-blue-light" "CLUTTER_COLOR_SKY_BLUE_LIGHT")
    '("sky-blue-dark" "CLUTTER_COLOR_SKY_BLUE_DARK")
    '("plum" "CLUTTER_COLOR_PLUM")
    '("plum-light" "CLUTTER_COLOR_PLUM_LIGHT")
    '("plum-dark" "CLUTTER_COLOR_PLUM_DARK")
    '("scarlet-red" "CLUTTER_COLOR_SCARLET_RED")
    '("scarlet-red-light" "CLUTTER_COLOR_SCARLET_RED_LIGHT")
    '("scarlet-red-dark" "CLUTTER_COLOR_SCARLET_RED_DARK")
    '("aluminium-1" "CLUTTER_COLOR_ALUMINIUM_1")
    '("aluminium-2" "CLUTTER_COLOR_ALUMINIUM_2")
    '("aluminium-3" "CLUTTER_COLOR_ALUMINIUM_3")
    '("aluminium-4" "CLUTTER_COLOR_ALUMINIUM_4")
    '("aluminium-5" "CLUTTER_COLOR_ALUMINIUM_5")
    '("aluminium-6" "CLUTTER_COLOR_ALUMINIUM_6")
    '("transparent" "CLUTTER_COLOR_TRANSPARENT")
  )
)

(define-enum DragAxis
  (in-module "Clutter")
  (c-name "ClutterDragAxis")
  (gtype-id "CLUTTER_TYPE_DRAG_AXIS")
  (values
    '("axis-none" "CLUTTER_DRAG_AXIS_NONE")
    '("x-axis" "CLUTTER_DRAG_X_AXIS")
    '("y-axis" "CLUTTER_DRAG_Y_AXIS")
  )
)

(define-flags EventFlags
  (in-module "Clutter")
  (c-name "ClutterEventFlags")
  (gtype-id "CLUTTER_TYPE_EVENT_FLAGS")
  (values
    '("none" "CLUTTER_EVENT_NONE")
    '("flag-synthetic" "CLUTTER_EVENT_FLAG_SYNTHETIC")
  )
)

(define-enum EventType
  (in-module "Clutter")
  (c-name "ClutterEventType")
  (gtype-id "CLUTTER_TYPE_EVENT_TYPE")
  (values
    '("nothing" "CLUTTER_NOTHING")
    '("key-press" "CLUTTER_KEY_PRESS")
    '("key-release" "CLUTTER_KEY_RELEASE")
    '("motion" "CLUTTER_MOTION")
    '("enter" "CLUTTER_ENTER")
    '("leave" "CLUTTER_LEAVE")
    '("button-press" "CLUTTER_BUTTON_PRESS")
    '("button-release" "CLUTTER_BUTTON_RELEASE")
    '("scroll" "CLUTTER_SCROLL")
    '("stage-state" "CLUTTER_STAGE_STATE")
    '("destroy-notify" "CLUTTER_DESTROY_NOTIFY")
    '("client-message" "CLUTTER_CLIENT_MESSAGE")
    '("delete" "CLUTTER_DELETE")
    '("touch-begin" "CLUTTER_TOUCH_BEGIN")
    '("touch-update" "CLUTTER_TOUCH_UPDATE")
    '("touch-end" "CLUTTER_TOUCH_END")
    '("touch-cancel" "CLUTTER_TOUCH_CANCEL")
    '("event-last" "CLUTTER_EVENT_LAST")
  )
)

(define-enum ScrollDirection
  (in-module "Clutter")
  (c-name "ClutterScrollDirection")
  (gtype-id "CLUTTER_TYPE_SCROLL_DIRECTION")
  (values
    '("up" "CLUTTER_SCROLL_UP")
    '("down" "CLUTTER_SCROLL_DOWN")
    '("left" "CLUTTER_SCROLL_LEFT")
    '("right" "CLUTTER_SCROLL_RIGHT")
    '("smooth" "CLUTTER_SCROLL_SMOOTH")
  )
)

(define-flags StageState
  (in-module "Clutter")
  (c-name "ClutterStageState")
  (gtype-id "CLUTTER_TYPE_STAGE_STATE")
  (values
    '("fullscreen" "CLUTTER_STAGE_STATE_FULLSCREEN")
    '("offscreen" "CLUTTER_STAGE_STATE_OFFSCREEN")
    '("activated" "CLUTTER_STAGE_STATE_ACTIVATED")
  )
)

(define-flags FeatureFlags
  (in-module "Clutter")
  (c-name "ClutterFeatureFlags")
  (gtype-id "CLUTTER_TYPE_FEATURE_FLAGS")
  (values
    '("texture-npot" "CLUTTER_FEATURE_TEXTURE_NPOT")
    '("sync-to-vblank" "CLUTTER_FEATURE_SYNC_TO_VBLANK")
    '("texture-yuv" "CLUTTER_FEATURE_TEXTURE_YUV")
    '("texture-read-pixels" "CLUTTER_FEATURE_TEXTURE_READ_PIXELS")
    '("stage-static" "CLUTTER_FEATURE_STAGE_STATIC")
    '("stage-user-resize" "CLUTTER_FEATURE_STAGE_USER_RESIZE")
    '("stage-cursor" "CLUTTER_FEATURE_STAGE_CURSOR")
    '("shaders-glsl" "CLUTTER_FEATURE_SHADERS_GLSL")
    '("offscreen" "CLUTTER_FEATURE_OFFSCREEN")
    '("stage-multiple" "CLUTTER_FEATURE_STAGE_MULTIPLE")
    '("swap-events" "CLUTTER_FEATURE_SWAP_EVENTS")
  )
)

(define-enum FlowOrientation
  (in-module "Clutter")
  (c-name "ClutterFlowOrientation")
  (gtype-id "CLUTTER_TYPE_FLOW_ORIENTATION")
  (values
    '("horizontal" "CLUTTER_FLOW_HORIZONTAL")
    '("vertical" "CLUTTER_FLOW_VERTICAL")
  )
)

(define-enum InputDeviceType
  (in-module "Clutter")
  (c-name "ClutterInputDeviceType")
  (gtype-id "CLUTTER_TYPE_INPUT_DEVICE_TYPE")
  (values
    '("pointer-device" "CLUTTER_POINTER_DEVICE")
    '("keyboard-device" "CLUTTER_KEYBOARD_DEVICE")
    '("extension-device" "CLUTTER_EXTENSION_DEVICE")
    '("joystick-device" "CLUTTER_JOYSTICK_DEVICE")
    '("tablet-device" "CLUTTER_TABLET_DEVICE")
    '("touchpad-device" "CLUTTER_TOUCHPAD_DEVICE")
    '("touchscreen-device" "CLUTTER_TOUCHSCREEN_DEVICE")
    '("pen-device" "CLUTTER_PEN_DEVICE")
    '("eraser-device" "CLUTTER_ERASER_DEVICE")
    '("cursor-device" "CLUTTER_CURSOR_DEVICE")
    '("n-device-types" "CLUTTER_N_DEVICE_TYPES")
  )
)

(define-enum InputMode
  (in-module "Clutter")
  (c-name "ClutterInputMode")
  (gtype-id "CLUTTER_TYPE_INPUT_MODE")
  (values
    '("master" "CLUTTER_INPUT_MODE_MASTER")
    '("slave" "CLUTTER_INPUT_MODE_SLAVE")
    '("floating" "CLUTTER_INPUT_MODE_FLOATING")
  )
)

(define-enum InputAxis
  (in-module "Clutter")
  (c-name "ClutterInputAxis")
  (gtype-id "CLUTTER_TYPE_INPUT_AXIS")
  (values
    '("ignore" "CLUTTER_INPUT_AXIS_IGNORE")
    '("x" "CLUTTER_INPUT_AXIS_X")
    '("y" "CLUTTER_INPUT_AXIS_Y")
    '("pressure" "CLUTTER_INPUT_AXIS_PRESSURE")
    '("xtilt" "CLUTTER_INPUT_AXIS_XTILT")
    '("ytilt" "CLUTTER_INPUT_AXIS_YTILT")
    '("wheel" "CLUTTER_INPUT_AXIS_WHEEL")
    '("distance" "CLUTTER_INPUT_AXIS_DISTANCE")
    '("last" "CLUTTER_INPUT_AXIS_LAST")
  )
)

(define-enum SnapEdge
  (in-module "Clutter")
  (c-name "ClutterSnapEdge")
  (gtype-id "CLUTTER_TYPE_SNAP_EDGE")
  (values
    '("top" "CLUTTER_SNAP_EDGE_TOP")
    '("right" "CLUTTER_SNAP_EDGE_RIGHT")
    '("bottom" "CLUTTER_SNAP_EDGE_BOTTOM")
    '("left" "CLUTTER_SNAP_EDGE_LEFT")
  )
)

(define-enum PickMode
  (in-module "Clutter")
  (c-name "ClutterPickMode")
  (gtype-id "CLUTTER_TYPE_PICK_MODE")
  (values
    '("none" "CLUTTER_PICK_NONE")
    '("reactive" "CLUTTER_PICK_REACTIVE")
    '("all" "CLUTTER_PICK_ALL")
  )
)

(define-flags SwipeDirection
  (in-module "Clutter")
  (c-name "ClutterSwipeDirection")
  (gtype-id "CLUTTER_TYPE_SWIPE_DIRECTION")
  (values
    '("up" "CLUTTER_SWIPE_DIRECTION_UP")
    '("down" "CLUTTER_SWIPE_DIRECTION_DOWN")
    '("left" "CLUTTER_SWIPE_DIRECTION_LEFT")
    '("right" "CLUTTER_SWIPE_DIRECTION_RIGHT")
  )
)

(define-enum PanAxis
  (in-module "Clutter")
  (c-name "ClutterPanAxis")
  (gtype-id "CLUTTER_TYPE_PAN_AXIS")
  (values
    '("axis-none" "CLUTTER_PAN_AXIS_NONE")
    '("x-axis" "CLUTTER_PAN_X_AXIS")
    '("y-axis" "CLUTTER_PAN_Y_AXIS")
  )
)

(define-enum TableAlignment
  (in-module "Clutter")
  (c-name "ClutterTableAlignment")
  (gtype-id "CLUTTER_TYPE_TABLE_ALIGNMENT")
  (values
    '("start" "CLUTTER_TABLE_ALIGNMENT_START")
    '("center" "CLUTTER_TABLE_ALIGNMENT_CENTER")
    '("end" "CLUTTER_TABLE_ALIGNMENT_END")
  )
)

(define-flags TextureFlags
  (in-module "Clutter")
  (c-name "ClutterTextureFlags")
  (gtype-id "CLUTTER_TYPE_TEXTURE_FLAGS")
  (values
    '("none" "CLUTTER_TEXTURE_NONE")
    '("rgb-flag-bgr" "CLUTTER_TEXTURE_RGB_FLAG_BGR")
    '("rgb-flag-premult" "CLUTTER_TEXTURE_RGB_FLAG_PREMULT")
    '("yuv-flag-yuv2" "CLUTTER_TEXTURE_YUV_FLAG_YUV2")
  )
)

(define-enum TextureQuality
  (in-module "Clutter")
  (c-name "ClutterTextureQuality")
  (gtype-id "CLUTTER_TYPE_TEXTURE_QUALITY")
  (values
    '("low" "CLUTTER_TEXTURE_QUALITY_LOW")
    '("medium" "CLUTTER_TEXTURE_QUALITY_MEDIUM")
    '("high" "CLUTTER_TEXTURE_QUALITY_HIGH")
  )
)

(define-enum TimelineDirection
  (in-module "Clutter")
  (c-name "ClutterTimelineDirection")
  (gtype-id "CLUTTER_TYPE_TIMELINE_DIRECTION")
  (values
    '("forward" "CLUTTER_TIMELINE_FORWARD")
    '("backward" "CLUTTER_TIMELINE_BACKWARD")
  )
)

(define-enum UnitType
  (in-module "Clutter")
  (c-name "ClutterUnitType")
  (gtype-id "CLUTTER_TYPE_UNIT_TYPE")
  (values
    '("pixel" "CLUTTER_UNIT_PIXEL")
    '("em" "CLUTTER_UNIT_EM")
    '("mm" "CLUTTER_UNIT_MM")
    '("point" "CLUTTER_UNIT_POINT")
    '("cm" "CLUTTER_UNIT_CM")
  )
)

(define-enum PathNodeType
  (in-module "Clutter")
  (c-name "ClutterPathNodeType")
  (gtype-id "CLUTTER_TYPE_PATH_NODE_TYPE")
  (values
    '("move-to" "CLUTTER_PATH_MOVE_TO")
    '("line-to" "CLUTTER_PATH_LINE_TO")
    '("curve-to" "CLUTTER_PATH_CURVE_TO")
    '("close" "CLUTTER_PATH_CLOSE")
    '("rel-move-to" "CLUTTER_PATH_REL_MOVE_TO")
    '("rel-line-to" "CLUTTER_PATH_REL_LINE_TO")
    '("rel-curve-to" "CLUTTER_PATH_REL_CURVE_TO")
  )
)

(define-enum ActorAlign
  (in-module "Clutter")
  (c-name "ClutterActorAlign")
  (gtype-id "CLUTTER_TYPE_ACTOR_ALIGN")
  (values
    '("fill" "CLUTTER_ACTOR_ALIGN_FILL")
    '("start" "CLUTTER_ACTOR_ALIGN_START")
    '("center" "CLUTTER_ACTOR_ALIGN_CENTER")
    '("end" "CLUTTER_ACTOR_ALIGN_END")
  )
)

(define-flags RepaintFlags
  (in-module "Clutter")
  (c-name "ClutterRepaintFlags")
  (gtype-id "CLUTTER_TYPE_REPAINT_FLAGS")
  (values
    '("pre-paint" "CLUTTER_REPAINT_FLAGS_PRE_PAINT")
    '("post-paint" "CLUTTER_REPAINT_FLAGS_POST_PAINT")
    '("queue-redraw-on-add" "CLUTTER_REPAINT_FLAGS_QUEUE_REDRAW_ON_ADD")
  )
)

(define-enum ContentGravity
  (in-module "Clutter")
  (c-name "ClutterContentGravity")
  (gtype-id "CLUTTER_TYPE_CONTENT_GRAVITY")
  (values
    '("top-left" "CLUTTER_CONTENT_GRAVITY_TOP_LEFT")
    '("top" "CLUTTER_CONTENT_GRAVITY_TOP")
    '("top-right" "CLUTTER_CONTENT_GRAVITY_TOP_RIGHT")
    '("left" "CLUTTER_CONTENT_GRAVITY_LEFT")
    '("center" "CLUTTER_CONTENT_GRAVITY_CENTER")
    '("right" "CLUTTER_CONTENT_GRAVITY_RIGHT")
    '("bottom-left" "CLUTTER_CONTENT_GRAVITY_BOTTOM_LEFT")
    '("bottom" "CLUTTER_CONTENT_GRAVITY_BOTTOM")
    '("bottom-right" "CLUTTER_CONTENT_GRAVITY_BOTTOM_RIGHT")
    '("resize-fill" "CLUTTER_CONTENT_GRAVITY_RESIZE_FILL")
    '("resize-aspect" "CLUTTER_CONTENT_GRAVITY_RESIZE_ASPECT")
  )
)

(define-enum ScalingFilter
  (in-module "Clutter")
  (c-name "ClutterScalingFilter")
  (gtype-id "CLUTTER_TYPE_SCALING_FILTER")
  (values
    '("linear" "CLUTTER_SCALING_FILTER_LINEAR")
    '("nearest" "CLUTTER_SCALING_FILTER_NEAREST")
    '("trilinear" "CLUTTER_SCALING_FILTER_TRILINEAR")
  )
)

(define-enum Orientation
  (in-module "Clutter")
  (c-name "ClutterOrientation")
  (gtype-id "CLUTTER_TYPE_ORIENTATION")
  (values
    '("horizontal" "CLUTTER_ORIENTATION_HORIZONTAL")
    '("vertical" "CLUTTER_ORIENTATION_VERTICAL")
  )
)

(define-flags ScrollMode
  (in-module "Clutter")
  (c-name "ClutterScrollMode")
  (gtype-id "CLUTTER_TYPE_SCROLL_MODE")
  (values
    '("none" "CLUTTER_SCROLL_NONE")
    '("horizontally" "CLUTTER_SCROLL_HORIZONTALLY")
    '("vertically" "CLUTTER_SCROLL_VERTICALLY")
    '("both" "CLUTTER_SCROLL_BOTH")
  )
)

(define-enum GridPosition
  (in-module "Clutter")
  (c-name "ClutterGridPosition")
  (gtype-id "CLUTTER_TYPE_GRID_POSITION")
  (values
    '("left" "CLUTTER_GRID_POSITION_LEFT")
    '("right" "CLUTTER_GRID_POSITION_RIGHT")
    '("top" "CLUTTER_GRID_POSITION_TOP")
    '("bottom" "CLUTTER_GRID_POSITION_BOTTOM")
  )
)

(define-flags ContentRepeat
  (in-module "Clutter")
  (c-name "ClutterContentRepeat")
  (gtype-id "CLUTTER_TYPE_CONTENT_REPEAT")
  (values
    '("none" "CLUTTER_REPEAT_NONE")
    '("x-axis" "CLUTTER_REPEAT_X_AXIS")
    '("y-axis" "CLUTTER_REPEAT_Y_AXIS")
    '("both" "CLUTTER_REPEAT_BOTH")
  )
)

(define-enum StepMode
  (in-module "Clutter")
  (c-name "ClutterStepMode")
  (gtype-id "CLUTTER_TYPE_STEP_MODE")
  (values
    '("start" "CLUTTER_STEP_MODE_START")
    '("end" "CLUTTER_STEP_MODE_END")
  )
)

(define-enum ZoomAxis
  (in-module "Clutter")
  (c-name "ClutterZoomAxis")
  (gtype-id "CLUTTER_TYPE_ZOOM_AXIS")
  (values
    '("x-axis" "CLUTTER_ZOOM_X_AXIS")
    '("y-axis" "CLUTTER_ZOOM_Y_AXIS")
    '("both" "CLUTTER_ZOOM_BOTH")
  )
)

(define-enum GestureTriggerEdge
  (in-module "Clutter")
  (c-name "ClutterGestureTriggerEdge")
  (gtype-id "CLUTTER_TYPE_GESTURE_TRIGGER_EDGE")
  (values
    '("none" "CLUTTER_GESTURE_TRIGGER_EDGE_NONE")
    '("after" "CLUTTER_GESTURE_TRIGGER_EDGE_AFTER")
    '("before" "CLUTTER_GESTURE_TRIGGER_EDGE_BEFORE")
  )
)

(define-enum TranslateReturn
  (in-module "Clutter")
  (c-name "ClutterTranslateReturn")
  (gtype-id "CLUTTER_TYPE_TRANSLATE_RETURN")
  (values
    '("continue" "CLUTTER_TRANSLATE_CONTINUE")
    '("remove" "CLUTTER_TRANSLATE_REMOVE")
    '("queue" "CLUTTER_TRANSLATE_QUEUE")
  )
)

(define-enum ImageError
  (in-module "Clutter")
  (c-name "ClutterImageError")
  (gtype-id "CLUTTER_TYPE_IMAGE_ERROR")
  (values
    '("data" "CLUTTER_IMAGE_ERROR_INVALID_DATA")
  )
)

(define-enum InitError
  (in-module "Clutter")
  (c-name "ClutterInitError")
  (gtype-id "CLUTTER_TYPE_INIT_ERROR")
  (values
    '("success" "CLUTTER_INIT_SUCCESS")
    '("error-unknown" "CLUTTER_INIT_ERROR_UNKNOWN")
    '("error-threads" "CLUTTER_INIT_ERROR_THREADS")
    '("error-backend" "CLUTTER_INIT_ERROR_BACKEND")
    '("error-internal" "CLUTTER_INIT_ERROR_INTERNAL")
  )
)

(define-enum OpCode
  (in-module "Paint")
  (c-name "PaintOpCode")
  (gtype-id "PAINT_TYPE_OP_CODE")
  (values
    '("invalid" "PAINT_OP_INVALID")
    '("tex-rect" "PAINT_OP_TEX_RECT")
    '("path" "PAINT_OP_PATH")
    '("primitive" "PAINT_OP_PRIMITIVE")
  )
)

(define-flags PrivateFlags
  (in-module "Clutter")
  (c-name "ClutterPrivateFlags")
  (gtype-id "CLUTTER_TYPE_PRIVATE_FLAGS")
  (values
    '("actor-unused-flag" "CLUTTER_ACTOR_UNUSED_FLAG")
    '("in-destruction" "CLUTTER_IN_DESTRUCTION")
    '("is-toplevel" "CLUTTER_IS_TOPLEVEL")
    '("in-reparent" "CLUTTER_IN_REPARENT")
    '("in-paint" "CLUTTER_IN_PAINT")
    '("in-relayout" "CLUTTER_IN_RELAYOUT")
    '("in-resize" "CLUTTER_IN_RESIZE")
    '("internal-child" "CLUTTER_INTERNAL_CHILD")
  )
)

(define-flags ProfileFlag
  (in-module "Clutter")
  (c-name "ClutterProfileFlag")
  (gtype-id "CLUTTER_TYPE_PROFILE_FLAG")
  (values
    '("picking-only" "CLUTTER_PROFILE_PICKING_ONLY")
    '("disable-report" "CLUTTER_PROFILE_DISABLE_REPORT")
  )
)

(define-enum ScriptError
  (in-module "Clutter")
  (c-name "ClutterScriptError")
  (gtype-id "CLUTTER_TYPE_SCRIPT_ERROR")
  (values
    '("type-function" "CLUTTER_SCRIPT_ERROR_INVALID_TYPE_FUNCTION")
    '("property" "CLUTTER_SCRIPT_ERROR_INVALID_PROPERTY")
    '("value" "CLUTTER_SCRIPT_ERROR_INVALID_VALUE")
  )
)

(define-enum TextureError
  (in-module "Clutter")
  (c-name "ClutterTextureError")
  (gtype-id "CLUTTER_TYPE_TEXTURE_ERROR")
  (values
    '("out-of-memory" "CLUTTER_TEXTURE_ERROR_OUT_OF_MEMORY")
    '("no-yuv" "CLUTTER_TEXTURE_ERROR_NO_YUV")
    '("bad-format" "CLUTTER_TEXTURE_ERROR_BAD_FORMAT")
  )
)


;; From clutter-action.h

(define-function clutter_action_get_type
  (c-name "clutter_action_get_type")
  (return-type "GType")
)

(define-method add_action
  (of-object "ClutterActor")
  (c-name "clutter_actor_add_action")
  (return-type "none")
  (parameters
    '("ClutterAction*" "action")
  )
)

(define-method add_action_with_name
  (of-object "ClutterActor")
  (c-name "clutter_actor_add_action_with_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("ClutterAction*" "action")
  )
)

(define-method remove_action
  (of-object "ClutterActor")
  (c-name "clutter_actor_remove_action")
  (return-type "none")
  (parameters
    '("ClutterAction*" "action")
  )
)

(define-method remove_action_by_name
  (of-object "ClutterActor")
  (c-name "clutter_actor_remove_action_by_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_action
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_action")
  (return-type "ClutterAction*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_actions
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_actions")
  (return-type "GList*")
)

(define-method clear_actions
  (of-object "ClutterActor")
  (c-name "clutter_actor_clear_actions")
  (return-type "none")
)

(define-method has_actions
  (of-object "ClutterActor")
  (c-name "clutter_actor_has_actions")
  (return-type "gboolean")
)



;; From clutter-actor.h

(define-function CLUTTER_PRIVATE_FIELD
  (c-name "CLUTTER_PRIVATE_FIELD")
  (return-type "gpointer")
  (parameters
  )
)

(define-function CLUTTER_PRIVATE_FIELD
  (c-name "CLUTTER_PRIVATE_FIELD")
  (return-type "gpointer")
  (parameters
  )
)

(define-function CLUTTER_PRIVATE_FIELD
  (c-name "CLUTTER_PRIVATE_FIELD")
  (return-type "gint")
  (parameters
  )
)

(define-function CLUTTER_PRIVATE_FIELD
  (c-name "CLUTTER_PRIVATE_FIELD")
  (return-type "gpointer")
  (parameters
  )
)

(define-function clutter_actor_get_type
  (c-name "clutter_actor_get_type")
  (return-type "GType")
)

(define-function clutter_actor_new
  (c-name "clutter_actor_new")
  (is-constructor-of "ClutterActor")
  (return-type "ClutterActor*")
)

(define-method set_flags
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_flags")
  (return-type "none")
  (parameters
    '("ClutterActorFlags" "flags")
  )
)

(define-method unset_flags
  (of-object "ClutterActor")
  (c-name "clutter_actor_unset_flags")
  (return-type "none")
  (parameters
    '("ClutterActorFlags" "flags")
  )
)

(define-method get_flags
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_flags")
  (return-type "ClutterActorFlags")
)

(define-method show
  (of-object "ClutterActor")
  (c-name "clutter_actor_show")
  (return-type "none")
)

(define-method hide
  (of-object "ClutterActor")
  (c-name "clutter_actor_hide")
  (return-type "none")
)

(define-method realize
  (of-object "ClutterActor")
  (c-name "clutter_actor_realize")
  (return-type "none")
)

(define-method unrealize
  (of-object "ClutterActor")
  (c-name "clutter_actor_unrealize")
  (return-type "none")
)

(define-method map
  (of-object "ClutterActor")
  (c-name "clutter_actor_map")
  (return-type "none")
)

(define-method unmap
  (of-object "ClutterActor")
  (c-name "clutter_actor_unmap")
  (return-type "none")
)

(define-method paint
  (of-object "ClutterActor")
  (c-name "clutter_actor_paint")
  (return-type "none")
)

(define-method continue_paint
  (of-object "ClutterActor")
  (c-name "clutter_actor_continue_paint")
  (return-type "none")
)

(define-method queue_redraw
  (of-object "ClutterActor")
  (c-name "clutter_actor_queue_redraw")
  (return-type "none")
)

(define-method queue_redraw_with_clip
  (of-object "ClutterActor")
  (c-name "clutter_actor_queue_redraw_with_clip")
  (return-type "none")
  (parameters
    '("const-cairo_rectangle_int_t*" "clip")
  )
)

(define-method queue_relayout
  (of-object "ClutterActor")
  (c-name "clutter_actor_queue_relayout")
  (return-type "none")
)

(define-method destroy
  (of-object "ClutterActor")
  (c-name "clutter_actor_destroy")
  (return-type "none")
)

(define-method set_name
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_name
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_name")
  (return-type "const-gchar*")
)

(define-method get_accessible
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_accessible")
  (return-type "AtkObject*")
)

(define-method set_request_mode
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_request_mode")
  (return-type "none")
  (parameters
    '("ClutterRequestMode" "mode")
  )
)

(define-method get_request_mode
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_request_mode")
  (return-type "ClutterRequestMode")
)

(define-method get_preferred_width
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_preferred_width")
  (return-type "none")
  (parameters
    '("gfloat" "for_height")
    '("gfloat*" "min_width_p")
    '("gfloat*" "natural_width_p")
  )
)

(define-method get_preferred_height
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_preferred_height")
  (return-type "none")
  (parameters
    '("gfloat" "for_width")
    '("gfloat*" "min_height_p")
    '("gfloat*" "natural_height_p")
  )
)

(define-method get_preferred_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_preferred_size")
  (return-type "none")
  (parameters
    '("gfloat*" "min_width_p")
    '("gfloat*" "min_height_p")
    '("gfloat*" "natural_width_p")
    '("gfloat*" "natural_height_p")
  )
)

(define-method allocate
  (of-object "ClutterActor")
  (c-name "clutter_actor_allocate")
  (return-type "none")
  (parameters
    '("const-ClutterActorBox*" "box")
    '("ClutterAllocationFlags" "flags")
  )
)

(define-method allocate_preferred_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_allocate_preferred_size")
  (return-type "none")
  (parameters
    '("ClutterAllocationFlags" "flags")
  )
)

(define-method allocate_available_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_allocate_available_size")
  (return-type "none")
  (parameters
    '("gfloat" "x")
    '("gfloat" "y")
    '("gfloat" "available_width")
    '("gfloat" "available_height")
    '("ClutterAllocationFlags" "flags")
  )
)

(define-method allocate_align_fill
  (of-object "ClutterActor")
  (c-name "clutter_actor_allocate_align_fill")
  (return-type "none")
  (parameters
    '("const-ClutterActorBox*" "box")
    '("gdouble" "x_align")
    '("gdouble" "y_align")
    '("gboolean" "x_fill")
    '("gboolean" "y_fill")
    '("ClutterAllocationFlags" "flags")
  )
)

(define-method set_allocation
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_allocation")
  (return-type "none")
  (parameters
    '("const-ClutterActorBox*" "box")
    '("ClutterAllocationFlags" "flags")
  )
)

(define-method get_allocation_box
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_allocation_box")
  (return-type "none")
  (parameters
    '("ClutterActorBox*" "box")
  )
)

(define-method get_allocation_vertices
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_allocation_vertices")
  (return-type "none")
  (parameters
    '("ClutterActor*" "ancestor")
    '("ClutterVertex[]" "verts")
  )
)

(define-method has_allocation
  (of-object "ClutterActor")
  (c-name "clutter_actor_has_allocation")
  (return-type "gboolean")
)

(define-method set_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_size")
  (return-type "none")
  (parameters
    '("gfloat" "width")
    '("gfloat" "height")
  )
)

(define-method get_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_size")
  (return-type "none")
  (parameters
    '("gfloat*" "width")
    '("gfloat*" "height")
  )
)

(define-method set_position
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_position")
  (return-type "none")
  (parameters
    '("gfloat" "x")
    '("gfloat" "y")
  )
)

(define-method get_position
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_position")
  (return-type "none")
  (parameters
    '("gfloat*" "x")
    '("gfloat*" "y")
  )
)

(define-method get_fixed_position_set
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_fixed_position_set")
  (return-type "gboolean")
)

(define-method set_fixed_position_set
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_fixed_position_set")
  (return-type "none")
  (parameters
    '("gboolean" "is_set")
  )
)

(define-method move_by
  (of-object "ClutterActor")
  (c-name "clutter_actor_move_by")
  (return-type "none")
  (parameters
    '("gfloat" "dx")
    '("gfloat" "dy")
  )
)

(define-method get_width
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_width")
  (return-type "gfloat")
)

(define-method get_height
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_height")
  (return-type "gfloat")
)

(define-method set_width
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_width")
  (return-type "none")
  (parameters
    '("gfloat" "width")
  )
)

(define-method set_height
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_height")
  (return-type "none")
  (parameters
    '("gfloat" "height")
  )
)

(define-method get_x
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_x")
  (return-type "gfloat")
)

(define-method get_y
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_y")
  (return-type "gfloat")
)

(define-method set_x
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_x")
  (return-type "none")
  (parameters
    '("gfloat" "x")
  )
)

(define-method set_y
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_y")
  (return-type "none")
  (parameters
    '("gfloat" "y")
  )
)

(define-method set_z_position
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_z_position")
  (return-type "none")
  (parameters
    '("gfloat" "z_position")
  )
)

(define-method get_z_position
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_z_position")
  (return-type "gfloat")
)

(define-method set_layout_manager
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_layout_manager")
  (return-type "none")
  (parameters
    '("ClutterLayoutManager*" "manager")
  )
)

(define-method get_layout_manager
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_layout_manager")
  (return-type "ClutterLayoutManager*")
)

(define-method set_x_align
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_x_align")
  (return-type "none")
  (parameters
    '("ClutterActorAlign" "x_align")
  )
)

(define-method get_x_align
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_x_align")
  (return-type "ClutterActorAlign")
)

(define-method set_y_align
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_y_align")
  (return-type "none")
  (parameters
    '("ClutterActorAlign" "y_align")
  )
)

(define-method get_y_align
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_y_align")
  (return-type "ClutterActorAlign")
)

(define-method set_margin_top
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_margin_top")
  (return-type "none")
  (parameters
    '("gfloat" "margin")
  )
)

(define-method get_margin_top
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_margin_top")
  (return-type "gfloat")
)

(define-method set_margin_bottom
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_margin_bottom")
  (return-type "none")
  (parameters
    '("gfloat" "margin")
  )
)

(define-method get_margin_bottom
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_margin_bottom")
  (return-type "gfloat")
)

(define-method set_margin_left
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_margin_left")
  (return-type "none")
  (parameters
    '("gfloat" "margin")
  )
)

(define-method get_margin_left
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_margin_left")
  (return-type "gfloat")
)

(define-method set_margin_right
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_margin_right")
  (return-type "none")
  (parameters
    '("gfloat" "margin")
  )
)

(define-method get_margin_right
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_margin_right")
  (return-type "gfloat")
)

(define-method set_margin
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_margin")
  (return-type "none")
  (parameters
    '("const-ClutterMargin*" "margin")
  )
)

(define-method get_margin
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_margin")
  (return-type "none")
  (parameters
    '("ClutterMargin*" "margin")
  )
)

(define-method set_x_expand
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_x_expand")
  (return-type "none")
  (parameters
    '("gboolean" "expand")
  )
)

(define-method get_x_expand
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_x_expand")
  (return-type "gboolean")
)

(define-method set_y_expand
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_y_expand")
  (return-type "none")
  (parameters
    '("gboolean" "expand")
  )
)

(define-method get_y_expand
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_y_expand")
  (return-type "gboolean")
)

(define-method needs_expand
  (of-object "ClutterActor")
  (c-name "clutter_actor_needs_expand")
  (return-type "gboolean")
  (parameters
    '("ClutterOrientation" "orientation")
  )
)

(define-method set_clip
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_clip")
  (return-type "none")
  (parameters
    '("gfloat" "xoff")
    '("gfloat" "yoff")
    '("gfloat" "width")
    '("gfloat" "height")
  )
)

(define-method remove_clip
  (of-object "ClutterActor")
  (c-name "clutter_actor_remove_clip")
  (return-type "none")
)

(define-method has_clip
  (of-object "ClutterActor")
  (c-name "clutter_actor_has_clip")
  (return-type "gboolean")
)

(define-method get_clip
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_clip")
  (return-type "none")
  (parameters
    '("gfloat*" "xoff")
    '("gfloat*" "yoff")
    '("gfloat*" "width")
    '("gfloat*" "height")
  )
)

(define-method set_clip_to_allocation
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_clip_to_allocation")
  (return-type "none")
  (parameters
    '("gboolean" "clip_set")
  )
)

(define-method get_clip_to_allocation
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_clip_to_allocation")
  (return-type "gboolean")
)

(define-method set_opacity
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_opacity")
  (return-type "none")
  (parameters
    '("guint8" "opacity")
  )
)

(define-method get_opacity
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_opacity")
  (return-type "guint8")
)

(define-method get_paint_opacity
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_paint_opacity")
  (return-type "guint8")
)

(define-method get_paint_visibility
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_paint_visibility")
  (return-type "gboolean")
)

(define-method set_offscreen_redirect
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_offscreen_redirect")
  (return-type "none")
  (parameters
    '("ClutterOffscreenRedirect" "redirect")
  )
)

(define-method get_offscreen_redirect
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_offscreen_redirect")
  (return-type "ClutterOffscreenRedirect")
)

(define-method should_pick_paint
  (of-object "ClutterActor")
  (c-name "clutter_actor_should_pick_paint")
  (return-type "gboolean")
)

(define-method is_in_clone_paint
  (of-object "ClutterActor")
  (c-name "clutter_actor_is_in_clone_paint")
  (return-type "gboolean")
)

(define-method get_paint_box
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_paint_box")
  (return-type "gboolean")
  (parameters
    '("ClutterActorBox*" "box")
  )
)

(define-method has_overlaps
  (of-object "ClutterActor")
  (c-name "clutter_actor_has_overlaps")
  (return-type "gboolean")
)

(define-method set_content
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_content")
  (return-type "none")
  (parameters
    '("ClutterContent*" "content")
  )
)

(define-method get_content
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_content")
  (return-type "ClutterContent*")
)

(define-method set_content_gravity
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_content_gravity")
  (return-type "none")
  (parameters
    '("ClutterContentGravity" "gravity")
  )
)

(define-method get_content_gravity
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_content_gravity")
  (return-type "ClutterContentGravity")
)

(define-method set_content_scaling_filters
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_content_scaling_filters")
  (return-type "none")
  (parameters
    '("ClutterScalingFilter" "min_filter")
    '("ClutterScalingFilter" "mag_filter")
  )
)

(define-method get_content_scaling_filters
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_content_scaling_filters")
  (return-type "none")
  (parameters
    '("ClutterScalingFilter*" "min_filter")
    '("ClutterScalingFilter*" "mag_filter")
  )
)

(define-method set_content_repeat
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_content_repeat")
  (return-type "none")
  (parameters
    '("ClutterContentRepeat" "repeat")
  )
)

(define-method get_content_repeat
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_content_repeat")
  (return-type "ClutterContentRepeat")
)

(define-method get_content_box
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_content_box")
  (return-type "none")
  (parameters
    '("ClutterActorBox*" "box")
  )
)

(define-method set_background_color
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_background_color")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_background_color
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_background_color")
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method get_paint_volume
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_paint_volume")
  (return-type "const-ClutterPaintVolume*")
)

(define-method get_transformed_paint_volume
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_transformed_paint_volume")
  (return-type "const-ClutterPaintVolume*")
  (parameters
    '("ClutterActor*" "relative_to_ancestor")
  )
)

(define-method get_default_paint_volume
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_default_paint_volume")
  (return-type "const-ClutterPaintVolume*")
)

(define-method set_reactive
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_reactive")
  (return-type "none")
  (parameters
    '("gboolean" "reactive")
  )
)

(define-method get_reactive
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_reactive")
  (return-type "gboolean")
)

(define-method has_key_focus
  (of-object "ClutterActor")
  (c-name "clutter_actor_has_key_focus")
  (return-type "gboolean")
)

(define-method grab_key_focus
  (of-object "ClutterActor")
  (c-name "clutter_actor_grab_key_focus")
  (return-type "none")
)

(define-method event
  (of-object "ClutterActor")
  (c-name "clutter_actor_event")
  (return-type "gboolean")
  (parameters
    '("const-ClutterEvent*" "event")
    '("gboolean" "capture")
  )
)

(define-method has_pointer
  (of-object "ClutterActor")
  (c-name "clutter_actor_has_pointer")
  (return-type "gboolean")
)

(define-method get_pango_context
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_pango_context")
  (return-type "PangoContext*")
)

(define-method create_pango_context
  (of-object "ClutterActor")
  (c-name "clutter_actor_create_pango_context")
  (return-type "PangoContext*")
)

(define-method create_pango_layout
  (of-object "ClutterActor")
  (c-name "clutter_actor_create_pango_layout")
  (return-type "PangoLayout*")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method set_text_direction
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_text_direction")
  (return-type "none")
  (parameters
    '("ClutterTextDirection" "text_dir")
  )
)

(define-method get_text_direction
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_text_direction")
  (return-type "ClutterTextDirection")
)

(define-method add_child
  (of-object "ClutterActor")
  (c-name "clutter_actor_add_child")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
  )
)

(define-method insert_child_at_index
  (of-object "ClutterActor")
  (c-name "clutter_actor_insert_child_at_index")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("gint" "index_")
  )
)

(define-method insert_child_above
  (of-object "ClutterActor")
  (c-name "clutter_actor_insert_child_above")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("ClutterActor*" "sibling")
  )
)

(define-method insert_child_below
  (of-object "ClutterActor")
  (c-name "clutter_actor_insert_child_below")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("ClutterActor*" "sibling")
  )
)

(define-method replace_child
  (of-object "ClutterActor")
  (c-name "clutter_actor_replace_child")
  (return-type "none")
  (parameters
    '("ClutterActor*" "old_child")
    '("ClutterActor*" "new_child")
  )
)

(define-method remove_child
  (of-object "ClutterActor")
  (c-name "clutter_actor_remove_child")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
  )
)

(define-method remove_all_children
  (of-object "ClutterActor")
  (c-name "clutter_actor_remove_all_children")
  (return-type "none")
)

(define-method destroy_all_children
  (of-object "ClutterActor")
  (c-name "clutter_actor_destroy_all_children")
  (return-type "none")
)

(define-method get_children
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_children")
  (return-type "GList*")
)

(define-method get_n_children
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_n_children")
  (return-type "gint")
)

(define-method get_child_at_index
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_child_at_index")
  (return-type "ClutterActor*")
  (parameters
    '("gint" "index_")
  )
)

(define-method get_previous_sibling
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_previous_sibling")
  (return-type "ClutterActor*")
)

(define-method get_next_sibling
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_next_sibling")
  (return-type "ClutterActor*")
)

(define-method get_first_child
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_first_child")
  (return-type "ClutterActor*")
)

(define-method get_last_child
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_last_child")
  (return-type "ClutterActor*")
)

(define-method get_parent
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_parent")
  (return-type "ClutterActor*")
)

(define-method contains
  (of-object "ClutterActor")
  (c-name "clutter_actor_contains")
  (return-type "gboolean")
  (parameters
    '("ClutterActor*" "descendant")
  )
)

(define-method get_stage
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_stage")
  (return-type "ClutterActor*")
)

(define-method set_child_below_sibling
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_child_below_sibling")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("ClutterActor*" "sibling")
  )
)

(define-method set_child_above_sibling
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_child_above_sibling")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("ClutterActor*" "sibling")
  )
)

(define-method set_child_at_index
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_child_at_index")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("gint" "index_")
  )
)

(define-method init
  (of-object "ClutterActorIter")
  (c-name "clutter_actor_iter_init")
  (return-type "none")
  (parameters
    '("ClutterActor*" "root")
  )
)

(define-method next
  (of-object "ClutterActorIter")
  (c-name "clutter_actor_iter_next")
  (return-type "gboolean")
  (parameters
    '("ClutterActor**" "child")
  )
)

(define-method prev
  (of-object "ClutterActorIter")
  (c-name "clutter_actor_iter_prev")
  (return-type "gboolean")
  (parameters
    '("ClutterActor**" "child")
  )
)

(define-method remove
  (of-object "ClutterActorIter")
  (c-name "clutter_actor_iter_remove")
  (return-type "none")
)

(define-method destroy
  (of-object "ClutterActorIter")
  (c-name "clutter_actor_iter_destroy")
  (return-type "none")
)

(define-method is_valid
  (of-object "ClutterActorIter")
  (c-name "clutter_actor_iter_is_valid")
  (return-type "gboolean")
)

(define-method is_rotated
  (of-object "ClutterActor")
  (c-name "clutter_actor_is_rotated")
  (return-type "gboolean")
)

(define-method is_scaled
  (of-object "ClutterActor")
  (c-name "clutter_actor_is_scaled")
  (return-type "gboolean")
)

(define-method set_pivot_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_pivot_point")
  (return-type "none")
  (parameters
    '("gfloat" "pivot_x")
    '("gfloat" "pivot_y")
  )
)

(define-method get_pivot_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_pivot_point")
  (return-type "none")
  (parameters
    '("gfloat*" "pivot_x")
    '("gfloat*" "pivot_y")
  )
)

(define-method set_pivot_point_z
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_pivot_point_z")
  (return-type "none")
  (parameters
    '("gfloat" "pivot_z")
  )
)

(define-method get_pivot_point_z
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_pivot_point_z")
  (return-type "gfloat")
)

(define-method set_rotation_angle
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_rotation_angle")
  (return-type "none")
  (parameters
    '("ClutterRotateAxis" "axis")
    '("gdouble" "angle")
  )
)

(define-method get_rotation_angle
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_rotation_angle")
  (return-type "gdouble")
  (parameters
    '("ClutterRotateAxis" "axis")
  )
)

(define-method set_scale
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_scale")
  (return-type "none")
  (parameters
    '("gdouble" "scale_x")
    '("gdouble" "scale_y")
  )
)

(define-method get_scale
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_scale")
  (return-type "none")
  (parameters
    '("gdouble*" "scale_x")
    '("gdouble*" "scale_y")
  )
)

(define-method set_scale_z
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_scale_z")
  (return-type "none")
  (parameters
    '("gdouble" "scale_z")
  )
)

(define-method get_scale_z
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_scale_z")
  (return-type "gdouble")
)

(define-method set_translation
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_translation")
  (return-type "none")
  (parameters
    '("gfloat" "translate_x")
    '("gfloat" "translate_y")
    '("gfloat" "translate_z")
  )
)

(define-method get_translation
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_translation")
  (return-type "none")
  (parameters
    '("gfloat*" "translate_x")
    '("gfloat*" "translate_y")
    '("gfloat*" "translate_z")
  )
)

(define-method set_transform
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_transform")
  (return-type "none")
  (parameters
    '("const-ClutterMatrix*" "transform")
  )
)

(define-method get_transform
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_transform")
  (return-type "none")
  (parameters
    '("ClutterMatrix*" "transform")
  )
)

(define-method set_child_transform
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_child_transform")
  (return-type "none")
  (parameters
    '("const-ClutterMatrix*" "transform")
  )
)

(define-method get_child_transform
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_child_transform")
  (return-type "none")
  (parameters
    '("ClutterMatrix*" "transform")
  )
)

(define-method get_transformed_position
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_transformed_position")
  (return-type "none")
  (parameters
    '("gfloat*" "x")
    '("gfloat*" "y")
  )
)

(define-method get_transformed_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_transformed_size")
  (return-type "none")
  (parameters
    '("gfloat*" "width")
    '("gfloat*" "height")
  )
)

(define-method transform_stage_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_transform_stage_point")
  (return-type "gboolean")
  (parameters
    '("gfloat" "x")
    '("gfloat" "y")
    '("gfloat*" "x_out")
    '("gfloat*" "y_out")
  )
)

(define-method get_abs_allocation_vertices
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_abs_allocation_vertices")
  (return-type "none")
  (parameters
    '("ClutterVertex[]" "verts")
  )
)

(define-method apply_transform_to_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_apply_transform_to_point")
  (return-type "none")
  (parameters
    '("const-ClutterVertex*" "point")
    '("ClutterVertex*" "vertex")
  )
)

(define-method apply_relative_transform_to_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_apply_relative_transform_to_point")
  (return-type "none")
  (parameters
    '("ClutterActor*" "ancestor")
    '("const-ClutterVertex*" "point")
    '("ClutterVertex*" "vertex")
  )
)

(define-method save_easing_state
  (of-object "ClutterActor")
  (c-name "clutter_actor_save_easing_state")
  (return-type "none")
)

(define-method restore_easing_state
  (of-object "ClutterActor")
  (c-name "clutter_actor_restore_easing_state")
  (return-type "none")
)

(define-method set_easing_mode
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_easing_mode")
  (return-type "none")
  (parameters
    '("ClutterAnimationMode" "mode")
  )
)

(define-method get_easing_mode
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_easing_mode")
  (return-type "ClutterAnimationMode")
)

(define-method set_easing_duration
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_easing_duration")
  (return-type "none")
  (parameters
    '("guint" "msecs")
  )
)

(define-method get_easing_duration
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_easing_duration")
  (return-type "guint")
)

(define-method set_easing_delay
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_easing_delay")
  (return-type "none")
  (parameters
    '("guint" "msecs")
  )
)

(define-method get_easing_delay
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_easing_delay")
  (return-type "guint")
)

(define-method get_transition
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_transition")
  (return-type "ClutterTransition*")
  (parameters
    '("const-char*" "name")
  )
)

(define-method add_transition
  (of-object "ClutterActor")
  (c-name "clutter_actor_add_transition")
  (return-type "none")
  (parameters
    '("const-char*" "name")
    '("ClutterTransition*" "transition")
  )
)

(define-method remove_transition
  (of-object "ClutterActor")
  (c-name "clutter_actor_remove_transition")
  (return-type "none")
  (parameters
    '("const-char*" "name")
  )
)

(define-method remove_all_transitions
  (of-object "ClutterActor")
  (c-name "clutter_actor_remove_all_transitions")
  (return-type "none")
)

(define-method has_mapped_clones
  (of-object "ClutterActor")
  (c-name "clutter_actor_has_mapped_clones")
  (return-type "gboolean")
)



;; From clutter-actor-meta.h

(define-function clutter_actor_meta_get_type
  (c-name "clutter_actor_meta_get_type")
  (return-type "GType")
)

(define-method set_name
  (of-object "ClutterActorMeta")
  (c-name "clutter_actor_meta_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_name
  (of-object "ClutterActorMeta")
  (c-name "clutter_actor_meta_get_name")
  (return-type "const-gchar*")
)

(define-method set_enabled
  (of-object "ClutterActorMeta")
  (c-name "clutter_actor_meta_set_enabled")
  (return-type "none")
  (parameters
    '("gboolean" "is_enabled")
  )
)

(define-method get_enabled
  (of-object "ClutterActorMeta")
  (c-name "clutter_actor_meta_get_enabled")
  (return-type "gboolean")
)

(define-method get_actor
  (of-object "ClutterActorMeta")
  (c-name "clutter_actor_meta_get_actor")
  (return-type "ClutterActor*")
)



;; From clutter-actor-meta-private.h



;; From clutter-actor-private.h



;; From clutter-align-constraint.h

(define-function clutter_align_constraint_get_type
  (c-name "clutter_align_constraint_get_type")
  (return-type "GType")
)

(define-function clutter_align_constraint_new
  (c-name "clutter_align_constraint_new")
  (is-constructor-of "ClutterAlignConstraint")
  (return-type "ClutterConstraint*")
  (parameters
    '("ClutterActor*" "source")
    '("ClutterAlignAxis" "axis")
    '("gfloat" "factor")
  )
)

(define-method set_source
  (of-object "ClutterAlignConstraint")
  (c-name "clutter_align_constraint_set_source")
  (return-type "none")
  (parameters
    '("ClutterActor*" "source")
  )
)

(define-method get_source
  (of-object "ClutterAlignConstraint")
  (c-name "clutter_align_constraint_get_source")
  (return-type "ClutterActor*")
)

(define-method set_align_axis
  (of-object "ClutterAlignConstraint")
  (c-name "clutter_align_constraint_set_align_axis")
  (return-type "none")
  (parameters
    '("ClutterAlignAxis" "axis")
  )
)

(define-method get_align_axis
  (of-object "ClutterAlignConstraint")
  (c-name "clutter_align_constraint_get_align_axis")
  (return-type "ClutterAlignAxis")
)

(define-method set_factor
  (of-object "ClutterAlignConstraint")
  (c-name "clutter_align_constraint_set_factor")
  (return-type "none")
  (parameters
    '("gfloat" "factor")
  )
)

(define-method get_factor
  (of-object "ClutterAlignConstraint")
  (c-name "clutter_align_constraint_get_factor")
  (return-type "gfloat")
)



;; From clutter-animatable.h

(define-function clutter_animatable_get_type
  (c-name "clutter_animatable_get_type")
  (return-type "GType")
)

(define-method find_property
  (of-object "ClutterAnimatable")
  (c-name "clutter_animatable_find_property")
  (return-type "GParamSpec*")
  (parameters
    '("const-gchar*" "property_name")
  )
)

(define-method get_initial_state
  (of-object "ClutterAnimatable")
  (c-name "clutter_animatable_get_initial_state")
  (return-type "none")
  (parameters
    '("const-gchar*" "property_name")
    '("GValue*" "value")
  )
)

(define-method set_final_state
  (of-object "ClutterAnimatable")
  (c-name "clutter_animatable_set_final_state")
  (return-type "none")
  (parameters
    '("const-gchar*" "property_name")
    '("const-GValue*" "value")
  )
)

(define-method interpolate_value
  (of-object "ClutterAnimatable")
  (c-name "clutter_animatable_interpolate_value")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "property_name")
    '("ClutterInterval*" "interval")
    '("gdouble" "progress")
    '("GValue*" "value")
  )
)



;; From clutter-backend.h

(define-function clutter_backend_get_type
  (c-name "clutter_backend_get_type")
  (return-type "GType")
)

(define-function clutter_get_default_backend
  (c-name "clutter_get_default_backend")
  (return-type "ClutterBackend*")
)

(define-function clutter_set_windowing_backend
  (c-name "clutter_set_windowing_backend")
  (return-type "none")
  (parameters
    '("const-char*" "backend_type")
  )
)

(define-method get_resolution
  (of-object "ClutterBackend")
  (c-name "clutter_backend_get_resolution")
  (return-type "gdouble")
)

(define-method set_font_options
  (of-object "ClutterBackend")
  (c-name "clutter_backend_set_font_options")
  (return-type "none")
  (parameters
    '("const-cairo_font_options_t*" "options")
  )
)

(define-method get_font_options
  (of-object "ClutterBackend")
  (c-name "clutter_backend_get_font_options")
  (return-type "const-cairo_font_options_t*")
)

(define-method get_cogl_context
  (of-object "ClutterBackend")
  (c-name "clutter_backend_get_cogl_context")
  (return-type "CoglContext*")
)



;; From clutter-backend-private.h



;; From clutter-bezier.h



;; From clutter-bind-constraint.h

(define-function clutter_bind_constraint_get_type
  (c-name "clutter_bind_constraint_get_type")
  (return-type "GType")
)

(define-function clutter_bind_constraint_new
  (c-name "clutter_bind_constraint_new")
  (is-constructor-of "ClutterBindConstraint")
  (return-type "ClutterConstraint*")
  (parameters
    '("ClutterActor*" "source")
    '("ClutterBindCoordinate" "coordinate")
    '("gfloat" "offset")
  )
)

(define-function clutter_bind_constraint_set_source
  (c-name "clutter_bind_constraint_set_source")
  (return-type "none")
  (parameters
    '("ClutterActor*" "source")
  )
)

(define-function clutter_bind_constraint_get_source
  (c-name "clutter_bind_constraint_get_source")
  (return-type "ClutterActor*")
  (parameters
  )
)

(define-function clutter_bind_constraint_set_coordinate
  (c-name "clutter_bind_constraint_set_coordinate")
  (return-type "none")
  (parameters
    '("ClutterBindCoordinate" "coordinate")
  )
)

(define-function clutter_bind_constraint_get_coordinate
  (c-name "clutter_bind_constraint_get_coordinate")
  (return-type "ClutterBindCoordinate")
  (parameters
  )
)

(define-function clutter_bind_constraint_set_offset
  (c-name "clutter_bind_constraint_set_offset")
  (return-type "none")
  (parameters
    '("gfloat" "offset")
  )
)

(define-function clutter_bind_constraint_get_offset
  (c-name "clutter_bind_constraint_get_offset")
  (return-type "gfloat")
  (parameters
  )
)



;; From clutter-binding-pool.h

(define-function clutter_binding_pool_get_type
  (c-name "clutter_binding_pool_get_type")
  (return-type "GType")
)

(define-function clutter_binding_pool_new
  (c-name "clutter_binding_pool_new")
  (is-constructor-of "ClutterBindingPool")
  (return-type "ClutterBindingPool*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function clutter_binding_pool_get_for_class
  (c-name "clutter_binding_pool_get_for_class")
  (return-type "ClutterBindingPool*")
  (parameters
    '("gpointer" "klass")
  )
)

(define-function clutter_binding_pool_find
  (c-name "clutter_binding_pool_find")
  (return-type "ClutterBindingPool*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method install_action
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_install_action")
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
    '("guint" "key_val")
    '("ClutterModifierType" "modifiers")
    '("GCallback" "callback")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-method install_closure
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_install_closure")
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
    '("guint" "key_val")
    '("ClutterModifierType" "modifiers")
    '("GClosure*" "closure")
  )
)

(define-method override_action
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_override_action")
  (return-type "none")
  (parameters
    '("guint" "key_val")
    '("ClutterModifierType" "modifiers")
    '("GCallback" "callback")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-method override_closure
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_override_closure")
  (return-type "none")
  (parameters
    '("guint" "key_val")
    '("ClutterModifierType" "modifiers")
    '("GClosure*" "closure")
  )
)

(define-method find_action
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_find_action")
  (return-type "const-gchar*")
  (parameters
    '("guint" "key_val")
    '("ClutterModifierType" "modifiers")
  )
)

(define-method remove_action
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_remove_action")
  (return-type "none")
  (parameters
    '("guint" "key_val")
    '("ClutterModifierType" "modifiers")
  )
)

(define-method activate
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_activate")
  (return-type "gboolean")
  (parameters
    '("guint" "key_val")
    '("ClutterModifierType" "modifiers")
    '("GObject*" "gobject")
  )
)

(define-method block_action
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_block_action")
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-method unblock_action
  (of-object "ClutterBindingPool")
  (c-name "clutter_binding_pool_unblock_action")
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
  )
)



;; From clutter-bin-layout.h

(define-function clutter_bin_layout_get_type
  (c-name "clutter_bin_layout_get_type")
  (return-type "GType")
)

(define-function clutter_bin_layout_new
  (c-name "clutter_bin_layout_new")
  (is-constructor-of "ClutterBinLayout")
  (return-type "ClutterLayoutManager*")
  (parameters
    '("ClutterBinAlignment" "x_align")
    '("ClutterBinAlignment" "y_align")
  )
)



;; From clutter-blur-effect.h

(define-function clutter_blur_effect_get_type
  (c-name "clutter_blur_effect_get_type")
  (return-type "GType")
)

(define-function clutter_blur_effect_new
  (c-name "clutter_blur_effect_new")
  (is-constructor-of "ClutterBlurEffect")
  (return-type "ClutterEffect*")
)



;; From clutter-box-layout.h

(define-function clutter_box_layout_get_type
  (c-name "clutter_box_layout_get_type")
  (return-type "GType")
)

(define-function clutter_box_layout_new
  (c-name "clutter_box_layout_new")
  (is-constructor-of "ClutterBoxLayout")
  (return-type "ClutterLayoutManager*")
)

(define-method set_orientation
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_orientation")
  (return-type "none")
  (parameters
    '("ClutterOrientation" "orientation")
  )
)

(define-method get_orientation
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_orientation")
  (return-type "ClutterOrientation")
)

(define-method set_spacing
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_spacing")
  (return-type "none")
  (parameters
    '("guint" "spacing")
  )
)

(define-method get_spacing
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_spacing")
  (return-type "guint")
)

(define-method set_homogeneous
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_homogeneous")
  (return-type "none")
  (parameters
    '("gboolean" "homogeneous")
  )
)

(define-method get_homogeneous
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_homogeneous")
  (return-type "gboolean")
)

(define-method set_pack_start
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_pack_start")
  (return-type "none")
  (parameters
    '("gboolean" "pack_start")
  )
)

(define-method get_pack_start
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_pack_start")
  (return-type "gboolean")
)

(define-method set_vertical
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_vertical")
  (return-type "none")
  (parameters
    '("gboolean" "vertical")
  )
)

(define-method get_vertical
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_vertical")
  (return-type "gboolean")
)

(define-method pack
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_pack")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("gboolean" "expand")
    '("gboolean" "x_fill")
    '("gboolean" "y_fill")
    '("ClutterBoxAlignment" "x_align")
    '("ClutterBoxAlignment" "y_align")
  )
)

(define-method set_alignment
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_alignment")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("ClutterBoxAlignment" "x_align")
    '("ClutterBoxAlignment" "y_align")
  )
)

(define-method get_alignment
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_alignment")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("ClutterBoxAlignment*" "x_align")
    '("ClutterBoxAlignment*" "y_align")
  )
)

(define-method set_fill
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_fill")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("gboolean" "x_fill")
    '("gboolean" "y_fill")
  )
)

(define-method get_fill
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_fill")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("gboolean*" "x_fill")
    '("gboolean*" "y_fill")
  )
)

(define-method set_expand
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_expand")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("gboolean" "expand")
  )
)

(define-method get_expand
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_expand")
  (return-type "gboolean")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method set_use_animations
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_use_animations")
  (return-type "none")
  (parameters
    '("gboolean" "animate")
  )
)

(define-method get_use_animations
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_use_animations")
  (return-type "gboolean")
)

(define-method set_easing_mode
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_easing_mode")
  (return-type "none")
  (parameters
    '("gulong" "mode")
  )
)

(define-method get_easing_mode
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_easing_mode")
  (return-type "gulong")
)

(define-method set_easing_duration
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_easing_duration")
  (return-type "none")
  (parameters
    '("guint" "msecs")
  )
)

(define-method get_easing_duration
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_easing_duration")
  (return-type "guint")
)



;; From clutter-brightness-contrast-effect.h

(define-function clutter_brightness_contrast_effect_get_type
  (c-name "clutter_brightness_contrast_effect_get_type")
  (return-type "GType")
)

(define-function clutter_brightness_contrast_effect_new
  (c-name "clutter_brightness_contrast_effect_new")
  (is-constructor-of "ClutterBrightnessContrastEffect")
  (return-type "ClutterEffect*")
)

(define-method set_brightness_full
  (of-object "ClutterBrightnessContrastEffect")
  (c-name "clutter_brightness_contrast_effect_set_brightness_full")
  (return-type "none")
  (parameters
    '("float" "red")
    '("float" "green")
    '("float" "blue")
  )
)

(define-method set_brightness
  (of-object "ClutterBrightnessContrastEffect")
  (c-name "clutter_brightness_contrast_effect_set_brightness")
  (return-type "none")
  (parameters
    '("float" "brightness")
  )
)

(define-method get_brightness
  (of-object "ClutterBrightnessContrastEffect")
  (c-name "clutter_brightness_contrast_effect_get_brightness")
  (return-type "none")
  (parameters
    '("float*" "red")
    '("float*" "green")
    '("float*" "blue")
  )
)

(define-method set_contrast_full
  (of-object "ClutterBrightnessContrastEffect")
  (c-name "clutter_brightness_contrast_effect_set_contrast_full")
  (return-type "none")
  (parameters
    '("float" "red")
    '("float" "green")
    '("float" "blue")
  )
)

(define-method set_contrast
  (of-object "ClutterBrightnessContrastEffect")
  (c-name "clutter_brightness_contrast_effect_set_contrast")
  (return-type "none")
  (parameters
    '("float" "contrast")
  )
)

(define-method get_contrast
  (of-object "ClutterBrightnessContrastEffect")
  (c-name "clutter_brightness_contrast_effect_get_contrast")
  (return-type "none")
  (parameters
    '("float*" "red")
    '("float*" "green")
    '("float*" "blue")
  )
)



;; From clutter-cairo.h

(define-function clutter_cairo_clear
  (c-name "clutter_cairo_clear")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
  )
)

(define-function clutter_cairo_set_source_color
  (c-name "clutter_cairo_set_source_color")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("const-ClutterColor*" "color")
  )
)



;; From clutter-canvas.h

(define-function clutter_canvas_get_type
  (c-name "clutter_canvas_get_type")
  (return-type "GType")
)

(define-function clutter_canvas_new
  (c-name "clutter_canvas_new")
  (is-constructor-of "ClutterCanvas")
  (return-type "ClutterContent*")
)

(define-method set_size
  (of-object "ClutterCanvas")
  (c-name "clutter_canvas_set_size")
  (return-type "gboolean")
  (parameters
    '("int" "width")
    '("int" "height")
  )
)

(define-method set_scale_factor
  (of-object "ClutterCanvas")
  (c-name "clutter_canvas_set_scale_factor")
  (return-type "none")
  (parameters
    '("int" "scale")
  )
)

(define-method get_scale_factor
  (of-object "ClutterCanvas")
  (c-name "clutter_canvas_get_scale_factor")
  (return-type "int")
)



;; From clutter-child-meta.h

(define-function clutter_child_meta_get_type
  (c-name "clutter_child_meta_get_type")
  (return-type "GType")
)

(define-method get_container
  (of-object "ClutterChildMeta")
  (c-name "clutter_child_meta_get_container")
  (return-type "ClutterContainer*")
)

(define-method get_actor
  (of-object "ClutterChildMeta")
  (c-name "clutter_child_meta_get_actor")
  (return-type "ClutterActor*")
)



;; From clutter-click-action.h

(define-function clutter_click_action_get_type
  (c-name "clutter_click_action_get_type")
  (return-type "GType")
)

(define-function clutter_click_action_new
  (c-name "clutter_click_action_new")
  (is-constructor-of "ClutterClickAction")
  (return-type "ClutterAction*")
)

(define-method get_button
  (of-object "ClutterClickAction")
  (c-name "clutter_click_action_get_button")
  (return-type "guint")
)

(define-method get_state
  (of-object "ClutterClickAction")
  (c-name "clutter_click_action_get_state")
  (return-type "ClutterModifierType")
)

(define-method get_coords
  (of-object "ClutterClickAction")
  (c-name "clutter_click_action_get_coords")
  (return-type "none")
  (parameters
    '("gfloat*" "press_x")
    '("gfloat*" "press_y")
  )
)

(define-method release
  (of-object "ClutterClickAction")
  (c-name "clutter_click_action_release")
  (return-type "none")
)



;; From clutter-clone.h

(define-function clutter_clone_get_type
  (c-name "clutter_clone_get_type")
  (return-type "GType")
)

(define-function clutter_clone_new
  (c-name "clutter_clone_new")
  (is-constructor-of "ClutterClone")
  (return-type "ClutterActor*")
  (parameters
    '("ClutterActor*" "source")
  )
)

(define-method set_source
  (of-object "ClutterClone")
  (c-name "clutter_clone_set_source")
  (return-type "none")
  (parameters
    '("ClutterActor*" "source")
  )
)

(define-method get_source
  (of-object "ClutterClone")
  (c-name "clutter_clone_get_source")
  (return-type "ClutterActor*")
)



;; From clutter-cogl-compat.h



;; From clutter-color.h

(define-function clutter_color_get_type
  (c-name "clutter_color_get_type")
  (return-type "GType")
)

(define-function clutter_color_new
  (c-name "clutter_color_new")
  (is-constructor-of "ClutterColor")
  (return-type "ClutterColor*")
  (parameters
    '("guint8" "red")
    '("guint8" "green")
    '("guint8" "blue")
    '("guint8" "alpha")
  )
)

(define-function clutter_color_alloc
  (c-name "clutter_color_alloc")
  (return-type "ClutterColor*")
)

(define-method init
  (of-object "ClutterColor")
  (c-name "clutter_color_init")
  (return-type "ClutterColor*")
  (parameters
    '("guint8" "red")
    '("guint8" "green")
    '("guint8" "blue")
    '("guint8" "alpha")
  )
)

(define-method copy
  (of-object "ClutterColor")
  (c-name "clutter_color_copy")
  (return-type "ClutterColor*")
)

(define-method free
  (of-object "ClutterColor")
  (c-name "clutter_color_free")
  (return-type "none")
)

(define-method add
  (of-object "ClutterColor")
  (c-name "clutter_color_add")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "b")
    '("ClutterColor*" "result")
  )
)

(define-method subtract
  (of-object "ClutterColor")
  (c-name "clutter_color_subtract")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "b")
    '("ClutterColor*" "result")
  )
)

(define-method lighten
  (of-object "ClutterColor")
  (c-name "clutter_color_lighten")
  (return-type "none")
  (parameters
    '("ClutterColor*" "result")
  )
)

(define-method darken
  (of-object "ClutterColor")
  (c-name "clutter_color_darken")
  (return-type "none")
  (parameters
    '("ClutterColor*" "result")
  )
)

(define-method shade
  (of-object "ClutterColor")
  (c-name "clutter_color_shade")
  (return-type "none")
  (parameters
    '("gdouble" "factor")
    '("ClutterColor*" "result")
  )
)

(define-method to_string
  (of-object "ClutterColor")
  (c-name "clutter_color_to_string")
  (return-type "gchar*")
)

(define-method from_string
  (of-object "ClutterColor")
  (c-name "clutter_color_from_string")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-method to_hls
  (of-object "ClutterColor")
  (c-name "clutter_color_to_hls")
  (return-type "none")
  (parameters
    '("gfloat*" "hue")
    '("gfloat*" "luminance")
    '("gfloat*" "saturation")
  )
)

(define-method from_hls
  (of-object "ClutterColor")
  (c-name "clutter_color_from_hls")
  (return-type "none")
  (parameters
    '("gfloat" "hue")
    '("gfloat" "luminance")
    '("gfloat" "saturation")
  )
)

(define-method to_pixel
  (of-object "ClutterColor")
  (c-name "clutter_color_to_pixel")
  (return-type "guint32")
)

(define-method from_pixel
  (of-object "ClutterColor")
  (c-name "clutter_color_from_pixel")
  (return-type "none")
  (parameters
    '("guint32" "pixel")
  )
)

(define-function clutter_color_hash
  (c-name "clutter_color_hash")
  (return-type "guint")
  (parameters
    '("gconstpointer" "v")
  )
)

(define-function clutter_color_equal
  (c-name "clutter_color_equal")
  (return-type "gboolean")
  (parameters
    '("gconstpointer" "v1")
    '("gconstpointer" "v2")
  )
)

(define-method interpolate
  (of-object "ClutterColor")
  (c-name "clutter_color_interpolate")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "final")
    '("gdouble" "progress")
    '("ClutterColor*" "result")
  )
)

(define-function clutter_value_set_color
  (c-name "clutter_value_set_color")
  (return-type "none")
  (parameters
    '("GValue*" "value")
    '("const-ClutterColor*" "color")
  )
)

(define-function clutter_value_get_color
  (c-name "clutter_value_get_color")
  (return-type "const-ClutterColor*")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-function clutter_param_color_get_type
  (c-name "clutter_param_color_get_type")
  (return-type "GType")
)

(define-function clutter_param_spec_color
  (c-name "clutter_param_spec_color")
  (return-type "GParamSpec*")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "nick")
    '("const-gchar*" "blurb")
    '("const-ClutterColor*" "default_value")
    '("GParamFlags" "flags")
  )
)

(define-function clutter_color_get_static
  (c-name "clutter_color_get_static")
  (return-type "const-ClutterColor*")
  (parameters
    '("ClutterStaticColor" "color")
  )
)



;; From clutter-colorize-effect.h

(define-function clutter_colorize_effect_get_type
  (c-name "clutter_colorize_effect_get_type")
  (return-type "GType")
)

(define-method ize_effect_new
  (of-object "ClutterColor")
  (c-name "clutter_colorize_effect_new")
  (return-type "ClutterEffect*")
)

(define-method set_tint
  (of-object "ClutterColorizeEffect")
  (c-name "clutter_colorize_effect_set_tint")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "tint")
  )
)

(define-method get_tint
  (of-object "ClutterColorizeEffect")
  (c-name "clutter_colorize_effect_get_tint")
  (return-type "none")
  (parameters
    '("ClutterColor*" "tint")
  )
)



;; From clutter-color-static.h



;; From clutter-config.h



;; From clutter-constraint.h

(define-function clutter_constraint_get_type
  (c-name "clutter_constraint_get_type")
  (return-type "GType")
)

(define-method add_constraint
  (of-object "ClutterActor")
  (c-name "clutter_actor_add_constraint")
  (return-type "none")
  (parameters
  )
)

(define-method add_constraint_with_name
  (of-object "ClutterActor")
  (c-name "clutter_actor_add_constraint_with_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method remove_constraint
  (of-object "ClutterActor")
  (c-name "clutter_actor_remove_constraint")
  (return-type "none")
  (parameters
  )
)

(define-method remove_constraint_by_name
  (of-object "ClutterActor")
  (c-name "clutter_actor_remove_constraint_by_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_constraints
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_constraints")
  (return-type "GList*")
)

(define-method get_constraint
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_constraint")
  (return-type "ClutterConstraint*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method clear_constraints
  (of-object "ClutterActor")
  (c-name "clutter_actor_clear_constraints")
  (return-type "none")
)

(define-method has_constraints
  (of-object "ClutterActor")
  (c-name "clutter_actor_has_constraints")
  (return-type "gboolean")
)



;; From clutter-container.h

(define-function clutter_container_get_type
  (c-name "clutter_container_get_type")
  (return-type "GType")
)

(define-method find_child_by_name
  (of-object "ClutterContainer")
  (c-name "clutter_container_find_child_by_name")
  (return-type "ClutterActor*")
  (parameters
    '("const-gchar*" "child_name")
  )
)

(define-function clutter_container_class_find_child_property
  (c-name "clutter_container_class_find_child_property")
  (return-type "GParamSpec*")
  (parameters
    '("GObjectClass*" "klass")
    '("const-gchar*" "property_name")
  )
)

(define-function clutter_container_class_list_child_properties
  (c-name "clutter_container_class_list_child_properties")
  (return-type "GParamSpec**")
  (parameters
    '("GObjectClass*" "klass")
    '("guint*" "n_properties")
  )
)

(define-method create_child_meta
  (of-object "ClutterContainer")
  (c-name "clutter_container_create_child_meta")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method destroy_child_meta
  (of-object "ClutterContainer")
  (c-name "clutter_container_destroy_child_meta")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method get_child_meta
  (of-object "ClutterContainer")
  (c-name "clutter_container_get_child_meta")
  (return-type "ClutterChildMeta*")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method child_set_property
  (of-object "ClutterContainer")
  (c-name "clutter_container_child_set_property")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("const-gchar*" "property")
    '("const-GValue*" "value")
  )
)

(define-method child_get_property
  (of-object "ClutterContainer")
  (c-name "clutter_container_child_get_property")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("const-gchar*" "property")
    '("GValue*" "value")
  )
)

(define-method child_set
  (of-object "ClutterContainer")
  (c-name "clutter_container_child_set")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("const-gchar*" "first_prop")
  )
  (varargs #t)
)

(define-method child_get
  (of-object "ClutterContainer")
  (c-name "clutter_container_child_get")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("const-gchar*" "first_prop")
  )
  (varargs #t)
)

(define-method child_notify
  (of-object "ClutterContainer")
  (c-name "clutter_container_child_notify")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("GParamSpec*" "pspec")
  )
)



;; From clutter-content.h

(define-function clutter_content_get_type
  (c-name "clutter_content_get_type")
  (return-type "GType")
)

(define-method get_preferred_size
  (of-object "ClutterContent")
  (c-name "clutter_content_get_preferred_size")
  (return-type "gboolean")
  (parameters
    '("gfloat*" "width")
    '("gfloat*" "height")
  )
)

(define-method invalidate
  (of-object "ClutterContent")
  (c-name "clutter_content_invalidate")
  (return-type "none")
)



;; From clutter-content-private.h



;; From clutter-debug.h



;; From clutter-deform-effect.h

(define-function clutter_deform_effect_get_type
  (c-name "clutter_deform_effect_get_type")
  (return-type "GType")
)

(define-method set_back_material
  (of-object "ClutterDeformEffect")
  (c-name "clutter_deform_effect_set_back_material")
  (return-type "none")
  (parameters
    '("CoglHandle" "material")
  )
)

(define-method get_back_material
  (of-object "ClutterDeformEffect")
  (c-name "clutter_deform_effect_get_back_material")
  (return-type "CoglHandle")
)

(define-method set_n_tiles
  (of-object "ClutterDeformEffect")
  (c-name "clutter_deform_effect_set_n_tiles")
  (return-type "none")
  (parameters
    '("guint" "x_tiles")
    '("guint" "y_tiles")
  )
)

(define-method get_n_tiles
  (of-object "ClutterDeformEffect")
  (c-name "clutter_deform_effect_get_n_tiles")
  (return-type "none")
  (parameters
    '("guint*" "x_tiles")
    '("guint*" "y_tiles")
  )
)

(define-method invalidate
  (of-object "ClutterDeformEffect")
  (c-name "clutter_deform_effect_invalidate")
  (return-type "none")
)



;; From clutter-deprecated.h



;; From clutter-desaturate-effect.h

(define-function clutter_desaturate_effect_get_type
  (c-name "clutter_desaturate_effect_get_type")
  (return-type "GType")
)

(define-function clutter_desaturate_effect_new
  (c-name "clutter_desaturate_effect_new")
  (is-constructor-of "ClutterDesaturateEffect")
  (return-type "ClutterEffect*")
  (parameters
    '("gdouble" "factor")
  )
)

(define-method set_factor
  (of-object "ClutterDesaturateEffect")
  (c-name "clutter_desaturate_effect_set_factor")
  (return-type "none")
  (parameters
    '("gdouble" "factor")
  )
)

(define-method get_factor
  (of-object "ClutterDesaturateEffect")
  (c-name "clutter_desaturate_effect_get_factor")
  (return-type "gdouble")
)



;; From clutter-device-manager.h

(define-function clutter_device_manager_get_type
  (c-name "clutter_device_manager_get_type")
  (return-type "GType")
)

(define-function clutter_device_manager_get_default
  (c-name "clutter_device_manager_get_default")
  (return-type "ClutterDeviceManager*")
)

(define-method list_devices
  (of-object "ClutterDeviceManager")
  (c-name "clutter_device_manager_list_devices")
  (return-type "GSList*")
)

(define-method peek_devices
  (of-object "ClutterDeviceManager")
  (c-name "clutter_device_manager_peek_devices")
  (return-type "const-GSList*")
)

(define-method get_device
  (of-object "ClutterDeviceManager")
  (c-name "clutter_device_manager_get_device")
  (return-type "ClutterInputDevice*")
  (parameters
    '("gint" "device_id")
  )
)

(define-method get_core_device
  (of-object "ClutterDeviceManager")
  (c-name "clutter_device_manager_get_core_device")
  (return-type "ClutterInputDevice*")
  (parameters
    '("ClutterInputDeviceType" "device_type")
  )
)



;; From clutter-device-manager-private.h



;; From clutter-drag-action.h

(define-function clutter_drag_action_get_type
  (c-name "clutter_drag_action_get_type")
  (return-type "GType")
)

(define-function clutter_drag_action_new
  (c-name "clutter_drag_action_new")
  (is-constructor-of "ClutterDragAction")
  (return-type "ClutterAction*")
)

(define-method set_drag_threshold
  (of-object "ClutterDragAction")
  (c-name "clutter_drag_action_set_drag_threshold")
  (return-type "none")
  (parameters
    '("gint" "x_threshold")
    '("gint" "y_threshold")
  )
)

(define-method get_drag_threshold
  (of-object "ClutterDragAction")
  (c-name "clutter_drag_action_get_drag_threshold")
  (return-type "none")
  (parameters
    '("guint*" "x_threshold")
    '("guint*" "y_threshold")
  )
)

(define-method set_drag_handle
  (of-object "ClutterDragAction")
  (c-name "clutter_drag_action_set_drag_handle")
  (return-type "none")
  (parameters
    '("ClutterActor*" "handle")
  )
)

(define-method get_drag_handle
  (of-object "ClutterDragAction")
  (c-name "clutter_drag_action_get_drag_handle")
  (return-type "ClutterActor*")
)

(define-method set_drag_axis
  (of-object "ClutterDragAction")
  (c-name "clutter_drag_action_set_drag_axis")
  (return-type "none")
  (parameters
    '("ClutterDragAxis" "axis")
  )
)

(define-method get_drag_axis
  (of-object "ClutterDragAction")
  (c-name "clutter_drag_action_get_drag_axis")
  (return-type "ClutterDragAxis")
)

(define-method get_press_coords
  (of-object "ClutterDragAction")
  (c-name "clutter_drag_action_get_press_coords")
  (return-type "none")
  (parameters
    '("gfloat*" "press_x")
    '("gfloat*" "press_y")
  )
)

(define-method get_motion_coords
  (of-object "ClutterDragAction")
  (c-name "clutter_drag_action_get_motion_coords")
  (return-type "none")
  (parameters
    '("gfloat*" "motion_x")
    '("gfloat*" "motion_y")
  )
)

(define-method get_drag_area
  (of-object "ClutterDragAction")
  (c-name "clutter_drag_action_get_drag_area")
  (return-type "gboolean")
  (parameters
    '("ClutterRect*" "drag_area")
  )
)

(define-method set_drag_area
  (of-object "ClutterDragAction")
  (c-name "clutter_drag_action_set_drag_area")
  (return-type "none")
  (parameters
    '("const-ClutterRect*" "drag_area")
  )
)



;; From clutter-drop-action.h

(define-function clutter_drop_action_get_type
  (c-name "clutter_drop_action_get_type")
  (return-type "GType")
)

(define-function clutter_drop_action_new
  (c-name "clutter_drop_action_new")
  (is-constructor-of "ClutterDropAction")
  (return-type "ClutterAction*")
)



;; From clutter-easing.h



;; From clutter-effect.h

(define-function clutter_effect_get_type
  (c-name "clutter_effect_get_type")
  (return-type "GType")
)

(define-method queue_repaint
  (of-object "ClutterEffect")
  (c-name "clutter_effect_queue_repaint")
  (return-type "none")
)

(define-method add_effect
  (of-object "ClutterActor")
  (c-name "clutter_actor_add_effect")
  (return-type "none")
  (parameters
    '("ClutterEffect*" "effect")
  )
)

(define-method add_effect_with_name
  (of-object "ClutterActor")
  (c-name "clutter_actor_add_effect_with_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("ClutterEffect*" "effect")
  )
)

(define-method remove_effect
  (of-object "ClutterActor")
  (c-name "clutter_actor_remove_effect")
  (return-type "none")
  (parameters
    '("ClutterEffect*" "effect")
  )
)

(define-method remove_effect_by_name
  (of-object "ClutterActor")
  (c-name "clutter_actor_remove_effect_by_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_effects
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_effects")
  (return-type "GList*")
)

(define-method get_effect
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_effect")
  (return-type "ClutterEffect*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method clear_effects
  (of-object "ClutterActor")
  (c-name "clutter_actor_clear_effects")
  (return-type "none")
)

(define-method has_effects
  (of-object "ClutterActor")
  (c-name "clutter_actor_has_effects")
  (return-type "gboolean")
)



;; From clutter-effect-private.h



;; From clutter-enums.h



;; From clutter-enum-types.h

(define-function clutter_gravity_get_type
  (c-name "clutter_gravity_get_type")
  (return-type "GType")
)

(define-function clutter_rotate_axis_get_type
  (c-name "clutter_rotate_axis_get_type")
  (return-type "GType")
)

(define-function clutter_rotate_direction_get_type
  (c-name "clutter_rotate_direction_get_type")
  (return-type "GType")
)

(define-function clutter_request_mode_get_type
  (c-name "clutter_request_mode_get_type")
  (return-type "GType")
)

(define-function clutter_animation_mode_get_type
  (c-name "clutter_animation_mode_get_type")
  (return-type "GType")
)

(define-function clutter_font_flags_get_type
  (c-name "clutter_font_flags_get_type")
  (return-type "GType")
)

(define-function clutter_text_direction_get_type
  (c-name "clutter_text_direction_get_type")
  (return-type "GType")
)

(define-function clutter_shader_type_get_type
  (c-name "clutter_shader_type_get_type")
  (return-type "GType")
)

(define-function clutter_modifier_type_get_type
  (c-name "clutter_modifier_type_get_type")
  (return-type "GType")
)

(define-function clutter_actor_flags_get_type
  (c-name "clutter_actor_flags_get_type")
  (return-type "GType")
)

(define-function clutter_offscreen_redirect_get_type
  (c-name "clutter_offscreen_redirect_get_type")
  (return-type "GType")
)

(define-function clutter_allocation_flags_get_type
  (c-name "clutter_allocation_flags_get_type")
  (return-type "GType")
)

(define-function clutter_align_axis_get_type
  (c-name "clutter_align_axis_get_type")
  (return-type "GType")
)

(define-function clutter_interpolation_get_type
  (c-name "clutter_interpolation_get_type")
  (return-type "GType")
)

(define-function clutter_bin_alignment_get_type
  (c-name "clutter_bin_alignment_get_type")
  (return-type "GType")
)

(define-function clutter_bind_coordinate_get_type
  (c-name "clutter_bind_coordinate_get_type")
  (return-type "GType")
)

(define-function clutter_effect_paint_flags_get_type
  (c-name "clutter_effect_paint_flags_get_type")
  (return-type "GType")
)

(define-function clutter_box_alignment_get_type
  (c-name "clutter_box_alignment_get_type")
  (return-type "GType")
)

(define-function clutter_long_press_state_get_type
  (c-name "clutter_long_press_state_get_type")
  (return-type "GType")
)

(define-function clutter_static_color_get_type
  (c-name "clutter_static_color_get_type")
  (return-type "GType")
)

(define-function clutter_drag_axis_get_type
  (c-name "clutter_drag_axis_get_type")
  (return-type "GType")
)

(define-function clutter_event_flags_get_type
  (c-name "clutter_event_flags_get_type")
  (return-type "GType")
)

(define-function clutter_event_type_get_type
  (c-name "clutter_event_type_get_type")
  (return-type "GType")
)

(define-function clutter_scroll_direction_get_type
  (c-name "clutter_scroll_direction_get_type")
  (return-type "GType")
)

(define-function clutter_stage_state_get_type
  (c-name "clutter_stage_state_get_type")
  (return-type "GType")
)

(define-function clutter_feature_flags_get_type
  (c-name "clutter_feature_flags_get_type")
  (return-type "GType")
)

(define-function clutter_flow_orientation_get_type
  (c-name "clutter_flow_orientation_get_type")
  (return-type "GType")
)

(define-function clutter_input_device_type_get_type
  (c-name "clutter_input_device_type_get_type")
  (return-type "GType")
)

(define-function clutter_input_mode_get_type
  (c-name "clutter_input_mode_get_type")
  (return-type "GType")
)

(define-function clutter_input_axis_get_type
  (c-name "clutter_input_axis_get_type")
  (return-type "GType")
)

(define-function clutter_snap_edge_get_type
  (c-name "clutter_snap_edge_get_type")
  (return-type "GType")
)

(define-function clutter_pick_mode_get_type
  (c-name "clutter_pick_mode_get_type")
  (return-type "GType")
)

(define-function clutter_swipe_direction_get_type
  (c-name "clutter_swipe_direction_get_type")
  (return-type "GType")
)

(define-function clutter_pan_axis_get_type
  (c-name "clutter_pan_axis_get_type")
  (return-type "GType")
)

(define-function clutter_table_alignment_get_type
  (c-name "clutter_table_alignment_get_type")
  (return-type "GType")
)

(define-function clutter_texture_flags_get_type
  (c-name "clutter_texture_flags_get_type")
  (return-type "GType")
)

(define-function clutter_texture_quality_get_type
  (c-name "clutter_texture_quality_get_type")
  (return-type "GType")
)

(define-function clutter_timeline_direction_get_type
  (c-name "clutter_timeline_direction_get_type")
  (return-type "GType")
)

(define-function clutter_unit_type_get_type
  (c-name "clutter_unit_type_get_type")
  (return-type "GType")
)

(define-function clutter_path_node_type_get_type
  (c-name "clutter_path_node_type_get_type")
  (return-type "GType")
)

(define-function clutter_actor_align_get_type
  (c-name "clutter_actor_align_get_type")
  (return-type "GType")
)

(define-function clutter_repaint_flags_get_type
  (c-name "clutter_repaint_flags_get_type")
  (return-type "GType")
)

(define-function clutter_content_gravity_get_type
  (c-name "clutter_content_gravity_get_type")
  (return-type "GType")
)

(define-function clutter_scaling_filter_get_type
  (c-name "clutter_scaling_filter_get_type")
  (return-type "GType")
)

(define-function clutter_orientation_get_type
  (c-name "clutter_orientation_get_type")
  (return-type "GType")
)

(define-function clutter_scroll_mode_get_type
  (c-name "clutter_scroll_mode_get_type")
  (return-type "GType")
)

(define-function clutter_grid_position_get_type
  (c-name "clutter_grid_position_get_type")
  (return-type "GType")
)

(define-function clutter_content_repeat_get_type
  (c-name "clutter_content_repeat_get_type")
  (return-type "GType")
)

(define-function clutter_step_mode_get_type
  (c-name "clutter_step_mode_get_type")
  (return-type "GType")
)

(define-function clutter_zoom_axis_get_type
  (c-name "clutter_zoom_axis_get_type")
  (return-type "GType")
)

(define-function clutter_gesture_trigger_edge_get_type
  (c-name "clutter_gesture_trigger_edge_get_type")
  (return-type "GType")
)

(define-function clutter_image_error_get_type
  (c-name "clutter_image_error_get_type")
  (return-type "GType")
)

(define-function clutter_init_error_get_type
  (c-name "clutter_init_error_get_type")
  (return-type "GType")
)

(define-function clutter_script_error_get_type
  (c-name "clutter_script_error_get_type")
  (return-type "GType")
)

(define-function clutter_texture_error_get_type
  (c-name "clutter_texture_error_get_type")
  (return-type "GType")
)

(define-function clutter_x11_filter_return_get_type
  (c-name "clutter_x11_filter_return_get_type")
  (return-type "GType")
)

(define-function clutter_x11_xinput_event_types_get_type
  (c-name "clutter_x11_xinput_event_types_get_type")
  (return-type "GType")
)



;; From clutter-event.h

(define-function clutter_event_get_type
  (c-name "clutter_event_get_type")
  (return-type "GType")
)

(define-function clutter_events_pending
  (c-name "clutter_events_pending")
  (return-type "gboolean")
)

(define-function clutter_event_get
  (c-name "clutter_event_get")
  (return-type "ClutterEvent*")
)

(define-function clutter_event_peek
  (c-name "clutter_event_peek")
  (return-type "ClutterEvent*")
)

(define-method put
  (of-object "ClutterEvent")
  (c-name "clutter_event_put")
  (return-type "none")
)

(define-function clutter_event_add_filter
  (c-name "clutter_event_add_filter")
  (return-type "guint")
  (parameters
    '("ClutterStage*" "stage")
    '("ClutterEventFilterFunc" "func")
    '("GDestroyNotify" "notify")
    '("gpointer" "user_data")
  )
)

(define-function clutter_event_remove_filter
  (c-name "clutter_event_remove_filter")
  (return-type "none")
  (parameters
    '("guint" "id")
  )
)

(define-function clutter_event_new
  (c-name "clutter_event_new")
  (is-constructor-of "ClutterEvent")
  (return-type "ClutterEvent*")
  (parameters
    '("ClutterEventType" "type")
  )
)

(define-method copy
  (of-object "ClutterEvent")
  (c-name "clutter_event_copy")
  (return-type "ClutterEvent*")
)

(define-method free
  (of-object "ClutterEvent")
  (c-name "clutter_event_free")
  (return-type "none")
)

(define-method type
  (of-object "ClutterEvent")
  (c-name "clutter_event_type")
  (return-type "ClutterEventType")
)

(define-method set_flags
  (of-object "ClutterEvent")
  (c-name "clutter_event_set_flags")
  (return-type "none")
  (parameters
    '("ClutterEventFlags" "flags")
  )
)

(define-method get_flags
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_flags")
  (return-type "ClutterEventFlags")
)

(define-method set_time
  (of-object "ClutterEvent")
  (c-name "clutter_event_set_time")
  (return-type "none")
  (parameters
    '("guint32" "time_")
  )
)

(define-method get_time
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_time")
  (return-type "guint32")
)

(define-method set_state
  (of-object "ClutterEvent")
  (c-name "clutter_event_set_state")
  (return-type "none")
  (parameters
    '("ClutterModifierType" "state")
  )
)

(define-method get_state
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_state")
  (return-type "ClutterModifierType")
)

(define-method get_state_full
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_state_full")
  (return-type "none")
  (parameters
    '("ClutterModifierType*" "button_state")
    '("ClutterModifierType*" "base_state")
    '("ClutterModifierType*" "latched_state")
    '("ClutterModifierType*" "locked_state")
    '("ClutterModifierType*" "effective_state")
  )
)

(define-method set_device
  (of-object "ClutterEvent")
  (c-name "clutter_event_set_device")
  (return-type "none")
  (parameters
    '("ClutterInputDevice*" "device")
  )
)

(define-method get_device
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_device")
  (return-type "ClutterInputDevice*")
)

(define-method set_source_device
  (of-object "ClutterEvent")
  (c-name "clutter_event_set_source_device")
  (return-type "none")
  (parameters
    '("ClutterInputDevice*" "device")
  )
)

(define-method get_source_device
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_source_device")
  (return-type "ClutterInputDevice*")
)

(define-method set_source
  (of-object "ClutterEvent")
  (c-name "clutter_event_set_source")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method get_source
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_source")
  (return-type "ClutterActor*")
)

(define-method set_stage
  (of-object "ClutterEvent")
  (c-name "clutter_event_set_stage")
  (return-type "none")
  (parameters
    '("ClutterStage*" "stage")
  )
)

(define-method get_stage
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_stage")
  (return-type "ClutterStage*")
)

(define-method get_device_id
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_device_id")
  (return-type "gint")
)

(define-method get_device_type
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_device_type")
  (return-type "ClutterInputDeviceType")
)

(define-method set_coords
  (of-object "ClutterEvent")
  (c-name "clutter_event_set_coords")
  (return-type "none")
  (parameters
    '("gfloat" "x")
    '("gfloat" "y")
  )
)

(define-method get_coords
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_coords")
  (return-type "none")
  (parameters
    '("gfloat*" "x")
    '("gfloat*" "y")
  )
)

(define-method get_position
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_position")
  (return-type "none")
  (parameters
    '("ClutterPoint*" "position")
  )
)

(define-method get_distance
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_distance")
  (return-type "float")
  (parameters
    '("const-ClutterEvent*" "target")
  )
)

(define-method get_angle
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_angle")
  (return-type "double")
  (parameters
    '("const-ClutterEvent*" "target")
  )
)

(define-method get_axes
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_axes")
  (return-type "gdouble*")
  (parameters
    '("guint*" "n_axes")
  )
)

(define-method has_shift_modifier
  (of-object "ClutterEvent")
  (c-name "clutter_event_has_shift_modifier")
  (return-type "gboolean")
)

(define-method has_control_modifier
  (of-object "ClutterEvent")
  (c-name "clutter_event_has_control_modifier")
  (return-type "gboolean")
)

(define-method is_pointer_emulated
  (of-object "ClutterEvent")
  (c-name "clutter_event_is_pointer_emulated")
  (return-type "gboolean")
)

(define-method set_key_symbol
  (of-object "ClutterEvent")
  (c-name "clutter_event_set_key_symbol")
  (return-type "none")
  (parameters
    '("guint" "key_sym")
  )
)

(define-method get_key_symbol
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_key_symbol")
  (return-type "guint")
)

(define-method set_key_code
  (of-object "ClutterEvent")
  (c-name "clutter_event_set_key_code")
  (return-type "none")
  (parameters
    '("guint16" "key_code")
  )
)

(define-method get_key_code
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_key_code")
  (return-type "guint16")
)

(define-method set_key_unicode
  (of-object "ClutterEvent")
  (c-name "clutter_event_set_key_unicode")
  (return-type "none")
  (parameters
    '("gunichar" "key_unicode")
  )
)

(define-method get_key_unicode
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_key_unicode")
  (return-type "gunichar")
)

(define-method set_button
  (of-object "ClutterEvent")
  (c-name "clutter_event_set_button")
  (return-type "none")
  (parameters
    '("guint32" "button")
  )
)

(define-method get_button
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_button")
  (return-type "guint32")
)

(define-method get_click_count
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_click_count")
  (return-type "guint")
)

(define-method set_related
  (of-object "ClutterEvent")
  (c-name "clutter_event_set_related")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method get_related
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_related")
  (return-type "ClutterActor*")
)

(define-method set_scroll_direction
  (of-object "ClutterEvent")
  (c-name "clutter_event_set_scroll_direction")
  (return-type "none")
  (parameters
    '("ClutterScrollDirection" "direction")
  )
)

(define-method get_scroll_direction
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_scroll_direction")
  (return-type "ClutterScrollDirection")
)

(define-method set_scroll_delta
  (of-object "ClutterEvent")
  (c-name "clutter_event_set_scroll_delta")
  (return-type "none")
  (parameters
    '("gdouble" "dx")
    '("gdouble" "dy")
  )
)

(define-method get_scroll_delta
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_scroll_delta")
  (return-type "none")
  (parameters
    '("gdouble*" "dx")
    '("gdouble*" "dy")
  )
)

(define-method get_event_sequence
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_event_sequence")
  (return-type "ClutterEventSequence*")
)

(define-function clutter_keysym_to_unicode
  (c-name "clutter_keysym_to_unicode")
  (return-type "guint32")
  (parameters
    '("guint" "keyval")
  )
)

(define-function clutter_unicode_to_keysym
  (c-name "clutter_unicode_to_keysym")
  (return-type "guint")
  (parameters
    '("guint32" "wc")
  )
)

(define-function clutter_get_current_event_time
  (c-name "clutter_get_current_event_time")
  (return-type "guint32")
)

(define-function clutter_get_current_event
  (c-name "clutter_get_current_event")
  (return-type "const-ClutterEvent*")
)



;; From clutter-event-private.h



;; From clutter-event-translator.h



;; From clutter-feature.h

(define-function clutter_feature_available
  (c-name "clutter_feature_available")
  (return-type "gboolean")
  (parameters
    '("ClutterFeatureFlags" "feature")
  )
)

(define-function clutter_feature_get_all
  (c-name "clutter_feature_get_all")
  (return-type "ClutterFeatureFlags")
)



;; From clutter-fixed-layout.h

(define-function clutter_fixed_layout_get_type
  (c-name "clutter_fixed_layout_get_type")
  (return-type "GType")
)

(define-function clutter_fixed_layout_new
  (c-name "clutter_fixed_layout_new")
  (is-constructor-of "ClutterFixedLayout")
  (return-type "ClutterLayoutManager*")
)



;; From clutter-flatten-effect.h



;; From clutter-flow-layout.h

(define-function clutter_flow_layout_get_type
  (c-name "clutter_flow_layout_get_type")
  (return-type "GType")
)

(define-function clutter_flow_layout_new
  (c-name "clutter_flow_layout_new")
  (is-constructor-of "ClutterFlowLayout")
  (return-type "ClutterLayoutManager*")
  (parameters
    '("ClutterFlowOrientation" "orientation")
  )
)

(define-method set_orientation
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_set_orientation")
  (return-type "none")
  (parameters
    '("ClutterFlowOrientation" "orientation")
  )
)

(define-method get_orientation
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_get_orientation")
  (return-type "ClutterFlowOrientation")
)

(define-method set_homogeneous
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_set_homogeneous")
  (return-type "none")
  (parameters
    '("gboolean" "homogeneous")
  )
)

(define-method get_homogeneous
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_get_homogeneous")
  (return-type "gboolean")
)

(define-method set_column_spacing
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_set_column_spacing")
  (return-type "none")
  (parameters
    '("gfloat" "spacing")
  )
)

(define-method get_column_spacing
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_get_column_spacing")
  (return-type "gfloat")
)

(define-method set_row_spacing
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_set_row_spacing")
  (return-type "none")
  (parameters
    '("gfloat" "spacing")
  )
)

(define-method get_row_spacing
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_get_row_spacing")
  (return-type "gfloat")
)

(define-method set_column_width
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_set_column_width")
  (return-type "none")
  (parameters
    '("gfloat" "min_width")
    '("gfloat" "max_width")
  )
)

(define-method get_column_width
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_get_column_width")
  (return-type "none")
  (parameters
    '("gfloat*" "min_width")
    '("gfloat*" "max_width")
  )
)

(define-method set_row_height
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_set_row_height")
  (return-type "none")
  (parameters
    '("gfloat" "min_height")
    '("gfloat" "max_height")
  )
)

(define-method get_row_height
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_get_row_height")
  (return-type "none")
  (parameters
    '("gfloat*" "min_height")
    '("gfloat*" "max_height")
  )
)

(define-method set_snap_to_grid
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_set_snap_to_grid")
  (return-type "none")
  (parameters
    '("gboolean" "snap_to_grid")
  )
)

(define-method get_snap_to_grid
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_get_snap_to_grid")
  (return-type "gboolean")
)



;; From clutter-gesture-action.h

(define-function clutter_gesture_action_get_type
  (c-name "clutter_gesture_action_get_type")
  (return-type "GType")
)

(define-function clutter_gesture_action_new
  (c-name "clutter_gesture_action_new")
  (is-constructor-of "ClutterGestureAction")
  (return-type "ClutterAction*")
)

(define-method get_n_touch_points
  (of-object "ClutterGestureAction")
  (c-name "clutter_gesture_action_get_n_touch_points")
  (return-type "gint")
)

(define-method set_n_touch_points
  (of-object "ClutterGestureAction")
  (c-name "clutter_gesture_action_set_n_touch_points")
  (return-type "none")
  (parameters
    '("gint" "nb_points")
  )
)

(define-method get_press_coords
  (of-object "ClutterGestureAction")
  (c-name "clutter_gesture_action_get_press_coords")
  (return-type "none")
  (parameters
    '("guint" "point")
    '("gfloat*" "press_x")
    '("gfloat*" "press_y")
  )
)

(define-method get_motion_coords
  (of-object "ClutterGestureAction")
  (c-name "clutter_gesture_action_get_motion_coords")
  (return-type "none")
  (parameters
    '("guint" "point")
    '("gfloat*" "motion_x")
    '("gfloat*" "motion_y")
  )
)

(define-method get_motion_delta
  (of-object "ClutterGestureAction")
  (c-name "clutter_gesture_action_get_motion_delta")
  (return-type "gfloat")
  (parameters
    '("guint" "point")
    '("gfloat*" "delta_x")
    '("gfloat*" "delta_y")
  )
)

(define-method get_release_coords
  (of-object "ClutterGestureAction")
  (c-name "clutter_gesture_action_get_release_coords")
  (return-type "none")
  (parameters
    '("guint" "point")
    '("gfloat*" "release_x")
    '("gfloat*" "release_y")
  )
)

(define-method get_velocity
  (of-object "ClutterGestureAction")
  (c-name "clutter_gesture_action_get_velocity")
  (return-type "gfloat")
  (parameters
    '("guint" "point")
    '("gfloat*" "velocity_x")
    '("gfloat*" "velocity_y")
  )
)

(define-method get_n_current_points
  (of-object "ClutterGestureAction")
  (c-name "clutter_gesture_action_get_n_current_points")
  (return-type "guint")
)

(define-method get_sequence
  (of-object "ClutterGestureAction")
  (c-name "clutter_gesture_action_get_sequence")
  (return-type "ClutterEventSequence*")
  (parameters
    '("guint" "point")
  )
)

(define-method get_device
  (of-object "ClutterGestureAction")
  (c-name "clutter_gesture_action_get_device")
  (return-type "ClutterInputDevice*")
  (parameters
    '("guint" "point")
  )
)

(define-method get_last_event
  (of-object "ClutterGestureAction")
  (c-name "clutter_gesture_action_get_last_event")
  (return-type "const-ClutterEvent*")
  (parameters
    '("guint" "point")
  )
)

(define-method cancel
  (of-object "ClutterGestureAction")
  (c-name "clutter_gesture_action_cancel")
  (return-type "none")
)

(define-method set_threshold_trigger_edge
  (of-object "ClutterGestureAction")
  (c-name "clutter_gesture_action_set_threshold_trigger_edge")
  (return-type "none")
  (parameters
    '("ClutterGestureTriggerEdge" "edge")
  )
)

(define-method get_threshold_trigger_egde
  (of-object "ClutterGestureAction")
  (c-name "clutter_gesture_action_get_threshold_trigger_egde")
  (return-type "ClutterGestureTriggerEdge")
)

(define-method set_threshold_trigger_distance
  (of-object "ClutterGestureAction")
  (c-name "clutter_gesture_action_set_threshold_trigger_distance")
  (return-type "none")
  (parameters
    '("float" "x")
    '("float" "y")
  )
)

(define-method get_threshold_trigger_distance
  (of-object "ClutterGestureAction")
  (c-name "clutter_gesture_action_get_threshold_trigger_distance")
  (return-type "none")
  (parameters
    '("float*" "x")
    '("float*" "y")
  )
)



;; From clutter-gesture-action-private.h



;; From clutter-grid-layout.h

(define-function clutter_grid_layout_get_type
  (c-name "clutter_grid_layout_get_type")
  (return-type "GType")
)

(define-function clutter_grid_layout_new
  (c-name "clutter_grid_layout_new")
  (is-constructor-of "ClutterGridLayout")
  (return-type "ClutterLayoutManager*")
)

(define-method attach
  (of-object "ClutterGridLayout")
  (c-name "clutter_grid_layout_attach")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("gint" "left")
    '("gint" "top")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method attach_next_to
  (of-object "ClutterGridLayout")
  (c-name "clutter_grid_layout_attach_next_to")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("ClutterActor*" "sibling")
    '("ClutterGridPosition" "side")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method get_child_at
  (of-object "ClutterGridLayout")
  (c-name "clutter_grid_layout_get_child_at")
  (return-type "ClutterActor*")
  (parameters
    '("gint" "left")
    '("gint" "top")
  )
)

(define-method insert_row
  (of-object "ClutterGridLayout")
  (c-name "clutter_grid_layout_insert_row")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
)

(define-method insert_column
  (of-object "ClutterGridLayout")
  (c-name "clutter_grid_layout_insert_column")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
)

(define-method insert_next_to
  (of-object "ClutterGridLayout")
  (c-name "clutter_grid_layout_insert_next_to")
  (return-type "none")
  (parameters
    '("ClutterActor*" "sibling")
    '("ClutterGridPosition" "side")
  )
)

(define-method set_orientation
  (of-object "ClutterGridLayout")
  (c-name "clutter_grid_layout_set_orientation")
  (return-type "none")
  (parameters
    '("ClutterOrientation" "orientation")
  )
)

(define-method get_orientation
  (of-object "ClutterGridLayout")
  (c-name "clutter_grid_layout_get_orientation")
  (return-type "ClutterOrientation")
)

(define-method set_column_spacing
  (of-object "ClutterGridLayout")
  (c-name "clutter_grid_layout_set_column_spacing")
  (return-type "none")
  (parameters
    '("guint" "spacing")
  )
)

(define-method get_column_spacing
  (of-object "ClutterGridLayout")
  (c-name "clutter_grid_layout_get_column_spacing")
  (return-type "guint")
)

(define-method set_row_spacing
  (of-object "ClutterGridLayout")
  (c-name "clutter_grid_layout_set_row_spacing")
  (return-type "none")
  (parameters
    '("guint" "spacing")
  )
)

(define-method get_row_spacing
  (of-object "ClutterGridLayout")
  (c-name "clutter_grid_layout_get_row_spacing")
  (return-type "guint")
)

(define-method set_column_homogeneous
  (of-object "ClutterGridLayout")
  (c-name "clutter_grid_layout_set_column_homogeneous")
  (return-type "none")
  (parameters
    '("gboolean" "homogeneous")
  )
)

(define-method get_column_homogeneous
  (of-object "ClutterGridLayout")
  (c-name "clutter_grid_layout_get_column_homogeneous")
  (return-type "gboolean")
)

(define-method set_row_homogeneous
  (of-object "ClutterGridLayout")
  (c-name "clutter_grid_layout_set_row_homogeneous")
  (return-type "none")
  (parameters
    '("gboolean" "homogeneous")
  )
)

(define-method get_row_homogeneous
  (of-object "ClutterGridLayout")
  (c-name "clutter_grid_layout_get_row_homogeneous")
  (return-type "gboolean")
)



;; From clutter-group.h

(define-function clutter_group_get_type
  (c-name "clutter_group_get_type")
  (return-type "GType")
)



;; From clutter.h



;; From clutter-id-pool.h



;; From clutter-image.h

(define-function clutter_image_error_quark
  (c-name "clutter_image_error_quark")
  (return-type "GQuark")
)

(define-function clutter_image_get_type
  (c-name "clutter_image_get_type")
  (return-type "GType")
)

(define-function clutter_image_new
  (c-name "clutter_image_new")
  (is-constructor-of "ClutterImage")
  (return-type "ClutterContent*")
)

(define-method set_data
  (of-object "ClutterImage")
  (c-name "clutter_image_set_data")
  (return-type "gboolean")
  (parameters
    '("const-guint8*" "data")
    '("CoglPixelFormat" "pixel_format")
    '("guint" "width")
    '("guint" "height")
    '("guint" "row_stride")
    '("GError**" "error")
  )
)

(define-method set_area
  (of-object "ClutterImage")
  (c-name "clutter_image_set_area")
  (return-type "gboolean")
  (parameters
    '("const-guint8*" "data")
    '("CoglPixelFormat" "pixel_format")
    '("const-cairo_rectangle_int_t*" "rect")
    '("guint" "row_stride")
    '("GError**" "error")
  )
)

(define-method set_bytes
  (of-object "ClutterImage")
  (c-name "clutter_image_set_bytes")
  (return-type "gboolean")
  (parameters
    '("GBytes*" "data")
    '("CoglPixelFormat" "pixel_format")
    '("guint" "width")
    '("guint" "height")
    '("guint" "row_stride")
    '("GError**" "error")
  )
)

(define-method get_texture
  (of-object "ClutterImage")
  (c-name "clutter_image_get_texture")
  (return-type "CoglTexture*")
)



;; From clutter-input-device.h

(define-function clutter_input_device_get_type
  (c-name "clutter_input_device_get_type")
  (return-type "GType")
)

(define-method get_device_type
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_device_type")
  (return-type "ClutterInputDeviceType")
)

(define-method get_device_id
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_device_id")
  (return-type "gint")
)

(define-method get_coords
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_coords")
  (return-type "gboolean")
  (parameters
    '("ClutterEventSequence*" "sequence")
    '("ClutterPoint*" "point")
  )
)

(define-method get_modifier_state
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_modifier_state")
  (return-type "ClutterModifierType")
)

(define-method get_pointer_actor
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_pointer_actor")
  (return-type "ClutterActor*")
)

(define-method get_pointer_stage
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_pointer_stage")
  (return-type "ClutterStage*")
)

(define-method get_device_name
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_device_name")
  (return-type "const-gchar*")
)

(define-method get_device_mode
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_device_mode")
  (return-type "ClutterInputMode")
)

(define-method get_has_cursor
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_has_cursor")
  (return-type "gboolean")
)

(define-method set_enabled
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_set_enabled")
  (return-type "none")
  (parameters
    '("gboolean" "enabled")
  )
)

(define-method get_enabled
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_enabled")
  (return-type "gboolean")
)

(define-method get_n_axes
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_n_axes")
  (return-type "guint")
)

(define-method get_axis
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_axis")
  (return-type "ClutterInputAxis")
  (parameters
    '("guint" "index_")
  )
)

(define-method get_axis_value
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_axis_value")
  (return-type "gboolean")
  (parameters
    '("gdouble*" "axes")
    '("ClutterInputAxis" "axis")
    '("gdouble*" "value")
  )
)

(define-method get_n_keys
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_n_keys")
  (return-type "guint")
)

(define-method set_key
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_set_key")
  (return-type "none")
  (parameters
    '("guint" "index_")
    '("guint" "keyval")
    '("ClutterModifierType" "modifiers")
  )
)

(define-method get_key
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_key")
  (return-type "gboolean")
  (parameters
    '("guint" "index_")
    '("guint*" "keyval")
    '("ClutterModifierType*" "modifiers")
  )
)

(define-method get_associated_device
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_associated_device")
  (return-type "ClutterInputDevice*")
)

(define-method get_slave_devices
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_slave_devices")
  (return-type "GList*")
)

(define-method update_from_event
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_update_from_event")
  (return-type "none")
  (parameters
    '("ClutterEvent*" "event")
    '("gboolean" "update_stage")
  )
)

(define-method grab
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_grab")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method ungrab
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_ungrab")
  (return-type "none")
)

(define-method get_grabbed_actor
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_grabbed_actor")
  (return-type "ClutterActor*")
)

(define-method sequence_grab
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_sequence_grab")
  (return-type "none")
  (parameters
    '("ClutterEventSequence*" "sequence")
    '("ClutterActor*" "actor")
  )
)

(define-method sequence_ungrab
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_sequence_ungrab")
  (return-type "none")
  (parameters
    '("ClutterEventSequence*" "sequence")
  )
)

(define-method sequence_get_grabbed_actor
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_sequence_get_grabbed_actor")
  (return-type "ClutterActor*")
  (parameters
    '("ClutterEventSequence*" "sequence")
  )
)

(define-method keycode_to_evdev
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_keycode_to_evdev")
  (return-type "gboolean")
  (parameters
    '("guint" "hardware_keycode")
    '("guint*" "evdev_keycode")
  )
)



;; From clutter-interval.h

(define-function clutter_interval_get_type
  (c-name "clutter_interval_get_type")
  (return-type "GType")
)

(define-function clutter_interval_new
  (c-name "clutter_interval_new")
  (is-constructor-of "ClutterInterval")
  (return-type "ClutterInterval*")
  (parameters
    '("GType" "gtype")
  )
  (varargs #t)
)

(define-function clutter_interval_new_with_values
  (c-name "clutter_interval_new_with_values")
  (return-type "ClutterInterval*")
  (parameters
    '("GType" "gtype")
    '("const-GValue*" "initial")
    '("const-GValue*" "final")
  )
)

(define-method clone
  (of-object "ClutterInterval")
  (c-name "clutter_interval_clone")
  (return-type "ClutterInterval*")
)

(define-method get_value_type
  (of-object "ClutterInterval")
  (c-name "clutter_interval_get_value_type")
  (return-type "GType")
)

(define-method set_initial
  (of-object "ClutterInterval")
  (c-name "clutter_interval_set_initial")
  (return-type "none")
  (parameters
  )
  (varargs #t)
)

(define-method set_initial_value
  (of-object "ClutterInterval")
  (c-name "clutter_interval_set_initial_value")
  (return-type "none")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-method get_initial_value
  (of-object "ClutterInterval")
  (c-name "clutter_interval_get_initial_value")
  (return-type "none")
  (parameters
    '("GValue*" "value")
  )
)

(define-method peek_initial_value
  (of-object "ClutterInterval")
  (c-name "clutter_interval_peek_initial_value")
  (return-type "GValue*")
)

(define-method set_final
  (of-object "ClutterInterval")
  (c-name "clutter_interval_set_final")
  (return-type "none")
  (parameters
  )
  (varargs #t)
)

(define-method set_final_value
  (of-object "ClutterInterval")
  (c-name "clutter_interval_set_final_value")
  (return-type "none")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-method get_final_value
  (of-object "ClutterInterval")
  (c-name "clutter_interval_get_final_value")
  (return-type "none")
  (parameters
    '("GValue*" "value")
  )
)

(define-method peek_final_value
  (of-object "ClutterInterval")
  (c-name "clutter_interval_peek_final_value")
  (return-type "GValue*")
)

(define-method set_interval
  (of-object "ClutterInterval")
  (c-name "clutter_interval_set_interval")
  (return-type "none")
  (parameters
  )
  (varargs #t)
)

(define-method get_interval
  (of-object "ClutterInterval")
  (c-name "clutter_interval_get_interval")
  (return-type "none")
  (parameters
  )
  (varargs #t)
)

(define-method validate
  (of-object "ClutterInterval")
  (c-name "clutter_interval_validate")
  (return-type "gboolean")
  (parameters
    '("GParamSpec*" "pspec")
  )
)

(define-method compute_value
  (of-object "ClutterInterval")
  (c-name "clutter_interval_compute_value")
  (return-type "gboolean")
  (parameters
    '("gdouble" "factor")
    '("GValue*" "value")
  )
)

(define-method compute
  (of-object "ClutterInterval")
  (c-name "clutter_interval_compute")
  (return-type "const-GValue*")
  (parameters
    '("gdouble" "factor")
  )
)

(define-method is_valid
  (of-object "ClutterInterval")
  (c-name "clutter_interval_is_valid")
  (return-type "gboolean")
)



;; From clutter-keyframe-transition.h

(define-function clutter_keyframe_transition_get_type
  (c-name "clutter_keyframe_transition_get_type")
  (return-type "GType")
)

(define-function clutter_keyframe_transition_new
  (c-name "clutter_keyframe_transition_new")
  (is-constructor-of "ClutterKeyframeTransition")
  (return-type "ClutterTransition*")
  (parameters
    '("const-char*" "property_name")
  )
)

(define-method set_key_frames
  (of-object "ClutterKeyframeTransition")
  (c-name "clutter_keyframe_transition_set_key_frames")
  (return-type "none")
  (parameters
    '("guint" "n_key_frames")
    '("const-double*" "key_frames")
  )
)

(define-method set_values
  (of-object "ClutterKeyframeTransition")
  (c-name "clutter_keyframe_transition_set_values")
  (return-type "none")
  (parameters
    '("guint" "n_values")
    '("const-GValue*" "values")
  )
)

(define-method set_modes
  (of-object "ClutterKeyframeTransition")
  (c-name "clutter_keyframe_transition_set_modes")
  (return-type "none")
  (parameters
    '("guint" "n_modes")
    '("const-ClutterAnimationMode*" "modes")
  )
)

(define-method set
  (of-object "ClutterKeyframeTransition")
  (c-name "clutter_keyframe_transition_set")
  (return-type "none")
  (parameters
    '("GType" "gtype")
    '("guint" "n_key_frames")
  )
  (varargs #t)
)

(define-method set_key_frame
  (of-object "ClutterKeyframeTransition")
  (c-name "clutter_keyframe_transition_set_key_frame")
  (return-type "none")
  (parameters
    '("guint" "index_")
    '("double" "key")
    '("ClutterAnimationMode" "mode")
    '("const-GValue*" "value")
  )
)

(define-method get_key_frame
  (of-object "ClutterKeyframeTransition")
  (c-name "clutter_keyframe_transition_get_key_frame")
  (return-type "none")
  (parameters
    '("guint" "index_")
    '("double*" "key")
    '("ClutterAnimationMode*" "mode")
    '("GValue*" "value")
  )
)

(define-method get_n_key_frames
  (of-object "ClutterKeyframeTransition")
  (c-name "clutter_keyframe_transition_get_n_key_frames")
  (return-type "guint")
)

(define-method clear
  (of-object "ClutterKeyframeTransition")
  (c-name "clutter_keyframe_transition_clear")
  (return-type "none")
)



;; From clutter-keysyms.h



;; From clutter-layout-manager.h

(define-function CLUTTER_PRIVATE_FIELD
  (c-name "CLUTTER_PRIVATE_FIELD")
  (return-type "gpointer")
  (parameters
  )
)

(define-function clutter_layout_manager_get_type
  (c-name "clutter_layout_manager_get_type")
  (return-type "GType")
)

(define-method get_preferred_width
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_get_preferred_width")
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("gfloat" "for_height")
    '("gfloat*" "min_width_p")
    '("gfloat*" "nat_width_p")
  )
)

(define-method get_preferred_height
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_get_preferred_height")
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("gfloat" "for_width")
    '("gfloat*" "min_height_p")
    '("gfloat*" "nat_height_p")
  )
)

(define-method allocate
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_allocate")
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("const-ClutterActorBox*" "allocation")
    '("ClutterAllocationFlags" "flags")
  )
)

(define-method set_container
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_set_container")
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
  )
)

(define-method layout_changed
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_layout_changed")
  (return-type "none")
)

(define-method find_child_property
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_find_child_property")
  (return-type "GParamSpec*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method list_child_properties
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_list_child_properties")
  (return-type "GParamSpec**")
  (parameters
    '("guint*" "n_pspecs")
  )
)

(define-method get_child_meta
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_get_child_meta")
  (return-type "ClutterLayoutMeta*")
  (parameters
    '("ClutterContainer*" "container")
    '("ClutterActor*" "actor")
  )
)

(define-method child_set
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_child_set")
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("ClutterActor*" "actor")
    '("const-gchar*" "first_property")
  )
  (varargs #t)
)

(define-method child_get
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_child_get")
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("ClutterActor*" "actor")
    '("const-gchar*" "first_property")
  )
  (varargs #t)
)

(define-method child_set_property
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_child_set_property")
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("ClutterActor*" "actor")
    '("const-gchar*" "property_name")
    '("const-GValue*" "value")
  )
)

(define-method child_get_property
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_child_get_property")
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("ClutterActor*" "actor")
    '("const-gchar*" "property_name")
    '("GValue*" "value")
  )
)

(define-method begin_animation
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_begin_animation")
  (return-type "ClutterAlpha*")
  (parameters
    '("guint" "duration")
    '("gulong" "mode")
  )
)

(define-method end_animation
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_end_animation")
  (return-type "none")
)

(define-method get_animation_progress
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_get_animation_progress")
  (return-type "gdouble")
)



;; From clutter-layout-meta.h

(define-function clutter_layout_meta_get_type
  (c-name "clutter_layout_meta_get_type")
  (return-type "GType")
)

(define-method get_manager
  (of-object "ClutterLayoutMeta")
  (c-name "clutter_layout_meta_get_manager")
  (return-type "ClutterLayoutManager*")
)



;; From clutter-list-model.h

(define-function clutter_list_model_get_type
  (c-name "clutter_list_model_get_type")
  (return-type "GType")
)

(define-function clutter_list_model_new
  (c-name "clutter_list_model_new")
  (is-constructor-of "ClutterListModel")
  (return-type "ClutterModel*")
  (parameters
    '("guint" "n_columns")
  )
  (varargs #t)
)

(define-function clutter_list_model_newv
  (c-name "clutter_list_model_newv")
  (return-type "ClutterModel*")
  (parameters
    '("guint" "n_columns")
    '("GType*" "types")
    '("const-gchar*-const[]" "names")
  )
)



;; From clutter-macros.h



;; From clutter-main.h

(define-function clutter_init_error_quark
  (c-name "clutter_init_error_quark")
  (return-type "GQuark")
)

(define-function clutter_base_init
  (c-name "clutter_base_init")
  (return-type "none")
)

(define-function clutter_init
  (c-name "clutter_init")
  (return-type "ClutterInitError")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
  )
)

(define-function clutter_init_with_args
  (c-name "clutter_init_with_args")
  (return-type "ClutterInitError")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
    '("const-char*" "parameter_string")
    '("GOptionEntry*" "entries")
    '("const-char*" "translation_domain")
    '("GError**" "error")
  )
)

(define-function clutter_get_option_group
  (c-name "clutter_get_option_group")
  (return-type "GOptionGroup*")
)

(define-function clutter_get_option_group_without_init
  (c-name "clutter_get_option_group_without_init")
  (return-type "GOptionGroup*")
)

(define-function clutter_main
  (c-name "clutter_main")
  (return-type "none")
)

(define-function clutter_main_quit
  (c-name "clutter_main_quit")
  (return-type "none")
)

(define-function clutter_main_level
  (c-name "clutter_main_level")
  (return-type "gint")
)

(define-function clutter_do_event
  (c-name "clutter_do_event")
  (return-type "none")
  (parameters
    '("ClutterEvent*" "event")
  )
)

(define-function clutter_get_accessibility_enabled
  (c-name "clutter_get_accessibility_enabled")
  (return-type "gboolean")
)

(define-function clutter_disable_accessibility
  (c-name "clutter_disable_accessibility")
  (return-type "none")
)

(define-function clutter_threads_set_lock_functions
  (c-name "clutter_threads_set_lock_functions")
  (return-type "none")
  (parameters
    '("GCallback" "enter_fn")
    '("GCallback" "leave_fn")
  )
)

(define-function clutter_threads_add_idle
  (c-name "clutter_threads_add_idle")
  (return-type "guint")
  (parameters
    '("GSourceFunc" "func")
    '("gpointer" "data")
  )
)

(define-function clutter_threads_add_idle_full
  (c-name "clutter_threads_add_idle_full")
  (return-type "guint")
  (parameters
    '("gint" "priority")
    '("GSourceFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-function clutter_threads_add_timeout
  (c-name "clutter_threads_add_timeout")
  (return-type "guint")
  (parameters
    '("guint" "interval")
    '("GSourceFunc" "func")
    '("gpointer" "data")
  )
)

(define-function clutter_threads_add_timeout_full
  (c-name "clutter_threads_add_timeout_full")
  (return-type "guint")
  (parameters
    '("gint" "priority")
    '("guint" "interval")
    '("GSourceFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-function clutter_threads_add_repaint_func
  (c-name "clutter_threads_add_repaint_func")
  (return-type "guint")
  (parameters
    '("GSourceFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-function clutter_threads_add_repaint_func_full
  (c-name "clutter_threads_add_repaint_func_full")
  (return-type "guint")
  (parameters
    '("ClutterRepaintFlags" "flags")
    '("GSourceFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-function clutter_threads_remove_repaint_func
  (c-name "clutter_threads_remove_repaint_func")
  (return-type "none")
  (parameters
    '("guint" "handle_id")
  )
)

(define-function clutter_grab_pointer
  (c-name "clutter_grab_pointer")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-function clutter_ungrab_pointer
  (c-name "clutter_ungrab_pointer")
  (return-type "none")
)

(define-function clutter_get_pointer_grab
  (c-name "clutter_get_pointer_grab")
  (return-type "ClutterActor*")
)

(define-function clutter_grab_keyboard
  (c-name "clutter_grab_keyboard")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-function clutter_ungrab_keyboard
  (c-name "clutter_ungrab_keyboard")
  (return-type "none")
)

(define-function clutter_get_keyboard_grab
  (c-name "clutter_get_keyboard_grab")
  (return-type "ClutterActor*")
)

(define-function clutter_get_font_map
  (c-name "clutter_get_font_map")
  (return-type "PangoFontMap*")
)

(define-function clutter_get_default_text_direction
  (c-name "clutter_get_default_text_direction")
  (return-type "ClutterTextDirection")
)

(define-function clutter_get_default_frame_rate
  (c-name "clutter_get_default_frame_rate")
  (return-type "guint")
)



;; From clutter-marshal.h



;; From clutter-master-clock.h



;; From clutter-model.h

(define-function clutter_model_get_type
  (c-name "clutter_model_get_type")
  (return-type "GType")
)

(define-method set_types
  (of-object "ClutterModel")
  (c-name "clutter_model_set_types")
  (return-type "none")
  (parameters
    '("guint" "n_columns")
    '("GType*" "types")
  )
)

(define-method set_names
  (of-object "ClutterModel")
  (c-name "clutter_model_set_names")
  (return-type "none")
  (parameters
    '("guint" "n_columns")
    '("const-gchar*-const[]" "names")
  )
)

(define-method append
  (of-object "ClutterModel")
  (c-name "clutter_model_append")
  (return-type "none")
  (parameters
  )
  (varargs #t)
)

(define-method appendv
  (of-object "ClutterModel")
  (c-name "clutter_model_appendv")
  (return-type "none")
  (parameters
    '("guint" "n_columns")
    '("guint*" "columns")
    '("GValue*" "values")
  )
)

(define-method prepend
  (of-object "ClutterModel")
  (c-name "clutter_model_prepend")
  (return-type "none")
  (parameters
  )
  (varargs #t)
)

(define-method prependv
  (of-object "ClutterModel")
  (c-name "clutter_model_prependv")
  (return-type "none")
  (parameters
    '("guint" "n_columns")
    '("guint*" "columns")
    '("GValue*" "values")
  )
)

(define-method insert
  (of-object "ClutterModel")
  (c-name "clutter_model_insert")
  (return-type "none")
  (parameters
    '("guint" "row")
  )
  (varargs #t)
)

(define-method insertv
  (of-object "ClutterModel")
  (c-name "clutter_model_insertv")
  (return-type "none")
  (parameters
    '("guint" "row")
    '("guint" "n_columns")
    '("guint*" "columns")
    '("GValue*" "values")
  )
)

(define-method insert_value
  (of-object "ClutterModel")
  (c-name "clutter_model_insert_value")
  (return-type "none")
  (parameters
    '("guint" "row")
    '("guint" "column")
    '("const-GValue*" "value")
  )
)

(define-method remove
  (of-object "ClutterModel")
  (c-name "clutter_model_remove")
  (return-type "none")
  (parameters
    '("guint" "row")
  )
)

(define-method get_n_rows
  (of-object "ClutterModel")
  (c-name "clutter_model_get_n_rows")
  (return-type "guint")
)

(define-method get_n_columns
  (of-object "ClutterModel")
  (c-name "clutter_model_get_n_columns")
  (return-type "guint")
)

(define-method get_column_name
  (of-object "ClutterModel")
  (c-name "clutter_model_get_column_name")
  (return-type "const-gchar*")
  (parameters
    '("guint" "column")
  )
)

(define-method get_column_type
  (of-object "ClutterModel")
  (c-name "clutter_model_get_column_type")
  (return-type "GType")
  (parameters
    '("guint" "column")
  )
)

(define-method get_first_iter
  (of-object "ClutterModel")
  (c-name "clutter_model_get_first_iter")
  (return-type "ClutterModelIter*")
)

(define-method get_last_iter
  (of-object "ClutterModel")
  (c-name "clutter_model_get_last_iter")
  (return-type "ClutterModelIter*")
)

(define-method get_iter_at_row
  (of-object "ClutterModel")
  (c-name "clutter_model_get_iter_at_row")
  (return-type "ClutterModelIter*")
  (parameters
    '("guint" "row")
  )
)

(define-method set_sorting_column
  (of-object "ClutterModel")
  (c-name "clutter_model_set_sorting_column")
  (return-type "none")
  (parameters
    '("gint" "column")
  )
)

(define-method get_sorting_column
  (of-object "ClutterModel")
  (c-name "clutter_model_get_sorting_column")
  (return-type "gint")
)

(define-method foreach
  (of-object "ClutterModel")
  (c-name "clutter_model_foreach")
  (return-type "none")
  (parameters
    '("ClutterModelForeachFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method set_sort
  (of-object "ClutterModel")
  (c-name "clutter_model_set_sort")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("ClutterModelSortFunc" "func")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-method set_filter
  (of-object "ClutterModel")
  (c-name "clutter_model_set_filter")
  (return-type "none")
  (parameters
    '("ClutterModelFilterFunc" "func")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-method get_filter_set
  (of-object "ClutterModel")
  (c-name "clutter_model_get_filter_set")
  (return-type "gboolean")
)

(define-method resort
  (of-object "ClutterModel")
  (c-name "clutter_model_resort")
  (return-type "none")
)

(define-method filter_row
  (of-object "ClutterModel")
  (c-name "clutter_model_filter_row")
  (return-type "gboolean")
  (parameters
    '("guint" "row")
  )
)

(define-method filter_iter
  (of-object "ClutterModel")
  (c-name "clutter_model_filter_iter")
  (return-type "gboolean")
  (parameters
    '("ClutterModelIter*" "iter")
  )
)

(define-function clutter_model_iter_get_type
  (c-name "clutter_model_iter_get_type")
  (return-type "GType")
)

(define-method get
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_get")
  (return-type "none")
  (parameters
  )
  (varargs #t)
)

(define-method get_valist
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_get_valist")
  (return-type "none")
  (parameters
    '("va_list" "args")
  )
)

(define-method get_value
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_get_value")
  (return-type "none")
  (parameters
    '("guint" "column")
    '("GValue*" "value")
  )
)

(define-method set
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_set")
  (return-type "none")
  (parameters
  )
  (varargs #t)
)

(define-method set_valist
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_set_valist")
  (return-type "none")
  (parameters
    '("va_list" "args")
  )
)

(define-method set_value
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_set_value")
  (return-type "none")
  (parameters
    '("guint" "column")
    '("const-GValue*" "value")
  )
)

(define-method is_first
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_is_first")
  (return-type "gboolean")
)

(define-method is_last
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_is_last")
  (return-type "gboolean")
)

(define-method next
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_next")
  (return-type "ClutterModelIter*")
)

(define-method prev
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_prev")
  (return-type "ClutterModelIter*")
)

(define-method get_model
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_get_model")
  (return-type "ClutterModel*")
)

(define-method get_row
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_get_row")
  (return-type "guint")
)

(define-method copy
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_copy")
  (return-type "ClutterModelIter*")
)



;; From clutter-model-private.h



;; From clutter-offscreen-effect.h

(define-function clutter_offscreen_effect_get_type
  (c-name "clutter_offscreen_effect_get_type")
  (return-type "GType")
)

(define-method get_target
  (of-object "ClutterOffscreenEffect")
  (c-name "clutter_offscreen_effect_get_target")
  (return-type "CoglMaterial*")
)

(define-method get_texture
  (of-object "ClutterOffscreenEffect")
  (c-name "clutter_offscreen_effect_get_texture")
  (return-type "CoglHandle")
)

(define-method paint_target
  (of-object "ClutterOffscreenEffect")
  (c-name "clutter_offscreen_effect_paint_target")
  (return-type "none")
)

(define-method create_texture
  (of-object "ClutterOffscreenEffect")
  (c-name "clutter_offscreen_effect_create_texture")
  (return-type "CoglHandle")
  (parameters
    '("gfloat" "width")
    '("gfloat" "height")
  )
)

(define-method get_target_size
  (of-object "ClutterOffscreenEffect")
  (c-name "clutter_offscreen_effect_get_target_size")
  (return-type "gboolean")
  (parameters
    '("gfloat*" "width")
    '("gfloat*" "height")
  )
)

(define-method get_target_rect
  (of-object "ClutterOffscreenEffect")
  (c-name "clutter_offscreen_effect_get_target_rect")
  (return-type "gboolean")
  (parameters
    '("ClutterRect*" "rect")
  )
)



;; From clutter-offscreen-effect-private.h



;; From clutter-page-turn-effect.h

(define-function clutter_page_turn_effect_get_type
  (c-name "clutter_page_turn_effect_get_type")
  (return-type "GType")
)

(define-function clutter_page_turn_effect_new
  (c-name "clutter_page_turn_effect_new")
  (is-constructor-of "ClutterPageTurnEffect")
  (return-type "ClutterEffect*")
  (parameters
    '("gdouble" "period")
    '("gdouble" "angle")
    '("gfloat" "radius")
  )
)

(define-method set_period
  (of-object "ClutterPageTurnEffect")
  (c-name "clutter_page_turn_effect_set_period")
  (return-type "none")
  (parameters
    '("gdouble" "period")
  )
)

(define-method get_period
  (of-object "ClutterPageTurnEffect")
  (c-name "clutter_page_turn_effect_get_period")
  (return-type "gdouble")
)

(define-method set_angle
  (of-object "ClutterPageTurnEffect")
  (c-name "clutter_page_turn_effect_set_angle")
  (return-type "none")
  (parameters
    '("gdouble" "angle")
  )
)

(define-method get_angle
  (of-object "ClutterPageTurnEffect")
  (c-name "clutter_page_turn_effect_get_angle")
  (return-type "gdouble")
)

(define-method set_radius
  (of-object "ClutterPageTurnEffect")
  (c-name "clutter_page_turn_effect_set_radius")
  (return-type "none")
  (parameters
    '("gfloat" "radius")
  )
)

(define-method get_radius
  (of-object "ClutterPageTurnEffect")
  (c-name "clutter_page_turn_effect_get_radius")
  (return-type "gfloat")
)



;; From clutter-paint-node.h

(define-function clutter_paint_node_get_type
  (c-name "clutter_paint_node_get_type")
  (return-type "GType")
)

(define-method ref
  (of-object "ClutterPaintNode")
  (c-name "clutter_paint_node_ref")
  (return-type "ClutterPaintNode*")
)

(define-method unref
  (of-object "ClutterPaintNode")
  (c-name "clutter_paint_node_unref")
  (return-type "none")
)

(define-method set_name
  (of-object "ClutterPaintNode")
  (c-name "clutter_paint_node_set_name")
  (return-type "none")
  (parameters
    '("const-char*" "name")
  )
)

(define-method add_child
  (of-object "ClutterPaintNode")
  (c-name "clutter_paint_node_add_child")
  (return-type "none")
  (parameters
    '("ClutterPaintNode*" "child")
  )
)

(define-method add_rectangle
  (of-object "ClutterPaintNode")
  (c-name "clutter_paint_node_add_rectangle")
  (return-type "none")
  (parameters
    '("const-ClutterActorBox*" "rect")
  )
)

(define-method add_texture_rectangle
  (of-object "ClutterPaintNode")
  (c-name "clutter_paint_node_add_texture_rectangle")
  (return-type "none")
  (parameters
    '("const-ClutterActorBox*" "rect")
    '("float" "x_1")
    '("float" "y_1")
    '("float" "x_2")
    '("float" "y_2")
  )
)

(define-method add_path
  (of-object "ClutterPaintNode")
  (c-name "clutter_paint_node_add_path")
  (return-type "none")
  (parameters
    '("CoglPath*" "path")
  )
)

(define-method add_primitive
  (of-object "ClutterPaintNode")
  (c-name "clutter_paint_node_add_primitive")
  (return-type "none")
  (parameters
    '("CoglPrimitive*" "primitive")
  )
)

(define-function clutter_value_set_paint_node
  (c-name "clutter_value_set_paint_node")
  (return-type "none")
  (parameters
    '("GValue*" "value")
    '("gpointer" "node")
  )
)

(define-function clutter_value_take_paint_node
  (c-name "clutter_value_take_paint_node")
  (return-type "none")
  (parameters
    '("GValue*" "value")
    '("gpointer" "node")
  )
)

(define-function clutter_value_get_paint_node
  (c-name "clutter_value_get_paint_node")
  (return-type "gpointer")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-function clutter_value_dup_paint_node
  (c-name "clutter_value_dup_paint_node")
  (return-type "gpointer")
  (parameters
    '("const-GValue*" "value")
  )
)



;; From clutter-paint-node-private.h



;; From clutter-paint-nodes.h

(define-function clutter_color_node_get_type
  (c-name "clutter_color_node_get_type")
  (return-type "GType")
)

(define-method node_new
  (of-object "ClutterColor")
  (c-name "clutter_color_node_new")
  (return-type "ClutterPaintNode*")
)

(define-function clutter_texture_node_get_type
  (c-name "clutter_texture_node_get_type")
  (return-type "GType")
)

(define-function clutter_texture_node_new
  (c-name "clutter_texture_node_new")
  (is-constructor-of "ClutterTextureNode")
  (return-type "ClutterPaintNode*")
  (parameters
    '("CoglTexture*" "texture")
    '("const-ClutterColor*" "color")
    '("ClutterScalingFilter" "min_filter")
    '("ClutterScalingFilter" "mag_filter")
  )
)

(define-function clutter_clip_node_get_type
  (c-name "clutter_clip_node_get_type")
  (return-type "GType")
)

(define-function clutter_clip_node_new
  (c-name "clutter_clip_node_new")
  (is-constructor-of "ClutterClipNode")
  (return-type "ClutterPaintNode*")
)

(define-function clutter_pipeline_node_get_type
  (c-name "clutter_pipeline_node_get_type")
  (return-type "GType")
)

(define-function clutter_pipeline_node_new
  (c-name "clutter_pipeline_node_new")
  (is-constructor-of "ClutterPipelineNode")
  (return-type "ClutterPaintNode*")
  (parameters
    '("CoglPipeline*" "pipeline")
  )
)

(define-function clutter_text_node_get_type
  (c-name "clutter_text_node_get_type")
  (return-type "GType")
)

(define-function clutter_text_node_new
  (c-name "clutter_text_node_new")
  (is-constructor-of "ClutterTextNode")
  (return-type "ClutterPaintNode*")
  (parameters
    '("PangoLayout*" "layout")
    '("const-ClutterColor*" "color")
  )
)



;; From clutter-paint-volume-private.h



;; From clutter-pan-action.h

(define-function clutter_pan_action_get_type
  (c-name "clutter_pan_action_get_type")
  (return-type "GType")
)

(define-function clutter_pan_action_new
  (c-name "clutter_pan_action_new")
  (is-constructor-of "ClutterPanAction")
  (return-type "ClutterAction*")
)

(define-method set_pan_axis
  (of-object "ClutterPanAction")
  (c-name "clutter_pan_action_set_pan_axis")
  (return-type "none")
  (parameters
    '("ClutterPanAxis" "axis")
  )
)

(define-method get_pan_axis
  (of-object "ClutterPanAction")
  (c-name "clutter_pan_action_get_pan_axis")
  (return-type "ClutterPanAxis")
)

(define-method set_interpolate
  (of-object "ClutterPanAction")
  (c-name "clutter_pan_action_set_interpolate")
  (return-type "none")
  (parameters
    '("gboolean" "should_interpolate")
  )
)

(define-method get_interpolate
  (of-object "ClutterPanAction")
  (c-name "clutter_pan_action_get_interpolate")
  (return-type "gboolean")
)

(define-method set_deceleration
  (of-object "ClutterPanAction")
  (c-name "clutter_pan_action_set_deceleration")
  (return-type "none")
  (parameters
    '("gdouble" "rate")
  )
)

(define-method get_deceleration
  (of-object "ClutterPanAction")
  (c-name "clutter_pan_action_get_deceleration")
  (return-type "gdouble")
)

(define-method set_acceleration_factor
  (of-object "ClutterPanAction")
  (c-name "clutter_pan_action_set_acceleration_factor")
  (return-type "none")
  (parameters
    '("gdouble" "factor")
  )
)

(define-method get_acceleration_factor
  (of-object "ClutterPanAction")
  (c-name "clutter_pan_action_get_acceleration_factor")
  (return-type "gdouble")
)

(define-method get_interpolated_coords
  (of-object "ClutterPanAction")
  (c-name "clutter_pan_action_get_interpolated_coords")
  (return-type "none")
  (parameters
    '("gfloat*" "interpolated_x")
    '("gfloat*" "interpolated_y")
  )
)

(define-method get_interpolated_delta
  (of-object "ClutterPanAction")
  (c-name "clutter_pan_action_get_interpolated_delta")
  (return-type "gfloat")
  (parameters
    '("gfloat*" "delta_x")
    '("gfloat*" "delta_y")
  )
)

(define-method get_motion_delta
  (of-object "ClutterPanAction")
  (c-name "clutter_pan_action_get_motion_delta")
  (return-type "gfloat")
  (parameters
    '("guint" "point")
    '("gfloat*" "delta_x")
    '("gfloat*" "delta_y")
  )
)

(define-method get_motion_coords
  (of-object "ClutterPanAction")
  (c-name "clutter_pan_action_get_motion_coords")
  (return-type "none")
  (parameters
    '("guint" "point")
    '("gfloat*" "motion_x")
    '("gfloat*" "motion_y")
  )
)



;; From clutter-path-constraint.h

(define-function clutter_path_constraint_get_type
  (c-name "clutter_path_constraint_get_type")
  (return-type "GType")
)

(define-method constraint_new
  (of-object "ClutterPath")
  (c-name "clutter_path_constraint_new")
  (return-type "ClutterConstraint*")
  (parameters
    '("gfloat" "offset")
  )
)

(define-function clutter_path_constraint_set_path
  (c-name "clutter_path_constraint_set_path")
  (return-type "none")
  (parameters
    '("ClutterPath*" "path")
  )
)

(define-function clutter_path_constraint_get_path
  (c-name "clutter_path_constraint_get_path")
  (return-type "ClutterPath*")
  (parameters
  )
)

(define-function clutter_path_constraint_set_offset
  (c-name "clutter_path_constraint_set_offset")
  (return-type "none")
  (parameters
    '("gfloat" "offset")
  )
)

(define-function clutter_path_constraint_get_offset
  (c-name "clutter_path_constraint_get_offset")
  (return-type "gfloat")
  (parameters
  )
)



;; From clutter-path.h

(define-function clutter_path_get_type
  (c-name "clutter_path_get_type")
  (return-type "GType")
)

(define-function clutter_path_new
  (c-name "clutter_path_new")
  (is-constructor-of "ClutterPath")
  (return-type "ClutterPath*")
)

(define-function clutter_path_new_with_description
  (c-name "clutter_path_new_with_description")
  (return-type "ClutterPath*")
  (parameters
    '("const-gchar*" "desc")
  )
)

(define-method add_move_to
  (of-object "ClutterPath")
  (c-name "clutter_path_add_move_to")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method add_rel_move_to
  (of-object "ClutterPath")
  (c-name "clutter_path_add_rel_move_to")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method add_line_to
  (of-object "ClutterPath")
  (c-name "clutter_path_add_line_to")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method add_rel_line_to
  (of-object "ClutterPath")
  (c-name "clutter_path_add_rel_line_to")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method add_curve_to
  (of-object "ClutterPath")
  (c-name "clutter_path_add_curve_to")
  (return-type "none")
  (parameters
    '("gint" "x_1")
    '("gint" "y_1")
    '("gint" "x_2")
    '("gint" "y_2")
    '("gint" "x_3")
    '("gint" "y_3")
  )
)

(define-method add_rel_curve_to
  (of-object "ClutterPath")
  (c-name "clutter_path_add_rel_curve_to")
  (return-type "none")
  (parameters
    '("gint" "x_1")
    '("gint" "y_1")
    '("gint" "x_2")
    '("gint" "y_2")
    '("gint" "x_3")
    '("gint" "y_3")
  )
)

(define-method add_close
  (of-object "ClutterPath")
  (c-name "clutter_path_add_close")
  (return-type "none")
)

(define-method add_string
  (of-object "ClutterPath")
  (c-name "clutter_path_add_string")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-method add_node
  (of-object "ClutterPath")
  (c-name "clutter_path_add_node")
  (return-type "none")
  (parameters
    '("const-ClutterPathNode*" "node")
  )
)

(define-method add_cairo_path
  (of-object "ClutterPath")
  (c-name "clutter_path_add_cairo_path")
  (return-type "none")
  (parameters
    '("const-cairo_path_t*" "cpath")
  )
)

(define-method get_n_nodes
  (of-object "ClutterPath")
  (c-name "clutter_path_get_n_nodes")
  (return-type "guint")
)

(define-method get_node
  (of-object "ClutterPath")
  (c-name "clutter_path_get_node")
  (return-type "none")
  (parameters
    '("guint" "index_")
    '("ClutterPathNode*" "node")
  )
)

(define-method get_nodes
  (of-object "ClutterPath")
  (c-name "clutter_path_get_nodes")
  (return-type "GSList*")
)

(define-method foreach
  (of-object "ClutterPath")
  (c-name "clutter_path_foreach")
  (return-type "none")
  (parameters
    '("ClutterPathCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method insert_node
  (of-object "ClutterPath")
  (c-name "clutter_path_insert_node")
  (return-type "none")
  (parameters
    '("gint" "index_")
    '("const-ClutterPathNode*" "node")
  )
)

(define-method remove_node
  (of-object "ClutterPath")
  (c-name "clutter_path_remove_node")
  (return-type "none")
  (parameters
    '("guint" "index_")
  )
)

(define-method replace_node
  (of-object "ClutterPath")
  (c-name "clutter_path_replace_node")
  (return-type "none")
  (parameters
    '("guint" "index_")
    '("const-ClutterPathNode*" "node")
  )
)

(define-method get_description
  (of-object "ClutterPath")
  (c-name "clutter_path_get_description")
  (return-type "gchar*")
)

(define-method set_description
  (of-object "ClutterPath")
  (c-name "clutter_path_set_description")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-method clear
  (of-object "ClutterPath")
  (c-name "clutter_path_clear")
  (return-type "none")
)

(define-method to_cairo_path
  (of-object "ClutterPath")
  (c-name "clutter_path_to_cairo_path")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
  )
)

(define-method get_position
  (of-object "ClutterPath")
  (c-name "clutter_path_get_position")
  (return-type "guint")
  (parameters
    '("gdouble" "progress")
    '("ClutterKnot*" "position")
  )
)

(define-method get_length
  (of-object "ClutterPath")
  (c-name "clutter_path_get_length")
  (return-type "guint")
)



;; From clutter-private.h



;; From clutter-profile.h



;; From clutter-property-transition.h

(define-function clutter_property_transition_get_type
  (c-name "clutter_property_transition_get_type")
  (return-type "GType")
)

(define-function clutter_property_transition_new
  (c-name "clutter_property_transition_new")
  (is-constructor-of "ClutterPropertyTransition")
  (return-type "ClutterTransition*")
  (parameters
    '("const-char*" "property_name")
  )
)

(define-method set_property_name
  (of-object "ClutterPropertyTransition")
  (c-name "clutter_property_transition_set_property_name")
  (return-type "none")
  (parameters
    '("const-char*" "property_name")
  )
)

(define-method get_property_name
  (of-object "ClutterPropertyTransition")
  (c-name "clutter_property_transition_get_property_name")
  (return-type "const-char*")
)



;; From clutter-rotate-action.h

(define-function clutter_rotate_action_get_type
  (c-name "clutter_rotate_action_get_type")
  (return-type "GType")
)

(define-function clutter_rotate_action_new
  (c-name "clutter_rotate_action_new")
  (is-constructor-of "ClutterRotateAction")
  (return-type "ClutterAction*")
)



;; From clutter-scriptable.h

(define-function clutter_scriptable_get_type
  (c-name "clutter_scriptable_get_type")
  (return-type "GType")
)

(define-method set_id
  (of-object "ClutterScriptable")
  (c-name "clutter_scriptable_set_id")
  (return-type "none")
  (parameters
    '("const-gchar*" "id_")
  )
)

(define-method get_id
  (of-object "ClutterScriptable")
  (c-name "clutter_scriptable_get_id")
  (return-type "const-gchar*")
)

(define-method parse_custom_node
  (of-object "ClutterScriptable")
  (c-name "clutter_scriptable_parse_custom_node")
  (return-type "gboolean")
  (parameters
    '("ClutterScript*" "script")
    '("GValue*" "value")
    '("const-gchar*" "name")
    '("JsonNode*" "node")
  )
)

(define-method set_custom_property
  (of-object "ClutterScriptable")
  (c-name "clutter_scriptable_set_custom_property")
  (return-type "none")
  (parameters
    '("ClutterScript*" "script")
    '("const-gchar*" "name")
    '("const-GValue*" "value")
  )
)



;; From clutter-script.h

(define-function clutter_script_error_quark
  (c-name "clutter_script_error_quark")
  (return-type "GQuark")
)

(define-function clutter_script_get_type
  (c-name "clutter_script_get_type")
  (return-type "GType")
)

(define-function clutter_script_new
  (c-name "clutter_script_new")
  (is-constructor-of "ClutterScript")
  (return-type "ClutterScript*")
)

(define-method load_from_file
  (of-object "ClutterScript")
  (c-name "clutter_script_load_from_file")
  (return-type "guint")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-method load_from_data
  (of-object "ClutterScript")
  (c-name "clutter_script_load_from_data")
  (return-type "guint")
  (parameters
    '("const-gchar*" "data")
    '("gssize" "length")
    '("GError**" "error")
  )
)

(define-method load_from_resource
  (of-object "ClutterScript")
  (c-name "clutter_script_load_from_resource")
  (return-type "guint")
  (parameters
    '("const-gchar*" "resource_path")
    '("GError**" "error")
  )
)

(define-method get_object
  (of-object "ClutterScript")
  (c-name "clutter_script_get_object")
  (return-type "GObject*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_objects
  (of-object "ClutterScript")
  (c-name "clutter_script_get_objects")
  (return-type "gint")
  (parameters
    '("const-gchar*" "first_name")
  )
  (varargs #t)
)

(define-method list_objects
  (of-object "ClutterScript")
  (c-name "clutter_script_list_objects")
  (return-type "GList*")
)

(define-method unmerge_objects
  (of-object "ClutterScript")
  (c-name "clutter_script_unmerge_objects")
  (return-type "none")
  (parameters
    '("guint" "merge_id")
  )
)

(define-method ensure_objects
  (of-object "ClutterScript")
  (c-name "clutter_script_ensure_objects")
  (return-type "none")
)

(define-method add_states
  (of-object "ClutterScript")
  (c-name "clutter_script_add_states")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("ClutterState*" "state")
  )
)

(define-method get_states
  (of-object "ClutterScript")
  (c-name "clutter_script_get_states")
  (return-type "ClutterState*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method connect_signals
  (of-object "ClutterScript")
  (c-name "clutter_script_connect_signals")
  (return-type "none")
  (parameters
    '("gpointer" "user_data")
  )
)

(define-method connect_signals_full
  (of-object "ClutterScript")
  (c-name "clutter_script_connect_signals_full")
  (return-type "none")
  (parameters
    '("ClutterScriptConnectFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method add_search_paths
  (of-object "ClutterScript")
  (c-name "clutter_script_add_search_paths")
  (return-type "none")
  (parameters
    '("const-gchar*-const[]" "paths")
    '("gsize" "n_paths")
  )
)

(define-method lookup_filename
  (of-object "ClutterScript")
  (c-name "clutter_script_lookup_filename")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-method get_type_from_name
  (of-object "ClutterScript")
  (c-name "clutter_script_get_type_from_name")
  (return-type "GType")
  (parameters
    '("const-gchar*" "type_name")
  )
)

(define-method set_translation_domain
  (of-object "ClutterScript")
  (c-name "clutter_script_set_translation_domain")
  (return-type "none")
  (parameters
    '("const-gchar*" "domain")
  )
)

(define-method get_translation_domain
  (of-object "ClutterScript")
  (c-name "clutter_script_get_translation_domain")
  (return-type "const-gchar*")
)

(define-function clutter_get_script_id
  (c-name "clutter_get_script_id")
  (return-type "const-gchar*")
  (parameters
    '("GObject*" "gobject")
  )
)



;; From clutter-script-private.h

(define-function object_info_free
  (c-name "object_info_free")
  (return-type "none")
  (parameters
    '("gpointer" "data")
  )
)

(define-function property_info_free
  (c-name "property_info_free")
  (return-type "none")
  (parameters
    '("gpointer" "data")
  )
)



;; From clutter-scroll-actor.h

(define-function clutter_scroll_actor_get_type
  (c-name "clutter_scroll_actor_get_type")
  (return-type "GType")
)

(define-function clutter_scroll_actor_new
  (c-name "clutter_scroll_actor_new")
  (is-constructor-of "ClutterScrollActor")
  (return-type "ClutterActor*")
)

(define-method set_scroll_mode
  (of-object "ClutterScrollActor")
  (c-name "clutter_scroll_actor_set_scroll_mode")
  (return-type "none")
  (parameters
    '("ClutterScrollMode" "mode")
  )
)

(define-method get_scroll_mode
  (of-object "ClutterScrollActor")
  (c-name "clutter_scroll_actor_get_scroll_mode")
  (return-type "ClutterScrollMode")
)

(define-method scroll_to_point
  (of-object "ClutterScrollActor")
  (c-name "clutter_scroll_actor_scroll_to_point")
  (return-type "none")
  (parameters
    '("const-ClutterPoint*" "point")
  )
)

(define-method scroll_to_rect
  (of-object "ClutterScrollActor")
  (c-name "clutter_scroll_actor_scroll_to_rect")
  (return-type "none")
  (parameters
    '("const-ClutterRect*" "rect")
  )
)



;; From clutter-settings.h

(define-function clutter_settings_get_type
  (c-name "clutter_settings_get_type")
  (return-type "GType")
)

(define-function clutter_settings_get_default
  (c-name "clutter_settings_get_default")
  (return-type "ClutterSettings*")
)



;; From clutter-settings-private.h



;; From clutter-shader-effect.h

(define-function clutter_shader_effect_get_type
  (c-name "clutter_shader_effect_get_type")
  (return-type "GType")
)

(define-function clutter_shader_effect_new
  (c-name "clutter_shader_effect_new")
  (is-constructor-of "ClutterShaderEffect")
  (return-type "ClutterEffect*")
  (parameters
    '("ClutterShaderType" "shader_type")
  )
)

(define-method set_shader_source
  (of-object "ClutterShaderEffect")
  (c-name "clutter_shader_effect_set_shader_source")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "source")
  )
)

(define-method set_uniform
  (of-object "ClutterShaderEffect")
  (c-name "clutter_shader_effect_set_uniform")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("GType" "gtype")
    '("gsize" "n_values")
  )
  (varargs #t)
)

(define-method set_uniform_value
  (of-object "ClutterShaderEffect")
  (c-name "clutter_shader_effect_set_uniform_value")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("const-GValue*" "value")
  )
)

(define-method get_shader
  (of-object "ClutterShaderEffect")
  (c-name "clutter_shader_effect_get_shader")
  (return-type "CoglHandle")
)

(define-method get_program
  (of-object "ClutterShaderEffect")
  (c-name "clutter_shader_effect_get_program")
  (return-type "CoglHandle")
)



;; From clutter-shader-types.h

(define-function clutter_shader_float_get_type
  (c-name "clutter_shader_float_get_type")
  (return-type "GType")
)

(define-function clutter_shader_int_get_type
  (c-name "clutter_shader_int_get_type")
  (return-type "GType")
)

(define-function clutter_shader_matrix_get_type
  (c-name "clutter_shader_matrix_get_type")
  (return-type "GType")
)

(define-function clutter_value_set_shader_float
  (c-name "clutter_value_set_shader_float")
  (return-type "none")
  (parameters
    '("GValue*" "value")
    '("gint" "size")
    '("const-gfloat*" "floats")
  )
)

(define-function clutter_value_set_shader_int
  (c-name "clutter_value_set_shader_int")
  (return-type "none")
  (parameters
    '("GValue*" "value")
    '("gint" "size")
    '("const-gint*" "ints")
  )
)

(define-function clutter_value_set_shader_matrix
  (c-name "clutter_value_set_shader_matrix")
  (return-type "none")
  (parameters
    '("GValue*" "value")
    '("gint" "size")
    '("const-gfloat*" "matrix")
  )
)

(define-function clutter_value_get_shader_float
  (c-name "clutter_value_get_shader_float")
  (return-type "const-gfloat*")
  (parameters
    '("const-GValue*" "value")
    '("gsize*" "length")
  )
)

(define-function clutter_value_get_shader_int
  (c-name "clutter_value_get_shader_int")
  (return-type "const-gint*")
  (parameters
    '("const-GValue*" "value")
    '("gsize*" "length")
  )
)

(define-function clutter_value_get_shader_matrix
  (c-name "clutter_value_get_shader_matrix")
  (return-type "const-gfloat*")
  (parameters
    '("const-GValue*" "value")
    '("gsize*" "length")
  )
)



;; From clutter-snap-constraint.h

(define-function clutter_snap_constraint_get_type
  (c-name "clutter_snap_constraint_get_type")
  (return-type "GType")
)

(define-function clutter_snap_constraint_new
  (c-name "clutter_snap_constraint_new")
  (is-constructor-of "ClutterSnapConstraint")
  (return-type "ClutterConstraint*")
  (parameters
    '("ClutterActor*" "source")
    '("ClutterSnapEdge" "from_edge")
    '("ClutterSnapEdge" "to_edge")
    '("gfloat" "offset")
  )
)

(define-function clutter_snap_constraint_set_source
  (c-name "clutter_snap_constraint_set_source")
  (return-type "none")
  (parameters
    '("ClutterActor*" "source")
  )
)

(define-function clutter_snap_constraint_get_source
  (c-name "clutter_snap_constraint_get_source")
  (return-type "ClutterActor*")
  (parameters
  )
)

(define-function clutter_snap_constraint_set_edges
  (c-name "clutter_snap_constraint_set_edges")
  (return-type "none")
  (parameters
    '("ClutterSnapEdge" "from_edge")
    '("ClutterSnapEdge" "to_edge")
  )
)

(define-function clutter_snap_constraint_get_edges
  (c-name "clutter_snap_constraint_get_edges")
  (return-type "none")
  (parameters
    '("ClutterSnapEdge*" "from_edge")
    '("ClutterSnapEdge*" "to_edge")
  )
)

(define-function clutter_snap_constraint_set_offset
  (c-name "clutter_snap_constraint_set_offset")
  (return-type "none")
  (parameters
    '("gfloat" "offset")
  )
)

(define-function clutter_snap_constraint_get_offset
  (c-name "clutter_snap_constraint_get_offset")
  (return-type "gfloat")
  (parameters
  )
)



;; From clutter-stage.h

(define-function clutter_perspective_get_type
  (c-name "clutter_perspective_get_type")
  (return-type "GType")
)

(define-function clutter_fog_get_type
  (c-name "clutter_fog_get_type")
  (return-type "GType")
)

(define-function clutter_stage_get_type
  (c-name "clutter_stage_get_type")
  (return-type "GType")
)

(define-function clutter_stage_new
  (c-name "clutter_stage_new")
  (is-constructor-of "ClutterStage")
  (return-type "ClutterActor*")
)

(define-method set_perspective
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_perspective")
  (return-type "none")
  (parameters
    '("ClutterPerspective*" "perspective")
  )
)

(define-method get_perspective
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_perspective")
  (return-type "none")
  (parameters
    '("ClutterPerspective*" "perspective")
  )
)

(define-method set_fullscreen
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_fullscreen")
  (return-type "none")
  (parameters
    '("gboolean" "fullscreen")
  )
)

(define-method get_fullscreen
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_fullscreen")
  (return-type "gboolean")
)

(define-method show_cursor
  (of-object "ClutterStage")
  (c-name "clutter_stage_show_cursor")
  (return-type "none")
)

(define-method hide_cursor
  (of-object "ClutterStage")
  (c-name "clutter_stage_hide_cursor")
  (return-type "none")
)

(define-method set_title
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_title")
  (return-type "none")
  (parameters
    '("const-gchar*" "title")
  )
)

(define-method get_title
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_title")
  (return-type "const-gchar*")
)

(define-method set_user_resizable
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_user_resizable")
  (return-type "none")
  (parameters
    '("gboolean" "resizable")
  )
)

(define-method get_user_resizable
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_user_resizable")
  (return-type "gboolean")
)

(define-method set_minimum_size
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_minimum_size")
  (return-type "none")
  (parameters
    '("guint" "width")
    '("guint" "height")
  )
)

(define-method get_minimum_size
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_minimum_size")
  (return-type "none")
  (parameters
    '("guint*" "width")
    '("guint*" "height")
  )
)

(define-method set_no_clear_hint
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_no_clear_hint")
  (return-type "none")
  (parameters
    '("gboolean" "no_clear")
  )
)

(define-method get_no_clear_hint
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_no_clear_hint")
  (return-type "gboolean")
)

(define-method set_use_alpha
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_use_alpha")
  (return-type "none")
  (parameters
    '("gboolean" "use_alpha")
  )
)

(define-method get_use_alpha
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_use_alpha")
  (return-type "gboolean")
)

(define-method set_key_focus
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_key_focus")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method get_key_focus
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_key_focus")
  (return-type "ClutterActor*")
)

(define-method set_throttle_motion_events
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_throttle_motion_events")
  (return-type "none")
  (parameters
    '("gboolean" "throttle")
  )
)

(define-method get_throttle_motion_events
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_throttle_motion_events")
  (return-type "gboolean")
)

(define-method set_motion_events_enabled
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_motion_events_enabled")
  (return-type "none")
  (parameters
    '("gboolean" "enabled")
  )
)

(define-method get_motion_events_enabled
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_motion_events_enabled")
  (return-type "gboolean")
)

(define-method set_accept_focus
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_accept_focus")
  (return-type "none")
  (parameters
    '("gboolean" "accept_focus")
  )
)

(define-method get_accept_focus
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_accept_focus")
  (return-type "gboolean")
)

(define-method event
  (of-object "ClutterStage")
  (c-name "clutter_stage_event")
  (return-type "gboolean")
  (parameters
    '("ClutterEvent*" "event")
  )
)

(define-method get_actor_at_pos
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_actor_at_pos")
  (return-type "ClutterActor*")
  (parameters
    '("ClutterPickMode" "pick_mode")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method read_pixels
  (of-object "ClutterStage")
  (c-name "clutter_stage_read_pixels")
  (return-type "guchar*")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method get_redraw_clip_bounds
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_redraw_clip_bounds")
  (return-type "none")
  (parameters
    '("cairo_rectangle_int_t*" "clip")
  )
)

(define-method ensure_current
  (of-object "ClutterStage")
  (c-name "clutter_stage_ensure_current")
  (return-type "none")
)

(define-method ensure_viewport
  (of-object "ClutterStage")
  (c-name "clutter_stage_ensure_viewport")
  (return-type "none")
)

(define-method ensure_redraw
  (of-object "ClutterStage")
  (c-name "clutter_stage_ensure_redraw")
  (return-type "none")
)

(define-method set_sync_delay
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_sync_delay")
  (return-type "none")
  (parameters
    '("gint" "sync_delay")
  )
)

(define-method skip_sync_delay
  (of-object "ClutterStage")
  (c-name "clutter_stage_skip_sync_delay")
  (return-type "none")
)

(define-method set_paint_callback
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_paint_callback")
  (return-type "none")
  (parameters
    '("ClutterStagePaintFunc" "callback")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)



;; From clutter-stage-manager.h

(define-function clutter_stage_manager_get_type
  (c-name "clutter_stage_manager_get_type")
  (return-type "GType")
)

(define-function clutter_stage_manager_get_default
  (c-name "clutter_stage_manager_get_default")
  (return-type "ClutterStageManager*")
)

(define-method get_default_stage
  (of-object "ClutterStageManager")
  (c-name "clutter_stage_manager_get_default_stage")
  (return-type "ClutterStage*")
)

(define-method list_stages
  (of-object "ClutterStageManager")
  (c-name "clutter_stage_manager_list_stages")
  (return-type "GSList*")
)

(define-method peek_stages
  (of-object "ClutterStageManager")
  (c-name "clutter_stage_manager_peek_stages")
  (return-type "const-GSList*")
)



;; From clutter-stage-manager-private.h



;; From clutter-stage-private.h



;; From clutter-stage-window.h



;; From clutter-swipe-action.h

(define-function clutter_swipe_action_get_type
  (c-name "clutter_swipe_action_get_type")
  (return-type "GType")
)

(define-function clutter_swipe_action_new
  (c-name "clutter_swipe_action_new")
  (is-constructor-of "ClutterSwipeAction")
  (return-type "ClutterAction*")
)



;; From clutter-tap-action.h

(define-function clutter_tap_action_get_type
  (c-name "clutter_tap_action_get_type")
  (return-type "GType")
)

(define-function clutter_tap_action_new
  (c-name "clutter_tap_action_new")
  (is-constructor-of "ClutterTapAction")
  (return-type "ClutterAction*")
)



;; From clutter-test-utils.h

(define-function clutter_test_init
  (c-name "clutter_test_init")
  (return-type "none")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
  )
)

(define-function clutter_test_run
  (c-name "clutter_test_run")
  (return-type "int")
)

(define-function clutter_test_add
  (c-name "clutter_test_add")
  (return-type "none")
  (parameters
    '("const-char*" "test_path")
    '("GTestFunc" "test_func")
  )
)

(define-function clutter_test_add_data
  (c-name "clutter_test_add_data")
  (return-type "none")
  (parameters
    '("const-char*" "test_path")
    '("GTestDataFunc" "test_func")
    '("gpointer" "test_data")
  )
)

(define-function clutter_test_add_data_full
  (c-name "clutter_test_add_data_full")
  (return-type "none")
  (parameters
    '("const-char*" "test_path")
    '("GTestDataFunc" "test_func")
    '("gpointer" "test_data")
    '("GDestroyNotify" "test_notify")
  )
)

(define-function clutter_test_get_stage
  (c-name "clutter_test_get_stage")
  (return-type "ClutterActor*")
)

(define-function clutter_test_check_actor_at_point
  (c-name "clutter_test_check_actor_at_point")
  (return-type "gboolean")
  (parameters
    '("ClutterActor*" "stage")
    '("const-ClutterPoint*" "point")
    '("ClutterActor*" "actor")
    '("ClutterActor**" "result")
  )
)

(define-function clutter_test_check_color_at_point
  (c-name "clutter_test_check_color_at_point")
  (return-type "gboolean")
  (parameters
    '("ClutterActor*" "stage")
    '("const-ClutterPoint*" "point")
    '("const-ClutterColor*" "color")
    '("ClutterColor*" "result")
  )
)



;; From clutter-text-buffer.h

(define-function clutter_text_buffer_get_type
  (c-name "clutter_text_buffer_get_type")
  (return-type "GType")
)

(define-function clutter_text_buffer_new
  (c-name "clutter_text_buffer_new")
  (is-constructor-of "ClutterTextBuffer")
  (return-type "ClutterTextBuffer*")
)

(define-function clutter_text_buffer_new_with_text
  (c-name "clutter_text_buffer_new_with_text")
  (return-type "ClutterTextBuffer*")
  (parameters
    '("const-gchar*" "text")
    '("gssize" "text_len")
  )
)

(define-method get_bytes
  (of-object "ClutterTextBuffer")
  (c-name "clutter_text_buffer_get_bytes")
  (return-type "gsize")
)

(define-method get_length
  (of-object "ClutterTextBuffer")
  (c-name "clutter_text_buffer_get_length")
  (return-type "guint")
)

(define-method get_text
  (of-object "ClutterTextBuffer")
  (c-name "clutter_text_buffer_get_text")
  (return-type "const-gchar*")
)

(define-method set_text
  (of-object "ClutterTextBuffer")
  (c-name "clutter_text_buffer_set_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "chars")
    '("gint" "n_chars")
  )
)

(define-method set_max_length
  (of-object "ClutterTextBuffer")
  (c-name "clutter_text_buffer_set_max_length")
  (return-type "none")
  (parameters
    '("gint" "max_length")
  )
)

(define-method get_max_length
  (of-object "ClutterTextBuffer")
  (c-name "clutter_text_buffer_get_max_length")
  (return-type "gint")
)

(define-method insert_text
  (of-object "ClutterTextBuffer")
  (c-name "clutter_text_buffer_insert_text")
  (return-type "guint")
  (parameters
    '("guint" "position")
    '("const-gchar*" "chars")
    '("gint" "n_chars")
  )
)

(define-method delete_text
  (of-object "ClutterTextBuffer")
  (c-name "clutter_text_buffer_delete_text")
  (return-type "guint")
  (parameters
    '("guint" "position")
    '("gint" "n_chars")
  )
)

(define-method emit_inserted_text
  (of-object "ClutterTextBuffer")
  (c-name "clutter_text_buffer_emit_inserted_text")
  (return-type "none")
  (parameters
    '("guint" "position")
    '("const-gchar*" "chars")
    '("guint" "n_chars")
  )
)

(define-method emit_deleted_text
  (of-object "ClutterTextBuffer")
  (c-name "clutter_text_buffer_emit_deleted_text")
  (return-type "none")
  (parameters
    '("guint" "position")
    '("guint" "n_chars")
  )
)



;; From clutter-text.h

(define-function clutter_text_get_type
  (c-name "clutter_text_get_type")
  (return-type "GType")
)

(define-function clutter_text_new
  (c-name "clutter_text_new")
  (is-constructor-of "ClutterText")
  (return-type "ClutterActor*")
)

(define-function clutter_text_new_full
  (c-name "clutter_text_new_full")
  (return-type "ClutterActor*")
  (parameters
    '("const-gchar*" "font_name")
    '("const-gchar*" "text")
    '("const-ClutterColor*" "color")
  )
)

(define-function clutter_text_new_with_text
  (c-name "clutter_text_new_with_text")
  (return-type "ClutterActor*")
  (parameters
    '("const-gchar*" "font_name")
    '("const-gchar*" "text")
  )
)

(define-function clutter_text_new_with_buffer
  (c-name "clutter_text_new_with_buffer")
  (return-type "ClutterActor*")
  (parameters
    '("ClutterTextBuffer*" "buffer")
  )
)

(define-method get_buffer
  (of-object "ClutterText")
  (c-name "clutter_text_get_buffer")
  (return-type "ClutterTextBuffer*")
)

(define-method set_buffer
  (of-object "ClutterText")
  (c-name "clutter_text_set_buffer")
  (return-type "none")
  (parameters
    '("ClutterTextBuffer*" "buffer")
  )
)

(define-method get_text
  (of-object "ClutterText")
  (c-name "clutter_text_get_text")
  (return-type "const-gchar*")
)

(define-method set_text
  (of-object "ClutterText")
  (c-name "clutter_text_set_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method set_markup
  (of-object "ClutterText")
  (c-name "clutter_text_set_markup")
  (return-type "none")
  (parameters
    '("const-gchar*" "markup")
  )
)

(define-method set_color
  (of-object "ClutterText")
  (c-name "clutter_text_set_color")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_color
  (of-object "ClutterText")
  (c-name "clutter_text_get_color")
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method set_font_name
  (of-object "ClutterText")
  (c-name "clutter_text_set_font_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "font_name")
  )
)

(define-method get_font_name
  (of-object "ClutterText")
  (c-name "clutter_text_get_font_name")
  (return-type "const-gchar*")
)

(define-method set_font_description
  (of-object "ClutterText")
  (c-name "clutter_text_set_font_description")
  (return-type "none")
  (parameters
    '("PangoFontDescription*" "font_desc")
  )
)

(define-method get_font_description
  (of-object "ClutterText")
  (c-name "clutter_text_get_font_description")
  (return-type "PangoFontDescription*")
)

(define-method set_ellipsize
  (of-object "ClutterText")
  (c-name "clutter_text_set_ellipsize")
  (return-type "none")
  (parameters
    '("PangoEllipsizeMode" "mode")
  )
)

(define-method get_ellipsize
  (of-object "ClutterText")
  (c-name "clutter_text_get_ellipsize")
  (return-type "PangoEllipsizeMode")
)

(define-method set_line_wrap
  (of-object "ClutterText")
  (c-name "clutter_text_set_line_wrap")
  (return-type "none")
  (parameters
    '("gboolean" "line_wrap")
  )
)

(define-method get_line_wrap
  (of-object "ClutterText")
  (c-name "clutter_text_get_line_wrap")
  (return-type "gboolean")
)

(define-method set_line_wrap_mode
  (of-object "ClutterText")
  (c-name "clutter_text_set_line_wrap_mode")
  (return-type "none")
  (parameters
    '("PangoWrapMode" "wrap_mode")
  )
)

(define-method get_line_wrap_mode
  (of-object "ClutterText")
  (c-name "clutter_text_get_line_wrap_mode")
  (return-type "PangoWrapMode")
)

(define-method get_layout
  (of-object "ClutterText")
  (c-name "clutter_text_get_layout")
  (return-type "PangoLayout*")
)

(define-method set_attributes
  (of-object "ClutterText")
  (c-name "clutter_text_set_attributes")
  (return-type "none")
  (parameters
    '("PangoAttrList*" "attrs")
  )
)

(define-method get_attributes
  (of-object "ClutterText")
  (c-name "clutter_text_get_attributes")
  (return-type "PangoAttrList*")
)

(define-method set_use_markup
  (of-object "ClutterText")
  (c-name "clutter_text_set_use_markup")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_use_markup
  (of-object "ClutterText")
  (c-name "clutter_text_get_use_markup")
  (return-type "gboolean")
)

(define-method set_line_alignment
  (of-object "ClutterText")
  (c-name "clutter_text_set_line_alignment")
  (return-type "none")
  (parameters
    '("PangoAlignment" "alignment")
  )
)

(define-method get_line_alignment
  (of-object "ClutterText")
  (c-name "clutter_text_get_line_alignment")
  (return-type "PangoAlignment")
)

(define-method set_justify
  (of-object "ClutterText")
  (c-name "clutter_text_set_justify")
  (return-type "none")
  (parameters
    '("gboolean" "justify")
  )
)

(define-method get_justify
  (of-object "ClutterText")
  (c-name "clutter_text_get_justify")
  (return-type "gboolean")
)

(define-method insert_unichar
  (of-object "ClutterText")
  (c-name "clutter_text_insert_unichar")
  (return-type "none")
  (parameters
    '("gunichar" "wc")
  )
)

(define-method delete_chars
  (of-object "ClutterText")
  (c-name "clutter_text_delete_chars")
  (return-type "none")
  (parameters
    '("guint" "n_chars")
  )
)

(define-method insert_text
  (of-object "ClutterText")
  (c-name "clutter_text_insert_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("gssize" "position")
  )
)

(define-method delete_text
  (of-object "ClutterText")
  (c-name "clutter_text_delete_text")
  (return-type "none")
  (parameters
    '("gssize" "start_pos")
    '("gssize" "end_pos")
  )
)

(define-method get_chars
  (of-object "ClutterText")
  (c-name "clutter_text_get_chars")
  (return-type "gchar*")
  (parameters
    '("gssize" "start_pos")
    '("gssize" "end_pos")
  )
)

(define-method set_editable
  (of-object "ClutterText")
  (c-name "clutter_text_set_editable")
  (return-type "none")
  (parameters
    '("gboolean" "editable")
  )
)

(define-method get_editable
  (of-object "ClutterText")
  (c-name "clutter_text_get_editable")
  (return-type "gboolean")
)

(define-method set_activatable
  (of-object "ClutterText")
  (c-name "clutter_text_set_activatable")
  (return-type "none")
  (parameters
    '("gboolean" "activatable")
  )
)

(define-method get_activatable
  (of-object "ClutterText")
  (c-name "clutter_text_get_activatable")
  (return-type "gboolean")
)

(define-method get_cursor_position
  (of-object "ClutterText")
  (c-name "clutter_text_get_cursor_position")
  (return-type "gint")
)

(define-method set_cursor_position
  (of-object "ClutterText")
  (c-name "clutter_text_set_cursor_position")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
)

(define-method set_cursor_visible
  (of-object "ClutterText")
  (c-name "clutter_text_set_cursor_visible")
  (return-type "none")
  (parameters
    '("gboolean" "cursor_visible")
  )
)

(define-method get_cursor_visible
  (of-object "ClutterText")
  (c-name "clutter_text_get_cursor_visible")
  (return-type "gboolean")
)

(define-method set_cursor_color
  (of-object "ClutterText")
  (c-name "clutter_text_set_cursor_color")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_cursor_color
  (of-object "ClutterText")
  (c-name "clutter_text_get_cursor_color")
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method set_cursor_size
  (of-object "ClutterText")
  (c-name "clutter_text_set_cursor_size")
  (return-type "none")
  (parameters
    '("gint" "size")
  )
)

(define-method get_cursor_size
  (of-object "ClutterText")
  (c-name "clutter_text_get_cursor_size")
  (return-type "guint")
)

(define-method get_cursor_rect
  (of-object "ClutterText")
  (c-name "clutter_text_get_cursor_rect")
  (return-type "none")
  (parameters
    '("ClutterRect*" "rect")
  )
)

(define-method set_selectable
  (of-object "ClutterText")
  (c-name "clutter_text_set_selectable")
  (return-type "none")
  (parameters
    '("gboolean" "selectable")
  )
)

(define-method get_selectable
  (of-object "ClutterText")
  (c-name "clutter_text_get_selectable")
  (return-type "gboolean")
)

(define-method set_selection_bound
  (of-object "ClutterText")
  (c-name "clutter_text_set_selection_bound")
  (return-type "none")
  (parameters
    '("gint" "selection_bound")
  )
)

(define-method get_selection_bound
  (of-object "ClutterText")
  (c-name "clutter_text_get_selection_bound")
  (return-type "gint")
)

(define-method set_selection
  (of-object "ClutterText")
  (c-name "clutter_text_set_selection")
  (return-type "none")
  (parameters
    '("gssize" "start_pos")
    '("gssize" "end_pos")
  )
)

(define-method get_selection
  (of-object "ClutterText")
  (c-name "clutter_text_get_selection")
  (return-type "gchar*")
)

(define-method set_selection_color
  (of-object "ClutterText")
  (c-name "clutter_text_set_selection_color")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_selection_color
  (of-object "ClutterText")
  (c-name "clutter_text_get_selection_color")
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method delete_selection
  (of-object "ClutterText")
  (c-name "clutter_text_delete_selection")
  (return-type "gboolean")
)

(define-method set_password_char
  (of-object "ClutterText")
  (c-name "clutter_text_set_password_char")
  (return-type "none")
  (parameters
    '("gunichar" "wc")
  )
)

(define-method get_password_char
  (of-object "ClutterText")
  (c-name "clutter_text_get_password_char")
  (return-type "gunichar")
)

(define-method set_max_length
  (of-object "ClutterText")
  (c-name "clutter_text_set_max_length")
  (return-type "none")
  (parameters
    '("gint" "max")
  )
)

(define-method get_max_length
  (of-object "ClutterText")
  (c-name "clutter_text_get_max_length")
  (return-type "gint")
)

(define-method set_single_line_mode
  (of-object "ClutterText")
  (c-name "clutter_text_set_single_line_mode")
  (return-type "none")
  (parameters
    '("gboolean" "single_line")
  )
)

(define-method get_single_line_mode
  (of-object "ClutterText")
  (c-name "clutter_text_get_single_line_mode")
  (return-type "gboolean")
)

(define-method set_selected_text_color
  (of-object "ClutterText")
  (c-name "clutter_text_set_selected_text_color")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_selected_text_color
  (of-object "ClutterText")
  (c-name "clutter_text_get_selected_text_color")
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method activate
  (of-object "ClutterText")
  (c-name "clutter_text_activate")
  (return-type "gboolean")
)

(define-method coords_to_position
  (of-object "ClutterText")
  (c-name "clutter_text_coords_to_position")
  (return-type "gint")
  (parameters
    '("gfloat" "x")
    '("gfloat" "y")
  )
)

(define-method position_to_coords
  (of-object "ClutterText")
  (c-name "clutter_text_position_to_coords")
  (return-type "gboolean")
  (parameters
    '("gint" "position")
    '("gfloat*" "x")
    '("gfloat*" "y")
    '("gfloat*" "line_height")
  )
)

(define-method set_preedit_string
  (of-object "ClutterText")
  (c-name "clutter_text_set_preedit_string")
  (return-type "none")
  (parameters
    '("const-gchar*" "preedit_str")
    '("PangoAttrList*" "preedit_attrs")
    '("guint" "cursor_pos")
  )
)

(define-method get_layout_offsets
  (of-object "ClutterText")
  (c-name "clutter_text_get_layout_offsets")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)



;; From clutter-texture.h

(define-function clutter_texture_error_quark
  (c-name "clutter_texture_error_quark")
  (return-type "GQuark")
)

(define-function clutter_texture_get_type
  (c-name "clutter_texture_get_type")
  (return-type "GType")
)



;; From clutter-timeline.h

(define-function clutter_timeline_get_type
  (c-name "clutter_timeline_get_type")
  (return-type "GType")
)

(define-function clutter_timeline_new
  (c-name "clutter_timeline_new")
  (is-constructor-of "ClutterTimeline")
  (return-type "ClutterTimeline*")
  (parameters
    '("guint" "msecs")
  )
)

(define-method get_duration
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_duration")
  (return-type "guint")
)

(define-method set_duration
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_duration")
  (return-type "none")
  (parameters
    '("guint" "msecs")
  )
)

(define-method get_direction
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_direction")
  (return-type "ClutterTimelineDirection")
)

(define-method set_direction
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_direction")
  (return-type "none")
  (parameters
    '("ClutterTimelineDirection" "direction")
  )
)

(define-method start
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_start")
  (return-type "none")
)

(define-method pause
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_pause")
  (return-type "none")
)

(define-method stop
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_stop")
  (return-type "none")
)

(define-method set_auto_reverse
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_auto_reverse")
  (return-type "none")
  (parameters
    '("gboolean" "reverse")
  )
)

(define-method get_auto_reverse
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_auto_reverse")
  (return-type "gboolean")
)

(define-method set_repeat_count
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_repeat_count")
  (return-type "none")
  (parameters
    '("gint" "count")
  )
)

(define-method get_repeat_count
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_repeat_count")
  (return-type "gint")
)

(define-method rewind
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_rewind")
  (return-type "none")
)

(define-method skip
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_skip")
  (return-type "none")
  (parameters
    '("guint" "msecs")
  )
)

(define-method advance
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_advance")
  (return-type "none")
  (parameters
    '("guint" "msecs")
  )
)

(define-method get_elapsed_time
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_elapsed_time")
  (return-type "guint")
)

(define-method get_progress
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_progress")
  (return-type "gdouble")
)

(define-method is_playing
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_is_playing")
  (return-type "gboolean")
)

(define-method set_delay
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_delay")
  (return-type "none")
  (parameters
    '("guint" "msecs")
  )
)

(define-method get_delay
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_delay")
  (return-type "guint")
)

(define-method get_delta
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_delta")
  (return-type "guint")
)

(define-method add_marker
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_add_marker")
  (return-type "none")
  (parameters
    '("const-gchar*" "marker_name")
    '("gdouble" "progress")
  )
)

(define-method add_marker_at_time
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_add_marker_at_time")
  (return-type "none")
  (parameters
    '("const-gchar*" "marker_name")
    '("guint" "msecs")
  )
)

(define-method remove_marker
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_remove_marker")
  (return-type "none")
  (parameters
    '("const-gchar*" "marker_name")
  )
)

(define-method list_markers
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_list_markers")
  (return-type "gchar**")
  (parameters
    '("gint" "msecs")
    '("gsize*" "n_markers")
  )
)

(define-method has_marker
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_has_marker")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "marker_name")
  )
)

(define-method advance_to_marker
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_advance_to_marker")
  (return-type "none")
  (parameters
    '("const-gchar*" "marker_name")
  )
)

(define-method set_progress_func
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_progress_func")
  (return-type "none")
  (parameters
    '("ClutterTimelineProgressFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-method set_progress_mode
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_progress_mode")
  (return-type "none")
  (parameters
    '("ClutterAnimationMode" "mode")
  )
)

(define-method get_progress_mode
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_progress_mode")
  (return-type "ClutterAnimationMode")
)

(define-method set_step_progress
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_step_progress")
  (return-type "none")
  (parameters
    '("gint" "n_steps")
    '("ClutterStepMode" "step_mode")
  )
)

(define-method get_step_progress
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_step_progress")
  (return-type "gboolean")
  (parameters
    '("gint*" "n_steps")
    '("ClutterStepMode*" "step_mode")
  )
)

(define-method set_cubic_bezier_progress
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_cubic_bezier_progress")
  (return-type "none")
  (parameters
    '("const-ClutterPoint*" "c_1")
    '("const-ClutterPoint*" "c_2")
  )
)

(define-method get_cubic_bezier_progress
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_cubic_bezier_progress")
  (return-type "gboolean")
  (parameters
    '("ClutterPoint*" "c_1")
    '("ClutterPoint*" "c_2")
  )
)

(define-method get_duration_hint
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_duration_hint")
  (return-type "gint64")
)

(define-method get_current_repeat
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_current_repeat")
  (return-type "gint")
)



;; From clutter-transition-group.h

(define-function clutter_transition_group_get_type
  (c-name "clutter_transition_group_get_type")
  (return-type "GType")
)

(define-function clutter_transition_group_new
  (c-name "clutter_transition_group_new")
  (is-constructor-of "ClutterTransitionGroup")
  (return-type "ClutterTransition*")
)

(define-method add_transition
  (of-object "ClutterTransitionGroup")
  (c-name "clutter_transition_group_add_transition")
  (return-type "none")
  (parameters
    '("ClutterTransition*" "transition")
  )
)

(define-method remove_transition
  (of-object "ClutterTransitionGroup")
  (c-name "clutter_transition_group_remove_transition")
  (return-type "none")
  (parameters
    '("ClutterTransition*" "transition")
  )
)

(define-method remove_all
  (of-object "ClutterTransitionGroup")
  (c-name "clutter_transition_group_remove_all")
  (return-type "none")
)



;; From clutter-transition.h

(define-function clutter_transition_get_type
  (c-name "clutter_transition_get_type")
  (return-type "GType")
)

(define-method set_interval
  (of-object "ClutterTransition")
  (c-name "clutter_transition_set_interval")
  (return-type "none")
  (parameters
    '("ClutterInterval*" "interval")
  )
)

(define-method get_interval
  (of-object "ClutterTransition")
  (c-name "clutter_transition_get_interval")
  (return-type "ClutterInterval*")
)

(define-method set_from_value
  (of-object "ClutterTransition")
  (c-name "clutter_transition_set_from_value")
  (return-type "none")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-method set_to_value
  (of-object "ClutterTransition")
  (c-name "clutter_transition_set_to_value")
  (return-type "none")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-method set_from
  (of-object "ClutterTransition")
  (c-name "clutter_transition_set_from")
  (return-type "none")
  (parameters
    '("GType" "value_type")
  )
  (varargs #t)
)

(define-method set_to
  (of-object "ClutterTransition")
  (c-name "clutter_transition_set_to")
  (return-type "none")
  (parameters
    '("GType" "value_type")
  )
  (varargs #t)
)

(define-method set_animatable
  (of-object "ClutterTransition")
  (c-name "clutter_transition_set_animatable")
  (return-type "none")
  (parameters
    '("ClutterAnimatable*" "animatable")
  )
)

(define-method get_animatable
  (of-object "ClutterTransition")
  (c-name "clutter_transition_get_animatable")
  (return-type "ClutterAnimatable*")
)

(define-method set_remove_on_complete
  (of-object "ClutterTransition")
  (c-name "clutter_transition_set_remove_on_complete")
  (return-type "none")
  (parameters
    '("gboolean" "remove_complete")
  )
)

(define-method get_remove_on_complete
  (of-object "ClutterTransition")
  (c-name "clutter_transition_get_remove_on_complete")
  (return-type "gboolean")
)



;; From clutter-types.h

(define-function clutter_point_get_type
  (c-name "clutter_point_get_type")
  (return-type "GType")
)

(define-function clutter_point_zero
  (c-name "clutter_point_zero")
  (return-type "const-ClutterPoint*")
)

(define-function clutter_point_alloc
  (c-name "clutter_point_alloc")
  (return-type "ClutterPoint*")
)

(define-method init
  (of-object "ClutterPoint")
  (c-name "clutter_point_init")
  (return-type "ClutterPoint*")
  (parameters
    '("float" "x")
    '("float" "y")
  )
)

(define-method copy
  (of-object "ClutterPoint")
  (c-name "clutter_point_copy")
  (return-type "ClutterPoint*")
)

(define-method free
  (of-object "ClutterPoint")
  (c-name "clutter_point_free")
  (return-type "none")
)

(define-method equals
  (of-object "ClutterPoint")
  (c-name "clutter_point_equals")
  (return-type "gboolean")
  (parameters
    '("const-ClutterPoint*" "b")
  )
)

(define-method distance
  (of-object "ClutterPoint")
  (c-name "clutter_point_distance")
  (return-type "float")
  (parameters
    '("const-ClutterPoint*" "b")
    '("float*" "x_distance")
    '("float*" "y_distance")
  )
)

(define-function clutter_size_get_type
  (c-name "clutter_size_get_type")
  (return-type "GType")
)

(define-function clutter_size_alloc
  (c-name "clutter_size_alloc")
  (return-type "ClutterSize*")
)

(define-method init
  (of-object "ClutterSize")
  (c-name "clutter_size_init")
  (return-type "ClutterSize*")
  (parameters
    '("float" "width")
    '("float" "height")
  )
)

(define-method copy
  (of-object "ClutterSize")
  (c-name "clutter_size_copy")
  (return-type "ClutterSize*")
)

(define-method free
  (of-object "ClutterSize")
  (c-name "clutter_size_free")
  (return-type "none")
)

(define-method equals
  (of-object "ClutterSize")
  (c-name "clutter_size_equals")
  (return-type "gboolean")
  (parameters
    '("const-ClutterSize*" "b")
  )
)

(define-function clutter_rect_get_type
  (c-name "clutter_rect_get_type")
  (return-type "GType")
)

(define-function clutter_rect_zero
  (c-name "clutter_rect_zero")
  (return-type "const-ClutterRect*")
)

(define-function clutter_rect_alloc
  (c-name "clutter_rect_alloc")
  (return-type "ClutterRect*")
)

(define-method init
  (of-object "ClutterRect")
  (c-name "clutter_rect_init")
  (return-type "ClutterRect*")
  (parameters
    '("float" "x")
    '("float" "y")
    '("float" "width")
    '("float" "height")
  )
)

(define-method copy
  (of-object "ClutterRect")
  (c-name "clutter_rect_copy")
  (return-type "ClutterRect*")
)

(define-method free
  (of-object "ClutterRect")
  (c-name "clutter_rect_free")
  (return-type "none")
)

(define-method equals
  (of-object "ClutterRect")
  (c-name "clutter_rect_equals")
  (return-type "gboolean")
  (parameters
    '("ClutterRect*" "b")
  )
)

(define-method normalize
  (of-object "ClutterRect")
  (c-name "clutter_rect_normalize")
  (return-type "ClutterRect*")
)

(define-method get_center
  (of-object "ClutterRect")
  (c-name "clutter_rect_get_center")
  (return-type "none")
  (parameters
    '("ClutterPoint*" "center")
  )
)

(define-method contains_point
  (of-object "ClutterRect")
  (c-name "clutter_rect_contains_point")
  (return-type "gboolean")
  (parameters
    '("ClutterPoint*" "point")
  )
)

(define-method contains_rect
  (of-object "ClutterRect")
  (c-name "clutter_rect_contains_rect")
  (return-type "gboolean")
  (parameters
    '("ClutterRect*" "b")
  )
)

(define-method union
  (of-object "ClutterRect")
  (c-name "clutter_rect_union")
  (return-type "none")
  (parameters
    '("ClutterRect*" "b")
    '("ClutterRect*" "res")
  )
)

(define-method intersection
  (of-object "ClutterRect")
  (c-name "clutter_rect_intersection")
  (return-type "gboolean")
  (parameters
    '("ClutterRect*" "b")
    '("ClutterRect*" "res")
  )
)

(define-method offset
  (of-object "ClutterRect")
  (c-name "clutter_rect_offset")
  (return-type "none")
  (parameters
    '("float" "d_x")
    '("float" "d_y")
  )
)

(define-method inset
  (of-object "ClutterRect")
  (c-name "clutter_rect_inset")
  (return-type "none")
  (parameters
    '("float" "d_x")
    '("float" "d_y")
  )
)

(define-method clamp_to_pixel
  (of-object "ClutterRect")
  (c-name "clutter_rect_clamp_to_pixel")
  (return-type "none")
)

(define-method get_x
  (of-object "ClutterRect")
  (c-name "clutter_rect_get_x")
  (return-type "float")
)

(define-method get_y
  (of-object "ClutterRect")
  (c-name "clutter_rect_get_y")
  (return-type "float")
)

(define-method get_width
  (of-object "ClutterRect")
  (c-name "clutter_rect_get_width")
  (return-type "float")
)

(define-method get_height
  (of-object "ClutterRect")
  (c-name "clutter_rect_get_height")
  (return-type "float")
)

(define-function clutter_vertex_get_type
  (c-name "clutter_vertex_get_type")
  (return-type "GType")
)

(define-function clutter_vertex_new
  (c-name "clutter_vertex_new")
  (is-constructor-of "ClutterVertex")
  (return-type "ClutterVertex*")
  (parameters
    '("gfloat" "x")
    '("gfloat" "y")
    '("gfloat" "z")
  )
)

(define-function clutter_vertex_alloc
  (c-name "clutter_vertex_alloc")
  (return-type "ClutterVertex*")
)

(define-method init
  (of-object "ClutterVertex")
  (c-name "clutter_vertex_init")
  (return-type "ClutterVertex*")
  (parameters
    '("gfloat" "x")
    '("gfloat" "y")
    '("gfloat" "z")
  )
)

(define-method copy
  (of-object "ClutterVertex")
  (c-name "clutter_vertex_copy")
  (return-type "ClutterVertex*")
)

(define-method free
  (of-object "ClutterVertex")
  (c-name "clutter_vertex_free")
  (return-type "none")
)

(define-method equal
  (of-object "ClutterVertex")
  (c-name "clutter_vertex_equal")
  (return-type "gboolean")
  (parameters
    '("const-ClutterVertex*" "vertex_b")
  )
)

(define-function clutter_actor_box_get_type
  (c-name "clutter_actor_box_get_type")
  (return-type "GType")
)

(define-function clutter_actor_box_new
  (c-name "clutter_actor_box_new")
  (is-constructor-of "ClutterActorBox")
  (return-type "ClutterActorBox*")
  (parameters
    '("gfloat" "x_1")
    '("gfloat" "y_1")
    '("gfloat" "x_2")
    '("gfloat" "y_2")
  )
)

(define-function clutter_actor_box_alloc
  (c-name "clutter_actor_box_alloc")
  (return-type "ClutterActorBox*")
)

(define-method init
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_init")
  (return-type "ClutterActorBox*")
  (parameters
    '("gfloat" "x_1")
    '("gfloat" "y_1")
    '("gfloat" "x_2")
    '("gfloat" "y_2")
  )
)

(define-method init_rect
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_init_rect")
  (return-type "none")
  (parameters
    '("gfloat" "x")
    '("gfloat" "y")
    '("gfloat" "width")
    '("gfloat" "height")
  )
)

(define-method copy
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_copy")
  (return-type "ClutterActorBox*")
)

(define-method free
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_free")
  (return-type "none")
)

(define-method equal
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_equal")
  (return-type "gboolean")
  (parameters
    '("const-ClutterActorBox*" "box_b")
  )
)

(define-method get_x
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_get_x")
  (return-type "gfloat")
)

(define-method get_y
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_get_y")
  (return-type "gfloat")
)

(define-method get_width
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_get_width")
  (return-type "gfloat")
)

(define-method get_height
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_get_height")
  (return-type "gfloat")
)

(define-method get_origin
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_get_origin")
  (return-type "none")
  (parameters
    '("gfloat*" "x")
    '("gfloat*" "y")
  )
)

(define-method get_size
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_get_size")
  (return-type "none")
  (parameters
    '("gfloat*" "width")
    '("gfloat*" "height")
  )
)

(define-method get_area
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_get_area")
  (return-type "gfloat")
)

(define-method contains
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_contains")
  (return-type "gboolean")
  (parameters
    '("gfloat" "x")
    '("gfloat" "y")
  )
)

(define-method from_vertices
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_from_vertices")
  (return-type "none")
  (parameters
    '("const-ClutterVertex[]" "verts")
  )
)

(define-method interpolate
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_interpolate")
  (return-type "none")
  (parameters
    '("const-ClutterActorBox*" "final")
    '("gdouble" "progress")
    '("ClutterActorBox*" "result")
  )
)

(define-method clamp_to_pixel
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_clamp_to_pixel")
  (return-type "none")
)

(define-method union
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_union")
  (return-type "none")
  (parameters
    '("const-ClutterActorBox*" "b")
    '("ClutterActorBox*" "result")
  )
)

(define-method set_origin
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_set_origin")
  (return-type "none")
  (parameters
    '("gfloat" "x")
    '("gfloat" "y")
  )
)

(define-method set_size
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_set_size")
  (return-type "none")
  (parameters
    '("gfloat" "width")
    '("gfloat" "height")
  )
)

(define-function clutter_geometry_get_type
  (c-name "clutter_geometry_get_type")
  (return-type "GType")
)

(define-method union
  (of-object "ClutterGeometry")
  (c-name "clutter_geometry_union")
  (return-type "none")
  (parameters
    '("const-ClutterGeometry*" "geometry_b")
    '("ClutterGeometry*" "result")
  )
)

(define-method intersects
  (of-object "ClutterGeometry")
  (c-name "clutter_geometry_intersects")
  (return-type "gboolean")
  (parameters
    '("const-ClutterGeometry*" "geometry1")
  )
)

(define-function clutter_knot_get_type
  (c-name "clutter_knot_get_type")
  (return-type "GType")
)

(define-method copy
  (of-object "ClutterKnot")
  (c-name "clutter_knot_copy")
  (return-type "ClutterKnot*")
)

(define-method free
  (of-object "ClutterKnot")
  (c-name "clutter_knot_free")
  (return-type "none")
)

(define-method equal
  (of-object "ClutterKnot")
  (c-name "clutter_knot_equal")
  (return-type "gboolean")
  (parameters
    '("const-ClutterKnot*" "knot_b")
  )
)

(define-function clutter_path_node_get_type
  (c-name "clutter_path_node_get_type")
  (return-type "GType")
)

(define-method copy
  (of-object "ClutterPathNode")
  (c-name "clutter_path_node_copy")
  (return-type "ClutterPathNode*")
)

(define-method free
  (of-object "ClutterPathNode")
  (c-name "clutter_path_node_free")
  (return-type "none")
)

(define-method equal
  (of-object "ClutterPathNode")
  (c-name "clutter_path_node_equal")
  (return-type "gboolean")
  (parameters
    '("const-ClutterPathNode*" "node_b")
  )
)

(define-function clutter_paint_volume_get_type
  (c-name "clutter_paint_volume_get_type")
  (return-type "GType")
)

(define-method copy
  (of-object "ClutterPaintVolume")
  (c-name "clutter_paint_volume_copy")
  (return-type "ClutterPaintVolume*")
)

(define-method free
  (of-object "ClutterPaintVolume")
  (c-name "clutter_paint_volume_free")
  (return-type "none")
)

(define-method set_origin
  (of-object "ClutterPaintVolume")
  (c-name "clutter_paint_volume_set_origin")
  (return-type "none")
  (parameters
    '("const-ClutterVertex*" "origin")
  )
)

(define-method get_origin
  (of-object "ClutterPaintVolume")
  (c-name "clutter_paint_volume_get_origin")
  (return-type "none")
  (parameters
    '("ClutterVertex*" "vertex")
  )
)

(define-method set_width
  (of-object "ClutterPaintVolume")
  (c-name "clutter_paint_volume_set_width")
  (return-type "none")
  (parameters
    '("gfloat" "width")
  )
)

(define-method get_width
  (of-object "ClutterPaintVolume")
  (c-name "clutter_paint_volume_get_width")
  (return-type "gfloat")
)

(define-method set_height
  (of-object "ClutterPaintVolume")
  (c-name "clutter_paint_volume_set_height")
  (return-type "none")
  (parameters
    '("gfloat" "height")
  )
)

(define-method get_height
  (of-object "ClutterPaintVolume")
  (c-name "clutter_paint_volume_get_height")
  (return-type "gfloat")
)

(define-method set_depth
  (of-object "ClutterPaintVolume")
  (c-name "clutter_paint_volume_set_depth")
  (return-type "none")
  (parameters
    '("gfloat" "depth")
  )
)

(define-method get_depth
  (of-object "ClutterPaintVolume")
  (c-name "clutter_paint_volume_get_depth")
  (return-type "gfloat")
)

(define-method union
  (of-object "ClutterPaintVolume")
  (c-name "clutter_paint_volume_union")
  (return-type "none")
  (parameters
    '("const-ClutterPaintVolume*" "another_pv")
  )
)

(define-method union_box
  (of-object "ClutterPaintVolume")
  (c-name "clutter_paint_volume_union_box")
  (return-type "none")
  (parameters
    '("const-ClutterActorBox*" "box")
  )
)

(define-method set_from_allocation
  (of-object "ClutterPaintVolume")
  (c-name "clutter_paint_volume_set_from_allocation")
  (return-type "gboolean")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-function clutter_margin_get_type
  (c-name "clutter_margin_get_type")
  (return-type "GType")
)

(define-function clutter_margin_new
  (c-name "clutter_margin_new")
  (is-constructor-of "ClutterMargin")
  (return-type "ClutterMargin*")
)

(define-method copy
  (of-object "ClutterMargin")
  (c-name "clutter_margin_copy")
  (return-type "ClutterMargin*")
)

(define-method free
  (of-object "ClutterMargin")
  (c-name "clutter_margin_free")
  (return-type "none")
)

(define-function clutter_interval_register_progress_func
  (c-name "clutter_interval_register_progress_func")
  (return-type "none")
  (parameters
    '("GType" "value_type")
    '("ClutterProgressFunc" "func")
  )
)

(define-function clutter_matrix_get_type
  (c-name "clutter_matrix_get_type")
  (return-type "GType")
)

(define-function clutter_matrix_alloc
  (c-name "clutter_matrix_alloc")
  (return-type "ClutterMatrix*")
)

(define-method init_identity
  (of-object "ClutterMatrix")
  (c-name "clutter_matrix_init_identity")
  (return-type "ClutterMatrix*")
)

(define-method init_from_array
  (of-object "ClutterMatrix")
  (c-name "clutter_matrix_init_from_array")
  (return-type "ClutterMatrix*")
  (parameters
    '("const-float" "values[16]")
  )
)

(define-method init_from_matrix
  (of-object "ClutterMatrix")
  (c-name "clutter_matrix_init_from_matrix")
  (return-type "ClutterMatrix*")
  (parameters
    '("const-ClutterMatrix*" "b")
  )
)

(define-method free
  (of-object "ClutterMatrix")
  (c-name "clutter_matrix_free")
  (return-type "none")
)



;; From clutter-units.h

(define-function clutter_units_get_type
  (c-name "clutter_units_get_type")
  (return-type "GType")
)

(define-method get_unit_type
  (of-object "ClutterUnits")
  (c-name "clutter_units_get_unit_type")
  (return-type "ClutterUnitType")
)

(define-method get_unit_value
  (of-object "ClutterUnits")
  (c-name "clutter_units_get_unit_value")
  (return-type "gfloat")
)

(define-method copy
  (of-object "ClutterUnits")
  (c-name "clutter_units_copy")
  (return-type "ClutterUnits*")
)

(define-method free
  (of-object "ClutterUnits")
  (c-name "clutter_units_free")
  (return-type "none")
)

(define-method from_pixels
  (of-object "ClutterUnits")
  (c-name "clutter_units_from_pixels")
  (return-type "none")
  (parameters
    '("gint" "px")
  )
)

(define-method from_em
  (of-object "ClutterUnits")
  (c-name "clutter_units_from_em")
  (return-type "none")
  (parameters
    '("gfloat" "em")
  )
)

(define-method from_em_for_font
  (of-object "ClutterUnits")
  (c-name "clutter_units_from_em_for_font")
  (return-type "none")
  (parameters
    '("const-gchar*" "font_name")
    '("gfloat" "em")
  )
)

(define-method from_mm
  (of-object "ClutterUnits")
  (c-name "clutter_units_from_mm")
  (return-type "none")
  (parameters
    '("gfloat" "mm")
  )
)

(define-method from_cm
  (of-object "ClutterUnits")
  (c-name "clutter_units_from_cm")
  (return-type "none")
  (parameters
    '("gfloat" "cm")
  )
)

(define-method from_pt
  (of-object "ClutterUnits")
  (c-name "clutter_units_from_pt")
  (return-type "none")
  (parameters
    '("gfloat" "pt")
  )
)

(define-method to_pixels
  (of-object "ClutterUnits")
  (c-name "clutter_units_to_pixels")
  (return-type "gfloat")
)

(define-method from_string
  (of-object "ClutterUnits")
  (c-name "clutter_units_from_string")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-method to_string
  (of-object "ClutterUnits")
  (c-name "clutter_units_to_string")
  (return-type "gchar*")
)

(define-function clutter_param_units_get_type
  (c-name "clutter_param_units_get_type")
  (return-type "GType")
)

(define-function clutter_param_spec_units
  (c-name "clutter_param_spec_units")
  (return-type "GParamSpec*")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "nick")
    '("const-gchar*" "blurb")
    '("ClutterUnitType" "default_type")
    '("gfloat" "minimum")
    '("gfloat" "maximum")
    '("gfloat" "default_value")
    '("GParamFlags" "flags")
  )
)

(define-function clutter_value_set_units
  (c-name "clutter_value_set_units")
  (return-type "none")
  (parameters
    '("GValue*" "value")
    '("const-ClutterUnits*" "units")
  )
)

(define-function clutter_value_get_units
  (c-name "clutter_value_get_units")
  (return-type "const-ClutterUnits*")
  (parameters
    '("const-GValue*" "value")
  )
)



;; From clutter-version.h

(define-function clutter_check_version
  (c-name "clutter_check_version")
  (return-type "gboolean")
  (parameters
    '("guint" "major")
    '("guint" "minor")
    '("guint" "micro")
  )
)

(define-function clutter_check_windowing_backend
  (c-name "clutter_check_windowing_backend")
  (return-type "gboolean")
  (parameters
    '("const-char*" "backend_type")
  )
)



;; From clutter-zoom-action.h

(define-function clutter_zoom_action_get_type
  (c-name "clutter_zoom_action_get_type")
  (return-type "GType")
)

(define-function clutter_zoom_action_new
  (c-name "clutter_zoom_action_new")
  (is-constructor-of "ClutterZoomAction")
  (return-type "ClutterAction*")
)

(define-method set_zoom_axis
  (of-object "ClutterZoomAction")
  (c-name "clutter_zoom_action_set_zoom_axis")
  (return-type "none")
  (parameters
    '("ClutterZoomAxis" "axis")
  )
)

(define-method get_zoom_axis
  (of-object "ClutterZoomAction")
  (c-name "clutter_zoom_action_get_zoom_axis")
  (return-type "ClutterZoomAxis")
)

(define-method get_focal_point
  (of-object "ClutterZoomAction")
  (c-name "clutter_zoom_action_get_focal_point")
  (return-type "none")
  (parameters
    '("ClutterPoint*" "point")
  )
)

(define-method get_transformed_focal_point
  (of-object "ClutterZoomAction")
  (c-name "clutter_zoom_action_get_transformed_focal_point")
  (return-type "none")
  (parameters
    '("ClutterPoint*" "point")
  )
)



;; From config.h


