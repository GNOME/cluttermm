<root>
<signal name="ClutterActor::allocation-changed">
<description>
The ::allocation-changed signal is emitted when the
#ClutterActor:allocation property changes. Usually, application
code should just use the notifications for the :allocation property
but if you want to track the allocation flags as well, for instance
to know whether the absolute origin of @actor changed, then you might
want use this signal instead.



</description>
<parameters>
<parameter name="actor">
<parameter_description> the #ClutterActor that emitted the signal
</parameter_description>
</parameter>
<parameter name="box">
<parameter_description> a #ClutterActorBox with the new allocation
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #ClutterAllocationFlags for the allocation
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterActor::button-press-event">
<description>
The ::button-press-event signal is emitted each time a mouse button
is pressed on @actor.


</description>
<parameters>
<parameter name="actor">
<parameter_description> the actor which received the event
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterButtonEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event has been handled by the actor,
or %FALSE to continue the emission.


</return>
</signal>

<signal name="ClutterActor::button-release-event">
<description>
The ::button-release-event signal is emitted each time a mouse button
is released on @actor.


</description>
<parameters>
<parameter name="actor">
<parameter_description> the actor which received the event
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterButtonEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event has been handled by the actor,
or %FALSE to continue the emission.


</return>
</signal>

<signal name="ClutterActor::captured-event">
<description>
The ::captured-event signal is emitted when an event is captured
by Clutter. This signal will be emitted starting from the top-level
container (the #ClutterStage) to the actor which received the event
going down the hierarchy. This signal can be used to intercept every
event before the specialized events (like
ClutterActor::button-press-event or ::key-released-event) are
emitted.


</description>
<parameters>
<parameter name="actor">
<parameter_description> the actor which received the signal
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event has been handled by the actor,
or %FALSE to continue the emission.


</return>
</signal>

<signal name="ClutterActor::destroy">
<description>
The ::destroy signal notifies that all references held on the
actor which emitted it should be released.

The ::destroy signal should be used by all holders of a reference
on @actor.

This signal might result in the finalization of the #ClutterActor
if all references are released.

Composite actors and actors implementing the #ClutterContainer
interface should override the default implementation of the
class handler of this signal and call clutter_actor_destroy() on
their children. When overriding the default class handler, it is
required to chain up to the parent's implementation.



</description>
<parameters>
<parameter name="actor">
<parameter_description> the #ClutterActor which emitted the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterActor::enter-event">
<description>
The ::enter-event signal is emitted when the pointer enters the @actor


</description>
<parameters>
<parameter name="actor">
<parameter_description> the actor which the pointer has entered.
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterCrossingEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event has been handled by the actor,
or %FALSE to continue the emission.


</return>
</signal>

<signal name="ClutterActor::event">
<description>
The ::event signal is emitted each time an event is received
by the @actor. This signal will be emitted on every actor,
following the hierarchy chain, until it reaches the top-level
container (the #ClutterStage).


</description>
<parameters>
<parameter name="actor">
<parameter_description> the actor which received the event
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event has been handled by the actor,
or %FALSE to continue the emission.


</return>
</signal>

<signal name="ClutterActor::hide">
<description>
The ::hide signal is emitted when an actor is no longer rendered
on the stage.



</description>
<parameters>
<parameter name="actor">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterActor::key-focus-in">
<description>
The ::key-focus-in signal is emitted when @actor receives key focus.



</description>
<parameters>
<parameter name="actor">
<parameter_description> the actor which now has key focus
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterActor::key-focus-out">
<description>
The ::key-focus-out signal is emitted when @actor loses key focus.



</description>
<parameters>
<parameter name="actor">
<parameter_description> the actor which now has key focus
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterActor::key-press-event">
<description>
The ::key-press-event signal is emitted each time a keyboard button
is pressed while @actor has key focus (see clutter_stage_set_key_focus()).


</description>
<parameters>
<parameter name="actor">
<parameter_description> the actor which received the event
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterKeyEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event has been handled by the actor,
or %FALSE to continue the emission.


</return>
</signal>

<signal name="ClutterActor::key-release-event">
<description>
The ::key-release-event signal is emitted each time a keyboard button
is released while @actor has key focus (see
clutter_stage_set_key_focus()).


</description>
<parameters>
<parameter name="actor">
<parameter_description> the actor which received the event
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterKeyEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event has been handled by the actor,
or %FALSE to continue the emission.


</return>
</signal>

<signal name="ClutterActor::leave-event">
<description>
The ::leave-event signal is emitted when the pointer leaves the @actor.


</description>
<parameters>
<parameter name="actor">
<parameter_description> the actor which the pointer has left
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterCrossingEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event has been handled by the actor,
or %FALSE to continue the emission.


</return>
</signal>

<signal name="ClutterActor::motion-event">
<description>
The ::motion-event signal is emitted each time the mouse pointer is
moved over @actor.


</description>
<parameters>
<parameter name="actor">
<parameter_description> the actor which received the event
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterMotionEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event has been handled by the actor,
or %FALSE to continue the emission.


</return>
</signal>

<signal name="ClutterActor::parent-set">
<description>
This signal is emitted when the parent of the actor changes.



</description>
<parameters>
<parameter name="actor">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
<parameter name="old_parent">
<parameter_description> the previous parent of the actor, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterActor::queue-redraw">
<description>
The ::queue_redraw signal is emitted when clutter_actor_queue_redraw()
is called on @origin.

The default implementation for #ClutterActor chains up to the
parent actor and queues a redraw on the parent, thus &quot;bubbling&quot;
the redraw queue up through the actor graph. The default
implementation for #ClutterStage queues a clutter_stage_ensure_redraw()
in a main loop idle handler.

Note that the @origin actor may be the stage, or a container; it
does not have to be a leaf node in the actor graph.

Toolkits embedding a #ClutterStage which require a redraw and
relayout cycle can stop the emission of this signal using the
GSignal API, redraw the UI and then call clutter_stage_ensure_redraw()
themselves, like:

|[
static void
on_redraw_complete (gpointer data)
{
ClutterStage *stage = data;

/ * execute the Clutter drawing pipeline * /
clutter_stage_ensure_redraw (stage);
}

static void
on_stage_queue_redraw (ClutterStage *stage)
{
/ * this prevents the default handler to run * /
g_signal_stop_emission_by_name (stage, &quot;queue-redraw&quot;);

/ * queue a redraw with the host toolkit and call
* a function when the redraw has been completed
* /
queue_a_redraw (G_CALLBACK (on_redraw_complete), stage);
}
]|

&lt;note&gt;&lt;para&gt;This signal is emitted before the Clutter paint
pipeline is executed. If you want to know when the pipeline has
been completed you should connect to the ::paint signal on the
Stage with g_signal_connect_after().&lt;/para&gt;&lt;/note&gt;



</description>
<parameters>
<parameter name="actor">
<parameter_description> the actor we're bubbling the redraw request through
</parameter_description>
</parameter>
<parameter name="origin">
<parameter_description> the actor which initiated the redraw request
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterActor::queue-relayout">
<description>
The ::queue_layout signal is emitted when clutter_actor_queue_relayout()
is called on an actor.

The default implementation for #ClutterActor chains up to the
parent actor and queues a relayout on the parent, thus &quot;bubbling&quot;
the relayout queue up through the actor graph.

The main purpose of this signal is to allow relayout to be propagated
properly in the procense of #ClutterClone actors. Applications will
not normally need to connect to this signal.



</description>
<parameters>
<parameter name="actor">
<parameter_description> the actor being queued for relayout
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterActor::realize">
<description>
The ::realize signal is emitted each time an actor is being
realized.



</description>
<parameters>
<parameter name="actor">
<parameter_description> the #ClutterActor that received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterActor::scroll-event">
<description>
The ::scroll-event signal is emitted each time the mouse is
scrolled on @actor


</description>
<parameters>
<parameter name="actor">
<parameter_description> the actor which received the event
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterScrollEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event has been handled by the actor,
or %FALSE to continue the emission.


</return>
</signal>

<signal name="ClutterActor::show">
<description>
The ::show signal is emitted when an actor is visible and
rendered on the stage.



</description>
<parameters>
<parameter name="actor">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterActor::touch-event">
<description>
The ::touch-event signal is emitted each time a touch
begin/end/update/cancel event.



</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterActor::transition-stopped">
<description>
The ::transition-stopped signal is emitted once a transition
is stopped; a transition is stopped once it reached its total
duration (including eventual repeats), it has been stopped
using clutter_timeline_stop(), or it has been removed from the
transitions applied on @actor, using clutter_actor_remove_transition().



</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the transition
</parameter_description>
</parameter>
<parameter name="is_finished">
<parameter_description> whether the transition was finished, or stopped
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterActor::transitions-completed">
<description>
The ::transitions-completed signal is emitted once all transitions
involving @actor are complete.



</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterActor::unrealize">
<description>
The ::unrealize signal is emitted each time an actor is being
unrealized.



</description>
<parameters>
<parameter name="actor">
<parameter_description> the #ClutterActor that received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="ClutterActorAlign">
<description>
Controls how a #ClutterActor should align itself inside the extra space
assigned to it during the allocation.

Alignment only matters if the allocated space given to an actor is
bigger than its natural size; for example, when the #ClutterActor:x-expand
or the #ClutterActor:y-expand properties of #ClutterActor are set to %TRUE.



</description>
<parameters>
<parameter name="CLUTTER_ACTOR_ALIGN_FILL">
<parameter_description> Stretch to cover the whole allocated space
</parameter_description>
</parameter>
<parameter name="CLUTTER_ACTOR_ALIGN_START">
<parameter_description> Snap to left or top side, leaving space
to the right or bottom. For horizontal layouts, in right-to-left
locales this should be reversed.
</parameter_description>
</parameter>
<parameter name="CLUTTER_ACTOR_ALIGN_CENTER">
<parameter_description> Center the actor inside the allocation
</parameter_description>
</parameter>
<parameter name="CLUTTER_ACTOR_ALIGN_END">
<parameter_description> Snap to right or bottom side, leaving space
to the left or top. For horizontal layouts, in right-to-left locales
this should be reversed.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterActorFlags">
<description>
Flags used to signal the state of an actor.

</description>
<parameters>
<parameter name="CLUTTER_ACTOR_MAPPED">
<parameter_description> the actor will be painted (is visible, and inside
a toplevel, and all parents visible)
</parameter_description>
</parameter>
<parameter name="CLUTTER_ACTOR_REALIZED">
<parameter_description> the resources associated to the actor have been
allocated
</parameter_description>
</parameter>
<parameter name="CLUTTER_ACTOR_REACTIVE">
<parameter_description> the actor 'reacts' to mouse events emmitting event
signals
</parameter_description>
</parameter>
<parameter name="CLUTTER_ACTOR_VISIBLE">
<parameter_description> the actor has been shown by the application program
</parameter_description>
</parameter>
<parameter name="CLUTTER_ACTOR_NO_LAYOUT">
<parameter_description> the actor provides an explicit layout management
policy for its children; this flag will prevent Clutter from automatic
queueing of relayout and will defer all layouting to the actor itself
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterAlignAxis">
<description>
Specifies the axis on which #ClutterAlignConstraint should maintain
the alignment.



</description>
<parameters>
<parameter name="CLUTTER_ALIGN_X_AXIS">
<parameter_description> Maintain the alignment on the X axis
</parameter_description>
</parameter>
<parameter name="CLUTTER_ALIGN_Y_AXIS">
<parameter_description> Maintain the alignment on the Y axis
</parameter_description>
</parameter>
<parameter name="CLUTTER_ALIGN_BOTH">
<parameter_description> Maintain the alignment on both the X and Y axis
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterAllocationFlags">
<description>
Flags passed to the #ClutterActorClass.allocate() virtual function
and to the clutter_actor_allocate() function.



</description>
<parameters>
<parameter name="CLUTTER_ALLOCATION_NONE">
<parameter_description> No flag set
</parameter_description>
</parameter>
<parameter name="CLUTTER_ABSOLUTE_ORIGIN_CHANGED">
<parameter_description> Whether the absolute origin of the
actor has changed; this implies that any ancestor of the actor has
been moved.
</parameter_description>
</parameter>
<parameter name="CLUTTER_DELEGATE_LAYOUT">
<parameter_description> Whether the allocation should be delegated
to the #ClutterLayoutManager instance stored inside the
#ClutterActor:layout-manager property of #ClutterActor. This flag
should only be used if you are subclassing #ClutterActor and
overriding the #ClutterActorClass.allocate() virtual function, but
you wish to use the default implementation of the virtual function
inside #ClutterActor. Added in Clutter 1.10.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterAnimationMode">
<description>
The animation modes used by #ClutterTimeline.

This enumeration can be expanded in later versions of Clutter.

&lt;figure id=&quot;easing-modes&quot;&gt;
&lt;title&gt;Easing modes provided by Clutter&lt;/title&gt;
&lt;graphic fileref=&quot;easing-modes.png&quot; format=&quot;PNG&quot;/&gt;
&lt;/figure&gt;

</description>
<parameters>
<parameter name="CLUTTER_CUSTOM_MODE">
<parameter_description> custom progress function
</parameter_description>
</parameter>
<parameter name="CLUTTER_LINEAR">
<parameter_description> linear tweening
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_QUAD">
<parameter_description> quadratic tweening
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_OUT_QUAD">
<parameter_description> quadratic tweening, inverse of
%CLUTTER_EASE_IN_QUAD
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_OUT_QUAD">
<parameter_description> quadratic tweening, combininig
%CLUTTER_EASE_IN_QUAD and %CLUTTER_EASE_OUT_QUAD
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_CUBIC">
<parameter_description> cubic tweening
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_OUT_CUBIC">
<parameter_description> cubic tweening, invers of
%CLUTTER_EASE_IN_CUBIC
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_OUT_CUBIC">
<parameter_description> cubic tweening, combining
%CLUTTER_EASE_IN_CUBIC and %CLUTTER_EASE_OUT_CUBIC
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_QUART">
<parameter_description> quartic tweening
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_OUT_QUART">
<parameter_description> quartic tweening, inverse of
%CLUTTER_EASE_IN_QUART
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_OUT_QUART">
<parameter_description> quartic tweening, combining
%CLUTTER_EASE_IN_QUART and %CLUTTER_EASE_OUT_QUART
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_QUINT">
<parameter_description> quintic tweening
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_OUT_QUINT">
<parameter_description> quintic tweening, inverse of
%CLUTTER_EASE_IN_QUINT
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_OUT_QUINT">
<parameter_description> fifth power tweening, combining
%CLUTTER_EASE_IN_QUINT and %CLUTTER_EASE_OUT_QUINT
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_SINE">
<parameter_description> sinusoidal tweening
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_OUT_SINE">
<parameter_description> sinusoidal tweening, inverse of
%CLUTTER_EASE_IN_SINE
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_OUT_SINE">
<parameter_description> sine wave tweening, combining
%CLUTTER_EASE_IN_SINE and %CLUTTER_EASE_OUT_SINE
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_EXPO">
<parameter_description> exponential tweening
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_OUT_EXPO">
<parameter_description> exponential tweening, inverse of
%CLUTTER_EASE_IN_EXPO
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_OUT_EXPO">
<parameter_description> exponential tweening, combining
%CLUTTER_EASE_IN_EXPO and %CLUTTER_EASE_OUT_EXPO
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_CIRC">
<parameter_description> circular tweening
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_OUT_CIRC">
<parameter_description> circular tweening, inverse of
%CLUTTER_EASE_IN_CIRC
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_OUT_CIRC">
<parameter_description> circular tweening, combining
%CLUTTER_EASE_IN_CIRC and %CLUTTER_EASE_OUT_CIRC
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_ELASTIC">
<parameter_description> elastic tweening, with offshoot on start
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_OUT_ELASTIC">
<parameter_description> elastic tweening, with offshoot on end
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_OUT_ELASTIC">
<parameter_description> elastic tweening with offshoot on both ends
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_BACK">
<parameter_description> overshooting cubic tweening, with
backtracking on start
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_OUT_BACK">
<parameter_description> overshooting cubic tweening, with
backtracking on end
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_OUT_BACK">
<parameter_description> overshooting cubic tweening, with
backtracking on both ends
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_BOUNCE">
<parameter_description> exponentially decaying parabolic (bounce)
tweening, with bounce on start
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_OUT_BOUNCE">
<parameter_description> exponentially decaying parabolic (bounce)
tweening, with bounce on end
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_OUT_BOUNCE">
<parameter_description> exponentially decaying parabolic (bounce)
tweening, with bounce on both ends
</parameter_description>
</parameter>
<parameter name="CLUTTER_STEPS">
<parameter_description> parametrized step function; see clutter_timeline_set_step_progress()
for further details.
</parameter_description>
</parameter>
<parameter name="CLUTTER_STEP_START">
<parameter_description> equivalent to %CLUTTER_STEPS with a number of steps
equal to 1, and a step mode of %CLUTTER_STEP_MODE_START.
</parameter_description>
</parameter>
<parameter name="CLUTTER_STEP_END">
<parameter_description> equivalent to %CLUTTER_STEPS with a number of steps
equal to 1, and a step mode of %CLUTTER_STEP_MODE_END.
</parameter_description>
</parameter>
<parameter name="CLUTTER_CUBIC_BEZIER">
<parameter_description> cubic bezier between (0, 0) and (1, 1) with two
control points; see clutter_timeline_set_cubic_bezier_progress().
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE">
<parameter_description> equivalent to %CLUTTER_CUBIC_BEZIER with control points
in (0.25, 0.1) and (0.25, 1.0).
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN">
<parameter_description> equivalent to %CLUTTER_CUBIC_BEZIER with control points
in (0.42, 0) and (1.0, 1.0).
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_OUT">
<parameter_description> equivalent to %CLUTTER_CUBIC_BEZIER with control points
in (0, 0) and (0.58, 1.0).
</parameter_description>
</parameter>
<parameter name="CLUTTER_EASE_IN_OUT">
<parameter_description> equivalent to %CLUTTER_CUBIC_BEZIER with control points
in (0.42, 0) and (0.58, 1.0).
</parameter_description>
</parameter>
<parameter name="CLUTTER_ANIMATION_LAST">
<parameter_description> last animation mode, used as a guard when enumerating
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterBackend::font-changed">
<description>
The ::font-changed signal is emitted each time the font options
have been changed through #ClutterSettings.



</description>
<parameters>
<parameter name="backend">
<parameter_description> the #ClutterBackend that emitted the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterBackend::resolution-changed">
<description>
The ::resolution-changed signal is emitted each time the font
resolutions has been changed through #ClutterSettings.



</description>
<parameters>
<parameter name="backend">
<parameter_description> the #ClutterBackend that emitted the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterBackend::settings-changed">
<description>
The ::settings-changed signal is emitted each time the #ClutterSettings
properties have been changed.



</description>
<parameters>
<parameter name="backend">
<parameter_description> the #ClutterBackend that emitted the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="ClutterBindCoordinate">
<description>
Specifies which property should be used in a binding



</description>
<parameters>
<parameter name="CLUTTER_BIND_X">
<parameter_description> Bind the X coordinate
</parameter_description>
</parameter>
<parameter name="CLUTTER_BIND_Y">
<parameter_description> Bind the Y coordinate
</parameter_description>
</parameter>
<parameter name="CLUTTER_BIND_WIDTH">
<parameter_description> Bind the width
</parameter_description>
</parameter>
<parameter name="CLUTTER_BIND_HEIGHT">
<parameter_description> Bind the height
</parameter_description>
</parameter>
<parameter name="CLUTTER_BIND_POSITION">
<parameter_description> Equivalent to to %CLUTTER_BIND_X and
%CLUTTER_BIND_Y (added in Clutter 1.6)
</parameter_description>
</parameter>
<parameter name="CLUTTER_BIND_SIZE">
<parameter_description> Equivalent to %CLUTTER_BIND_WIDTH and
%CLUTTER_BIND_HEIGHT (added in Clutter 1.6)
</parameter_description>
</parameter>
<parameter name="CLUTTER_BIND_ALL">
<parameter_description> Equivalent to %CLUTTER_BIND_POSITION and
%CLUTTER_BIND_SIZE (added in Clutter 1.10)
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterCanvas::draw">
<description>
The #ClutterCanvas::draw signal is emitted each time a canvas is
invalidated.

It is safe to connect multiple handlers to this signal: each
handler invocation will be automatically protected by cairo_save()
and cairo_restore() pairs.


</description>
<parameters>
<parameter name="canvas">
<parameter_description> the #ClutterCanvas that emitted the signal
</parameter_description>
</parameter>
<parameter name="cr">
<parameter_description> the Cairo context used to draw
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the @canvas
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the @canvas
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the signal emission should stop, and
%FALSE otherwise


</return>
</signal>

<enum name="ClutterCex100BufferingMode">
<description>
Enum passed to clutter_cex100_set_buffering_mode().

Since: 1.6

</description>
<parameters>
<parameter name="CLUTTER_CEX100_DOUBLE_BUFFERING">
<parameter_description> The GDL plane will be double buffered
</parameter_description>
</parameter>
<parameter name="CLUTTER_CEX100_TRIPLE_BUFFERING">
<parameter_description> The GDL plane will be triple buffered
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterClickAction::clicked">
<description>
The ::clicked signal is emitted when the #ClutterActor to which
a #ClutterClickAction has been applied should respond to a
pointer button press and release events



</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterClickAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the @action
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterClickAction::long-press">
<description>
The ::long-press signal is emitted during the long press gesture
handling.

This signal can be emitted multiple times with different states.

The %CLUTTER_LONG_PRESS_QUERY state will be emitted on button presses,
and its return value will determine whether the long press handling
should be initiated. If the signal handlers will return %TRUE, the
%CLUTTER_LONG_PRESS_QUERY state will be followed either by a signal
emission with the %CLUTTER_LONG_PRESS_ACTIVATE state if the long press
constraints were respected, or by a signal emission with the
%CLUTTER_LONG_PRESS_CANCEL state if the long press was cancelled.

It is possible to forcibly cancel a long press detection using
clutter_click_action_release().


</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterClickAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the @action
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the long press state
</parameter_description>
</parameter>
</parameters>
<return> Only the %CLUTTER_LONG_PRESS_QUERY state uses the
returned value of the handler; other states will ignore it


</return>
</signal>

<signal name="ClutterContainer::actor-added">
<description>
The ::actor-added signal is emitted each time an actor
has been added to @container.



</description>
<parameters>
<parameter name="container">
<parameter_description> the actor which received the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the new child that has been added to @container
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterContainer::actor-removed">
<description>
The ::actor-removed signal is emitted each time an actor
is removed from @container.



</description>
<parameters>
<parameter name="container">
<parameter_description> the actor which received the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the child that has been removed from @container
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterContainer::child-notify">
<description>
The ::child-notify signal is emitted each time a property is
being set through the clutter_container_child_set() and
clutter_container_child_set_property() calls.



</description>
<parameters>
<parameter name="container">
<parameter_description> the container which received the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the child that has had a property set
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> the #GParamSpec of the property set
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterContent::attached">
<description>
This signal is emitted each time a #ClutterContent implementation is
assigned to a #ClutterActor.



</description>
<parameters>
<parameter name="content">
<parameter_description> the object that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterContent::detached">
<description>
This signal is emitted each time a #ClutterContent implementation is
removed from a #ClutterActor.



</description>
<parameters>
<parameter name="content">
<parameter_description> the object that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="ClutterContentGravity">
<description>
Controls the alignment of the #ClutterContent inside a #ClutterActor.



</description>
<parameters>
<parameter name="CLUTTER_CONTENT_GRAVITY_TOP_LEFT">
<parameter_description> Align the content to the top left corner
</parameter_description>
</parameter>
<parameter name="CLUTTER_CONTENT_GRAVITY_TOP">
<parameter_description> Align the content to the top edge
</parameter_description>
</parameter>
<parameter name="CLUTTER_CONTENT_GRAVITY_TOP_RIGHT">
<parameter_description> Align the content to the top right corner
</parameter_description>
</parameter>
<parameter name="CLUTTER_CONTENT_GRAVITY_LEFT">
<parameter_description> Align the content to the left edge
</parameter_description>
</parameter>
<parameter name="CLUTTER_CONTENT_GRAVITY_CENTER">
<parameter_description> Align the content to the center
</parameter_description>
</parameter>
<parameter name="CLUTTER_CONTENT_GRAVITY_RIGHT">
<parameter_description> Align the content to the right edge
</parameter_description>
</parameter>
<parameter name="CLUTTER_CONTENT_GRAVITY_BOTTOM_LEFT">
<parameter_description> Align the content to the bottom left corner
</parameter_description>
</parameter>
<parameter name="CLUTTER_CONTENT_GRAVITY_BOTTOM">
<parameter_description> Align the content to the bottom edge
</parameter_description>
</parameter>
<parameter name="CLUTTER_CONTENT_GRAVITY_BOTTOM_RIGHT">
<parameter_description> Align the content to the bottom right corner
</parameter_description>
</parameter>
<parameter name="CLUTTER_CONTENT_GRAVITY_RESIZE_FILL">
<parameter_description> Resize the content to fill the allocation
</parameter_description>
</parameter>
<parameter name="CLUTTER_CONTENT_GRAVITY_RESIZE_ASPECT">
<parameter_description> Resize the content to remain within the
allocation, while maintaining the aspect ratio
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterContentRepeat">
<description>
Content repeat modes.



</description>
<parameters>
<parameter name="CLUTTER_REPEAT_NONE">
<parameter_description> No repeat
</parameter_description>
</parameter>
<parameter name="CLUTTER_REPEAT_X_AXIS">
<parameter_description> Repeat the content on the X axis
</parameter_description>
</parameter>
<parameter name="CLUTTER_REPEAT_Y_AXIS">
<parameter_description> Repeat the content on the Y axis
</parameter_description>
</parameter>
<parameter name="CLUTTER_REPEAT_BOTH">
<parameter_description> Repeat the content on both axis
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterDeviceManager::device-added">
<description>
The ::device-added signal is emitted each time a device has been
added to the #ClutterDeviceManager



</description>
<parameters>
<parameter name="manager">
<parameter_description> the #ClutterDeviceManager that emitted the signal
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> the newly added #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterDeviceManager::device-removed">
<description>
The ::device-removed signal is emitted each time a device has been
removed from the #ClutterDeviceManager



</description>
<parameters>
<parameter name="manager">
<parameter_description> the #ClutterDeviceManager that emitted the signal
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> the removed #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterDragAction::drag-begin">
<description>
The ::drag-begin signal is emitted when the #ClutterDragAction
starts the dragging

The emission of this signal can be delayed by using the
#ClutterDragAction:x-drag-threshold and
#ClutterDragAction:y-drag-threshold properties



</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterDragAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the action
</parameter_description>
</parameter>
<parameter name="event_x">
<parameter_description> the X coordinate (in stage space) of the press event
</parameter_description>
</parameter>
<parameter name="event_y">
<parameter_description> the Y coordinate (in stage space) of the press event
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> the modifiers of the press event
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterDragAction::drag-end">
<description>
The ::drag-end signal is emitted at the end of the dragging,
when the pointer button's is released

This signal is emitted if and only if the #ClutterDragAction::drag-begin
signal has been emitted first



</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterDragAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the action
</parameter_description>
</parameter>
<parameter name="event_x">
<parameter_description> the X coordinate (in stage space) of the release event
</parameter_description>
</parameter>
<parameter name="event_y">
<parameter_description> the Y coordinate (in stage space) of the release event
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> the modifiers of the release event
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterDragAction::drag-motion">
<description>
The ::drag-motion signal is emitted for each motion event after
the #ClutterDragAction::drag-begin signal has been emitted.

The components of the distance between the press event and the
latest motion event are computed in the actor's coordinate space,
to take into account eventual transformations. If you want the
stage coordinates of the latest motion event you can use
clutter_drag_action_get_motion_coords().

The default handler of the signal will call clutter_actor_move_by()
either on @actor or, if set, of #ClutterDragAction:drag-handle using
the @delta_x and @delta_y components of the dragging motion. If you
want to override the default behaviour, you can connect to the
#ClutterDragAction::drag-progress signal and return %FALSE from the
handler.



</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterDragAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the action
</parameter_description>
</parameter>
<parameter name="delta_x">
<parameter_description> the X component of the distance between the press event
that began the dragging and the current position of the pointer,
as of the latest motion event
</parameter_description>
</parameter>
<parameter name="delta_y">
<parameter_description> the Y component of the distance between the press event
that began the dragging and the current position of the pointer,
as of the latest motion event
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterDragAction::drag-progress">
<description>
The ::drag-progress signal is emitted for each motion event after
the #ClutterDragAction::drag-begin signal has been emitted.

The components of the distance between the press event and the
latest motion event are computed in the actor's coordinate space,
to take into account eventual transformations. If you want the
stage coordinates of the latest motion event you can use
clutter_drag_action_get_motion_coords().

The default handler will emit #ClutterDragAction::drag-motion,
if #ClutterDragAction::drag-progress emission returns %TRUE.


</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterDragAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the action
</parameter_description>
</parameter>
<parameter name="delta_x">
<parameter_description> the X component of the distance between the press event
that began the dragging and the current position of the pointer,
as of the latest motion event
</parameter_description>
</parameter>
<parameter name="delta_y">
<parameter_description> the Y component of the distance between the press event
that began the dragging and the current position of the pointer,
as of the latest motion event
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the drag should continue, and %FALSE
if it should be stopped.


</return>
</signal>

<enum name="ClutterDragAxis">
<description>
The axis of the constraint that should be applied on the
dragging action



</description>
<parameters>
<parameter name="CLUTTER_DRAG_AXIS_NONE">
<parameter_description> No constraint
</parameter_description>
</parameter>
<parameter name="CLUTTER_DRAG_X_AXIS">
<parameter_description> Set a constraint on the X axis
</parameter_description>
</parameter>
<parameter name="CLUTTER_DRAG_Y_AXIS">
<parameter_description> Set a constraint on the Y axis
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterDropAction::can-drop">
<description>
The ::can-drop signal is emitted when the dragged actor is dropped
on @actor. The return value of the ::can-drop signal will determine
whether or not the #ClutterDropAction::drop signal is going to be
emitted on @action.

The default implementation of #ClutterDropAction returns %TRUE for
this signal.


</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterDropAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the @action
</parameter_description>
</parameter>
<parameter name="event_x">
<parameter_description> the X coordinate (in stage space) of the drop event
</parameter_description>
</parameter>
<parameter name="event_y">
<parameter_description> the Y coordinate (in stage space) of the drop event
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the drop is accepted, and %FALSE otherwise


</return>
</signal>

<signal name="ClutterDropAction::drop">
<description>
The ::drop signal is emitted when the dragged actor is dropped
on @actor. This signal is only emitted if at least an handler of
#ClutterDropAction::can-drop returns %TRUE.



</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterDropAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the @action
</parameter_description>
</parameter>
<parameter name="event_x">
<parameter_description> the X coordinate (in stage space) of the drop event
</parameter_description>
</parameter>
<parameter name="event_y">
<parameter_description> the Y coordinate (in stage space) of the drop event
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterDropAction::drop-cancel">
<description>
The ::drop-cancel signal is emitted when the drop is refused
by an emission of the #ClutterDropAction::can-drop signal.

After the ::drop-cancel signal is fired the active drag is
terminated.



</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterDropAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the @action
</parameter_description>
</parameter>
<parameter name="event_x">
<parameter_description> the X coordinate (in stage space) of the drop event
</parameter_description>
</parameter>
<parameter name="event_y">
<parameter_description> the Y coordinate (in stage space) of the drop event
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterDropAction::over-in">
<description>
The ::over-in signal is emitted when the dragged actor crosses
into @actor.



</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterDropAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the @action
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterDropAction::over-out">
<description>
The ::over-out signal is emitted when the dragged actor crosses
outside @actor.



</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterDropAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the @action
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="ClutterEffectPaintFlags">
<description>
Flags passed to the ‘paint’ or ‘pick’ method of #ClutterEffect.

</description>
<parameters>
<parameter name="CLUTTER_EFFECT_PAINT_ACTOR_DIRTY">
<parameter_description> The actor or one of its children
has queued a redraw before this paint. This implies that the effect
should call clutter_actor_continue_paint() to chain to the next
effect and can not cache any results from a previous paint.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterEventFlags">
<description>
Flags for the #ClutterEvent



</description>
<parameters>
<parameter name="CLUTTER_EVENT_NONE">
<parameter_description> No flag set
</parameter_description>
</parameter>
<parameter name="CLUTTER_EVENT_FLAG_SYNTHETIC">
<parameter_description> Synthetic event
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterEventType">
<description>
Types of events.



</description>
<parameters>
<parameter name="CLUTTER_NOTHING">
<parameter_description> Empty event
</parameter_description>
</parameter>
<parameter name="CLUTTER_KEY_PRESS">
<parameter_description> Key press event
</parameter_description>
</parameter>
<parameter name="CLUTTER_KEY_RELEASE">
<parameter_description> Key release event
</parameter_description>
</parameter>
<parameter name="CLUTTER_MOTION">
<parameter_description> Pointer motion event
</parameter_description>
</parameter>
<parameter name="CLUTTER_ENTER">
<parameter_description> Actor enter event
</parameter_description>
</parameter>
<parameter name="CLUTTER_LEAVE">
<parameter_description> Actor leave event
</parameter_description>
</parameter>
<parameter name="CLUTTER_BUTTON_PRESS">
<parameter_description> Pointer button press event
</parameter_description>
</parameter>
<parameter name="CLUTTER_BUTTON_RELEASE">
<parameter_description> Pointer button release event
</parameter_description>
</parameter>
<parameter name="CLUTTER_SCROLL">
<parameter_description> Pointer scroll event
</parameter_description>
</parameter>
<parameter name="CLUTTER_STAGE_STATE">
<parameter_description> Stage state change event
</parameter_description>
</parameter>
<parameter name="CLUTTER_DESTROY_NOTIFY">
<parameter_description> Destroy notification event
</parameter_description>
</parameter>
<parameter name="CLUTTER_CLIENT_MESSAGE">
<parameter_description> Client message event
</parameter_description>
</parameter>
<parameter name="CLUTTER_DELETE">
<parameter_description> Stage delete event
</parameter_description>
</parameter>
<parameter name="CLUTTER_TOUCH_BEGIN">
<parameter_description> A new touch event sequence has started;
event added in 1.10
</parameter_description>
</parameter>
<parameter name="CLUTTER_TOUCH_UPDATE">
<parameter_description> A touch event sequence has been updated;
event added in 1.10
</parameter_description>
</parameter>
<parameter name="CLUTTER_TOUCH_END">
<parameter_description> A touch event sequence has finished;
event added in 1.10
</parameter_description>
</parameter>
<parameter name="CLUTTER_TOUCH_CANCEL">
<parameter_description> A touch event sequence has been canceled;
event added in 1.10
</parameter_description>
</parameter>
<parameter name="CLUTTER_EVENT_LAST">
<parameter_description> Marks the end of the #ClutterEventType enumeration;
added in 1.10
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterFeatureFlags">
<description>
Runtime flags indicating specific features available via Clutter window
sysytem and graphics backend.



</description>
<parameters>
<parameter name="CLUTTER_FEATURE_TEXTURE_NPOT">
<parameter_description> Set if NPOTS textures supported.
</parameter_description>
</parameter>
<parameter name="CLUTTER_FEATURE_SYNC_TO_VBLANK">
<parameter_description> Set if vblank syncing supported.
</parameter_description>
</parameter>
<parameter name="CLUTTER_FEATURE_TEXTURE_YUV">
<parameter_description> Set if YUV based textures supported.
</parameter_description>
</parameter>
<parameter name="CLUTTER_FEATURE_TEXTURE_READ_PIXELS">
<parameter_description> Set if texture pixels can be read.
</parameter_description>
</parameter>
<parameter name="CLUTTER_FEATURE_STAGE_STATIC">
<parameter_description> Set if stage size if fixed (i.e framebuffer)
</parameter_description>
</parameter>
<parameter name="CLUTTER_FEATURE_STAGE_USER_RESIZE">
<parameter_description> Set if stage is able to be user resized.
</parameter_description>
</parameter>
<parameter name="CLUTTER_FEATURE_STAGE_CURSOR">
<parameter_description> Set if stage has a graphical cursor.
</parameter_description>
</parameter>
<parameter name="CLUTTER_FEATURE_SHADERS_GLSL">
<parameter_description> Set if the backend supports GLSL shaders.
</parameter_description>
</parameter>
<parameter name="CLUTTER_FEATURE_OFFSCREEN">
<parameter_description> Set if the backend supports offscreen rendering.
</parameter_description>
</parameter>
<parameter name="CLUTTER_FEATURE_STAGE_MULTIPLE">
<parameter_description> Set if multiple stages are supported.
</parameter_description>
</parameter>
<parameter name="CLUTTER_FEATURE_SWAP_EVENTS">
<parameter_description> Set if the GLX_INTEL_swap_event is supported.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterFlowOrientation">
<description>
The direction of the arrangement of the children inside
a #ClutterFlowLayout



</description>
<parameters>
<parameter name="CLUTTER_FLOW_HORIZONTAL">
<parameter_description> Arrange the children of the flow layout
horizontally first
</parameter_description>
</parameter>
<parameter name="CLUTTER_FLOW_VERTICAL">
<parameter_description> Arrange the children of the flow layout
vertically first
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterGestureAction::gesture-begin">
<description>
The ::gesture_begin signal is emitted when the #ClutterActor to which
a #ClutterGestureAction has been applied starts receiving a gesture.


</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterGestureAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the @action
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the gesture should start, and %FALSE if
the gesture should be ignored.


</return>
</signal>

<signal name="ClutterGestureAction::gesture-cancel">
<description>
The ::gesture-cancel signal is emitted when the ongoing gesture gets
cancelled from the #ClutterGestureAction::gesture-progress signal handler.

This signal is emitted if and only if the #ClutterGestureAction::gesture-begin
signal has been emitted first.



</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterGestureAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the @action
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterGestureAction::gesture-end">
<description>
The ::gesture-end signal is emitted at the end of the gesture gesture,
when the pointer's button is released

This signal is emitted if and only if the #ClutterGestureAction::gesture-begin
signal has been emitted first.



</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterGestureAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the @action
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterGestureAction::gesture-progress">
<description>
The ::gesture-progress signal is emitted for each motion event after
the #ClutterGestureAction::gesture-begin signal has been emitted.


</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterGestureAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the @action
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the gesture should continue, and %FALSE if
the gesture should be cancelled.


</return>
</signal>

<enum name="ClutterGridPosition">
<description>
Grid position modes.



</description>
<parameters>
<parameter name="CLUTTER_GRID_POSITION_LEFT">
<parameter_description> left position
</parameter_description>
</parameter>
<parameter name="CLUTTER_GRID_POSITION_RIGHT">
<parameter_description> right position
</parameter_description>
</parameter>
<parameter name="CLUTTER_GRID_POSITION_TOP">
<parameter_description> top position
</parameter_description>
</parameter>
<parameter name="CLUTTER_GRID_POSITION_BOTTOM">
<parameter_description> bottom position
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterImageError">
<description>
Error enumeration for #ClutterImage.



</description>
<parameters>
<parameter name="CLUTTER_IMAGE_ERROR_INVALID_DATA">
<parameter_description> Invalid data passed to the
clutter_image_set_data() function.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterInitError">
<description>
Error conditions returned by clutter_init() and clutter_init_with_args().



</description>
<parameters>
<parameter name="CLUTTER_INIT_SUCCESS">
<parameter_description> Initialisation successful
</parameter_description>
</parameter>
<parameter name="CLUTTER_INIT_ERROR_UNKNOWN">
<parameter_description> Unknown error
</parameter_description>
</parameter>
<parameter name="CLUTTER_INIT_ERROR_THREADS">
<parameter_description> Thread initialisation failed
</parameter_description>
</parameter>
<parameter name="CLUTTER_INIT_ERROR_BACKEND">
<parameter_description> Backend initialisation failed
</parameter_description>
</parameter>
<parameter name="CLUTTER_INIT_ERROR_INTERNAL">
<parameter_description> Internal error
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterInputAxis">
<description>
The type of axes Clutter recognizes on a #ClutterInputDevice



</description>
<parameters>
<parameter name="CLUTTER_INPUT_AXIS_IGNORE">
<parameter_description> Unused axis
</parameter_description>
</parameter>
<parameter name="CLUTTER_INPUT_AXIS_X">
<parameter_description> The position on the X axis
</parameter_description>
</parameter>
<parameter name="CLUTTER_INPUT_AXIS_Y">
<parameter_description> The position of the Y axis
</parameter_description>
</parameter>
<parameter name="CLUTTER_INPUT_AXIS_PRESSURE">
<parameter_description> The pressure information
</parameter_description>
</parameter>
<parameter name="CLUTTER_INPUT_AXIS_XTILT">
<parameter_description> The tilt on the X axis
</parameter_description>
</parameter>
<parameter name="CLUTTER_INPUT_AXIS_YTILT">
<parameter_description> The tile on the Y axis
</parameter_description>
</parameter>
<parameter name="CLUTTER_INPUT_AXIS_WHEEL">
<parameter_description> A wheel
</parameter_description>
</parameter>
<parameter name="CLUTTER_INPUT_AXIS_DISTANCE">
<parameter_description> Distance (Since 1.12)
</parameter_description>
</parameter>
<parameter name="CLUTTER_INPUT_AXIS_LAST">
<parameter_description> Last value of the enumeration; this value is
useful when iterating over the enumeration values (Since 1.12)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterInputDeviceType">
<description>
The types of input devices available.

The #ClutterInputDeviceType enumeration can be extended at later
date; not every platform supports every input device type.



</description>
<parameters>
<parameter name="CLUTTER_POINTER_DEVICE">
<parameter_description> A pointer device
</parameter_description>
</parameter>
<parameter name="CLUTTER_KEYBOARD_DEVICE">
<parameter_description> A keyboard device
</parameter_description>
</parameter>
<parameter name="CLUTTER_EXTENSION_DEVICE">
<parameter_description> A generic extension device
</parameter_description>
</parameter>
<parameter name="CLUTTER_JOYSTICK_DEVICE">
<parameter_description> A joystick device
</parameter_description>
</parameter>
<parameter name="CLUTTER_TABLET_DEVICE">
<parameter_description> A tablet device
</parameter_description>
</parameter>
<parameter name="CLUTTER_TOUCHPAD_DEVICE">
<parameter_description> A touchpad device
</parameter_description>
</parameter>
<parameter name="CLUTTER_TOUCHSCREEN_DEVICE">
<parameter_description> A touch screen device
</parameter_description>
</parameter>
<parameter name="CLUTTER_PEN_DEVICE">
<parameter_description> A pen device
</parameter_description>
</parameter>
<parameter name="CLUTTER_ERASER_DEVICE">
<parameter_description> An eraser device
</parameter_description>
</parameter>
<parameter name="CLUTTER_CURSOR_DEVICE">
<parameter_description> A cursor device
</parameter_description>
</parameter>
<parameter name="CLUTTER_N_DEVICE_TYPES">
<parameter_description> The number of device types
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterInputMode">
<description>
The mode for input devices available.



</description>
<parameters>
<parameter name="CLUTTER_INPUT_MODE_MASTER">
<parameter_description> A master, virtual device
</parameter_description>
</parameter>
<parameter name="CLUTTER_INPUT_MODE_SLAVE">
<parameter_description> A slave, physical device, attached to
a master device
</parameter_description>
</parameter>
<parameter name="CLUTTER_INPUT_MODE_FLOATING">
<parameter_description> A slave, physical device, not attached
to a master device
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterLayoutManager::layout-changed">
<description>
The ::layout-changed signal is emitted each time a layout manager
has been changed. Every #ClutterActor using the @manager instance
as a layout manager should connect a handler to the ::layout-changed
signal and queue a relayout on themselves:

|[
static void layout_changed (ClutterLayoutManager *manager,
ClutterActor         *self)
{
clutter_actor_queue_relayout (self);
}
...
self-&gt;manager = g_object_ref_sink (manager);
g_signal_connect (self-&gt;manager, &quot;layout-changed&quot;,
G_CALLBACK (layout_changed),
self);
]|

Sub-classes of #ClutterLayoutManager that implement a layout that
can be controlled or changed using parameters should emit the
::layout-changed signal whenever one of the parameters changes,
by using clutter_layout_manager_layout_changed().



</description>
<parameters>
<parameter name="manager">
<parameter_description> the #ClutterLayoutManager that emitted the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="ClutterLongPressState">
<description>
The states for the #ClutterClickAction::long-press signal.



</description>
<parameters>
<parameter name="CLUTTER_LONG_PRESS_QUERY">
<parameter_description> Queries the action whether it supports
long presses
</parameter_description>
</parameter>
<parameter name="CLUTTER_LONG_PRESS_ACTIVATE">
<parameter_description> Activates the action on a long press
</parameter_description>
</parameter>
<parameter name="CLUTTER_LONG_PRESS_CANCEL">
<parameter_description> The long press was cancelled
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterModel::filter-changed">
<description>
The ::filter-changed signal is emitted when a new filter has been applied



</description>
<parameters>
<parameter name="model">
<parameter_description> the #ClutterModel on which the signal is emitted   
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterModel::row-added">
<description>
The ::row-added signal is emitted when a new row has been added.
The data on the row has already been set when the ::row-added signal
has been emitted.



</description>
<parameters>
<parameter name="model">
<parameter_description> the #ClutterModel on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #ClutterModelIter pointing to the new row
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterModel::row-changed">
<description>
The ::row-removed signal is emitted when a row has been changed.
The data on the row has already been updated when the ::row-changed
signal has been emitted.



</description>
<parameters>
<parameter name="model">
<parameter_description> the #ClutterModel on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #ClutterModelIter pointing to the changed row
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterModel::row-removed">
<description>
The ::row-removed signal is emitted when a row has been removed.
The data on the row pointed by the passed iterator is still valid
when the ::row-removed signal has been emitted.



</description>
<parameters>
<parameter name="model">
<parameter_description> the #ClutterModel on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #ClutterModelIter pointing to the removed row
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterModel::sort-changed">
<description>
The ::sort-changed signal is emitted after the model has been sorted



</description>
<parameters>
<parameter name="model">
<parameter_description> the #ClutterModel on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="ClutterModifierType">
<description>
Masks applied to a #ClutterEvent by modifiers.

Note that Clutter may add internal values to events which include
reserved values such as %CLUTTER_MODIFIER_RESERVED_13_MASK.  Your code
should preserve and ignore them.  You can use %CLUTTER_MODIFIER_MASK to
remove all reserved values.



</description>
<parameters>
<parameter name="CLUTTER_SHIFT_MASK">
<parameter_description> Mask applied by the Shift key
</parameter_description>
</parameter>
<parameter name="CLUTTER_LOCK_MASK">
<parameter_description> Mask applied by the Caps Lock key
</parameter_description>
</parameter>
<parameter name="CLUTTER_CONTROL_MASK">
<parameter_description> Mask applied by the Control key
</parameter_description>
</parameter>
<parameter name="CLUTTER_MOD1_MASK">
<parameter_description> Mask applied by the first Mod key
</parameter_description>
</parameter>
<parameter name="CLUTTER_MOD2_MASK">
<parameter_description> Mask applied by the second Mod key
</parameter_description>
</parameter>
<parameter name="CLUTTER_MOD3_MASK">
<parameter_description> Mask applied by the third Mod key
</parameter_description>
</parameter>
<parameter name="CLUTTER_MOD4_MASK">
<parameter_description> Mask applied by the fourth Mod key
</parameter_description>
</parameter>
<parameter name="CLUTTER_MOD5_MASK">
<parameter_description> Mask applied by the fifth Mod key
</parameter_description>
</parameter>
<parameter name="CLUTTER_BUTTON1_MASK">
<parameter_description> Mask applied by the first pointer button
</parameter_description>
</parameter>
<parameter name="CLUTTER_BUTTON2_MASK">
<parameter_description> Mask applied by the second pointer button
</parameter_description>
</parameter>
<parameter name="CLUTTER_BUTTON3_MASK">
<parameter_description> Mask applied by the third pointer button
</parameter_description>
</parameter>
<parameter name="CLUTTER_BUTTON4_MASK">
<parameter_description> Mask applied by the fourth pointer button
</parameter_description>
</parameter>
<parameter name="CLUTTER_BUTTON5_MASK">
<parameter_description> Mask applied by the fifth pointer button
</parameter_description>
</parameter>
<parameter name="CLUTTER_SUPER_MASK">
<parameter_description> Mask applied by the Super key
</parameter_description>
</parameter>
<parameter name="CLUTTER_HYPER_MASK">
<parameter_description> Mask applied by the Hyper key
</parameter_description>
</parameter>
<parameter name="CLUTTER_META_MASK">
<parameter_description> Mask applied by the Meta key
</parameter_description>
</parameter>
<parameter name="CLUTTER_RELEASE_MASK">
<parameter_description> Mask applied during release
</parameter_description>
</parameter>
<parameter name="CLUTTER_MODIFIER_MASK">
<parameter_description> A mask covering all modifier types
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterOffscreenRedirect">
<description>
Possible flags to pass to clutter_actor_set_offscreen_redirect().



</description>
<parameters>
<parameter name="CLUTTER_OFFSCREEN_REDIRECT_AUTOMATIC_FOR_OPACITY">
<parameter_description> Only redirect
the actor if it is semi-transparent and its has_overlaps()
virtual returns %TRUE. This is the default.
</parameter_description>
</parameter>
<parameter name="CLUTTER_OFFSCREEN_REDIRECT_ALWAYS">
<parameter_description> Always redirect the actor to an
offscreen buffer even if it is fully opaque.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterOrientation">
<description>
Represents the orientation of actors or layout managers.



</description>
<parameters>
<parameter name="CLUTTER_ORIENTATION_HORIZONTAL">
<parameter_description> An horizontal orientation
</parameter_description>
</parameter>
<parameter name="CLUTTER_ORIENTATION_VERTICAL">
<parameter_description> A vertical orientation
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterPanAction::pan">
<description>
The ::pan signal is emitted to keep track of the motion during
a pan gesture. @is_interpolated is set to %TRUE during the
interpolation phase of the pan, after the drag has ended and
the :interpolate property was set to %TRUE.


</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterPanAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the @action
</parameter_description>
</parameter>
<parameter name="is_interpolated">
<parameter_description> if the event is the result of interpolating
the motion velocity at the end of the drag
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the pan should continue, and %FALSE if
the pan should be cancelled.
</return>
</signal>

<signal name="ClutterPanAction::pan-stopped">
<description>
The ::pan-stopped signal is emitted at the end of the interpolation
phase of the pan action, only when :interpolate is set to %TRUE.

</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterPanAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the @action
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="ClutterPanAxis">
<description>
The axis of the constraint that should be applied on the
panning action

</description>
<parameters>
<parameter name="CLUTTER_PAN_AXIS_NONE">
<parameter_description> No constraint
</parameter_description>
</parameter>
<parameter name="CLUTTER_PAN_X_AXIS">
<parameter_description> Set a constraint on the X axis
</parameter_description>
</parameter>
<parameter name="CLUTTER_PAN_Y_AXIS">
<parameter_description> Set a constraint on the Y axis
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterPathConstraint::node-reached">
<description>
The ::node-reached signal is emitted each time a
#ClutterPathConstraint:offset value results in the actor
passing a #ClutterPathNode



</description>
<parameters>
<parameter name="constraint">
<parameter_description> the #ClutterPathConstraint that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor using the @constraint
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> the index of the node that has been reached
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="ClutterPathNodeType">
<description>
Types of nodes in a #ClutterPath.

</description>
<parameters>
<parameter name="CLUTTER_PATH_MOVE_TO">
<parameter_description> jump to the given position
</parameter_description>
</parameter>
<parameter name="CLUTTER_PATH_LINE_TO">
<parameter_description> create a line from the last node to the
given position
</parameter_description>
</parameter>
<parameter name="CLUTTER_PATH_CURVE_TO">
<parameter_description> bezier curve using the last position and
three control points.
</parameter_description>
</parameter>
<parameter name="CLUTTER_PATH_CLOSE">
<parameter_description> create a line from the last node to the last
%CLUTTER_PATH_MOVE_TO node.
</parameter_description>
</parameter>
<parameter name="CLUTTER_PATH_REL_MOVE_TO">
<parameter_description> same as %CLUTTER_PATH_MOVE_TO but with
coordinates relative to the last node.
</parameter_description>
</parameter>
<parameter name="CLUTTER_PATH_REL_LINE_TO">
<parameter_description> same as %CLUTTER_PATH_LINE_TO but with
coordinates relative to the last node.
</parameter_description>
</parameter>
<parameter name="CLUTTER_PATH_REL_CURVE_TO">
<parameter_description> same as %CLUTTER_PATH_CURVE_TO but with
coordinates relative to the last node.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterPickMode">
<description>
Controls the paint cycle of the scene graph when in pick mode



</description>
<parameters>
<parameter name="CLUTTER_PICK_NONE">
<parameter_description> Do not paint any actor
</parameter_description>
</parameter>
<parameter name="CLUTTER_PICK_REACTIVE">
<parameter_description> Paint only the reactive actors
</parameter_description>
</parameter>
<parameter name="CLUTTER_PICK_ALL">
<parameter_description> Paint all actors
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterRepaintFlags">
<description>
Flags to pass to clutter_threads_add_repaint_func_full().



</description>
<parameters>
<parameter name="CLUTTER_REPAINT_FLAGS_PRE_PAINT">
<parameter_description> Run the repaint function prior to
painting the stages
</parameter_description>
</parameter>
<parameter name="CLUTTER_REPAINT_FLAGS_POST_PAINT">
<parameter_description> Run the repaint function after
painting the stages
</parameter_description>
</parameter>
<parameter name="CLUTTER_REPAINT_FLAGS_QUEUE_REDRAW_ON_ADD">
<parameter_description> Ensure that a new frame
is queued after adding the repaint function
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterRequestMode">
<description>
Specifies the type of requests for a #ClutterActor.

</description>
<parameters>
<parameter name="CLUTTER_REQUEST_HEIGHT_FOR_WIDTH">
<parameter_description> Height for width requests
</parameter_description>
</parameter>
<parameter name="CLUTTER_REQUEST_WIDTH_FOR_HEIGHT">
<parameter_description> Width for height requests
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterRotateAction::rotate">
<description>
The ::rotate signal is emitted when a rotate gesture is
recognized on the attached actor and when the gesture is
cancelled (in this case with an angle value of 0).


</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterRotateAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the @action
</parameter_description>
</parameter>
<parameter name="angle">
<parameter_description> the difference of angle of rotation between the initial
rotation and the current rotation
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the rotation should continue, and %FALSE if
the rotation should be cancelled.


</return>
</signal>

<enum name="ClutterRotateAxis">
<description>
Axis of a rotation.

</description>
<parameters>
<parameter name="CLUTTER_X_AXIS">
<parameter_description> Rotate around the X axis
</parameter_description>
</parameter>
<parameter name="CLUTTER_Y_AXIS">
<parameter_description> Rotate around the Y axis
</parameter_description>
</parameter>
<parameter name="CLUTTER_Z_AXIS">
<parameter_description> Rotate around the Z axis
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterScalingFilter">
<description>
The scaling filters to be used with the #ClutterActor:minification-filter
and #ClutterActor:magnification-filter properties.



</description>
<parameters>
<parameter name="CLUTTER_SCALING_FILTER_LINEAR">
<parameter_description> Linear interpolation filter
</parameter_description>
</parameter>
<parameter name="CLUTTER_SCALING_FILTER_NEAREST">
<parameter_description> Nearest neighbor interpolation filter
</parameter_description>
</parameter>
<parameter name="CLUTTER_SCALING_FILTER_TRILINEAR">
<parameter_description> Trilinear minification filter, with
mipmap generation; this filter linearly interpolates on every axis,
as well as between mipmap levels.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterScriptError">
<description>
#ClutterScript error enumeration.



</description>
<parameters>
<parameter name="CLUTTER_SCRIPT_ERROR_INVALID_TYPE_FUNCTION">
<parameter_description> Type function not found
or invalid
</parameter_description>
</parameter>
<parameter name="CLUTTER_SCRIPT_ERROR_INVALID_PROPERTY">
<parameter_description> Property not found or invalid
</parameter_description>
</parameter>
<parameter name="CLUTTER_SCRIPT_ERROR_INVALID_VALUE">
<parameter_description> Invalid value
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterScrollDirection">
<description>
Direction of a pointer scroll event.

The %CLUTTER_SCROLL_SMOOTH value implies that the #ClutterScrollEvent
has precise scrolling delta information.



</description>
<parameters>
<parameter name="CLUTTER_SCROLL_UP">
<parameter_description> Scroll up
</parameter_description>
</parameter>
<parameter name="CLUTTER_SCROLL_DOWN">
<parameter_description> Scroll down
</parameter_description>
</parameter>
<parameter name="CLUTTER_SCROLL_LEFT">
<parameter_description> Scroll left
</parameter_description>
</parameter>
<parameter name="CLUTTER_SCROLL_RIGHT">
<parameter_description> Scroll right
</parameter_description>
</parameter>
<parameter name="CLUTTER_SCROLL_SMOOTH">
<parameter_description> Precise scrolling delta (available in 1.10)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterScrollMode">
<description>
Scroll modes.



</description>
<parameters>
<parameter name="CLUTTER_SCROLL_NONE">
<parameter_description> Ignore scrolling
</parameter_description>
</parameter>
<parameter name="CLUTTER_SCROLL_HORIZONTALLY">
<parameter_description> Scroll only horizontally
</parameter_description>
</parameter>
<parameter name="CLUTTER_SCROLL_VERTICALLY">
<parameter_description> Scroll only vertically
</parameter_description>
</parameter>
<parameter name="CLUTTER_SCROLL_BOTH">
<parameter_description> Scroll in both directions
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterShaderType">
<description>
The type of GLSL shader program



</description>
<parameters>
<parameter name="CLUTTER_VERTEX_SHADER">
<parameter_description> a vertex shader
</parameter_description>
</parameter>
<parameter name="CLUTTER_FRAGMENT_SHADER">
<parameter_description> a fragment shader
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterSnapEdge">
<description>
The edge to snap



</description>
<parameters>
<parameter name="CLUTTER_SNAP_EDGE_TOP">
<parameter_description> the top edge
</parameter_description>
</parameter>
<parameter name="CLUTTER_SNAP_EDGE_RIGHT">
<parameter_description> the right edge
</parameter_description>
</parameter>
<parameter name="CLUTTER_SNAP_EDGE_BOTTOM">
<parameter_description> the bottom edge
</parameter_description>
</parameter>
<parameter name="CLUTTER_SNAP_EDGE_LEFT">
<parameter_description> the left edge
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterStage::activate">
<description>
The ::activate signal is emitted when the stage receives key focus
from the underlying window system.



</description>
<parameters>
<parameter name="stage">
<parameter_description> the stage which was activated
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterStage::deactivate">
<description>
The ::activate signal is emitted when the stage loses key focus
from the underlying window system.



</description>
<parameters>
<parameter name="stage">
<parameter_description> the stage which was deactivated
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterStage::delete-event">
<description>
The ::delete-event signal is emitted when the user closes a
#ClutterStage window using the window controls.

Clutter by default will call clutter_main_quit() if @stage is
the default stage, and clutter_actor_destroy() for any other
stage.

It is possible to override the default behaviour by connecting
a new handler and returning %TRUE there.

&lt;note&gt;This signal is emitted only on Clutter backends that
embed #ClutterStage in native windows. It is not emitted for
backends that use a static frame buffer.&lt;/note&gt;



</description>
<parameters>
<parameter name="stage">
<parameter_description> the stage that received the event
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_DELETE
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterStage::fullscreen">
<description>
The ::fullscreen signal is emitted when the stage is made fullscreen.



</description>
<parameters>
<parameter name="stage">
<parameter_description> the stage which was fullscreened
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterStage::unfullscreen">
<description>
The ::unfullscreen signal is emitted when the stage leaves a fullscreen
state.



</description>
<parameters>
<parameter name="stage">
<parameter_description> the stage which has left a fullscreen state.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterStageManager::stage-added">
<description>
The ::stage-added signal is emitted each time a new #ClutterStage
has been added to the stage manager.



</description>
<parameters>
<parameter name="stage_manager">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
<parameter name="stage">
<parameter_description> the added stage
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterStageManager::stage-removed">
<description>
The ::stage-removed signal is emitted each time a #ClutterStage
has been removed from the stage manager.



</description>
<parameters>
<parameter name="stage_manager">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
<parameter name="stage">
<parameter_description> the removed stage
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="ClutterStageState">
<description>
Stage state masks, used by the #ClutterEvent of type %CLUTTER_STAGE_STATE.



</description>
<parameters>
<parameter name="CLUTTER_STAGE_STATE_FULLSCREEN">
<parameter_description> Fullscreen mask
</parameter_description>
</parameter>
<parameter name="CLUTTER_STAGE_STATE_OFFSCREEN">
<parameter_description> Offscreen mask (deprecated)
</parameter_description>
</parameter>
<parameter name="CLUTTER_STAGE_STATE_ACTIVATED">
<parameter_description> Activated mask
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterStaticColor">
<description>
Named colors, for accessing global colors defined by Clutter



</description>
<parameters>
<parameter name="CLUTTER_COLOR_WHITE">
<parameter_description> White color (ffffffff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_BLACK">
<parameter_description> Black color (000000ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_RED">
<parameter_description> Red color (ff0000ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_DARK_RED">
<parameter_description> Dark red color (800000ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_GREEN">
<parameter_description> Green color (00ff00ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_DARK_GREEN">
<parameter_description> Dark green color (008000ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_BLUE">
<parameter_description> Blue color (0000ffff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_DARK_BLUE">
<parameter_description> Dark blue color (000080ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_CYAN">
<parameter_description> Cyan color (00ffffff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_DARK_CYAN">
<parameter_description> Dark cyan color (008080ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_MAGENTA">
<parameter_description> Magenta color (ff00ffff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_DARK_MAGENTA">
<parameter_description> Dark magenta color (800080ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_YELLOW">
<parameter_description> Yellow color (ffff00ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_DARK_YELLOW">
<parameter_description> Dark yellow color (808000ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_GRAY">
<parameter_description> Gray color (a0a0a4ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_DARK_GRAY">
<parameter_description> Dark Gray color (808080ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_LIGHT_GRAY">
<parameter_description> Light gray color (c0c0c0ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_BUTTER">
<parameter_description> Butter color (edd400ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_BUTTER_LIGHT">
<parameter_description> Light butter color (fce94fff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_BUTTER_DARK">
<parameter_description> Dark butter color (c4a000ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_ORANGE">
<parameter_description> Orange color (f57900ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_ORANGE_LIGHT">
<parameter_description> Light orange color (fcaf3fff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_ORANGE_DARK">
<parameter_description> Dark orange color (ce5c00ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_CHOCOLATE">
<parameter_description> Chocolate color (c17d11ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_CHOCOLATE_LIGHT">
<parameter_description> Light chocolate color (e9b96eff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_CHOCOLATE_DARK">
<parameter_description> Dark chocolate color (8f5902ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_CHAMELEON">
<parameter_description> Chameleon color (73d216ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_CHAMELEON_LIGHT">
<parameter_description> Light chameleon color (8ae234ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_CHAMELEON_DARK">
<parameter_description> Dark chameleon color (4e9a06ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_SKY_BLUE">
<parameter_description> Sky color (3465a4ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_SKY_BLUE_LIGHT">
<parameter_description> Light sky color (729fcfff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_SKY_BLUE_DARK">
<parameter_description> Dark sky color (204a87ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_PLUM">
<parameter_description> Plum color (75507bff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_PLUM_LIGHT">
<parameter_description> Light plum color (ad7fa8ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_PLUM_DARK">
<parameter_description> Dark plum color (5c3566ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_SCARLET_RED">
<parameter_description> Scarlet red color (cc0000ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_SCARLET_RED_LIGHT">
<parameter_description> Light scarlet red color (ef2929ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_SCARLET_RED_DARK">
<parameter_description> Dark scarlet red color (a40000ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_ALUMINIUM_1">
<parameter_description> Aluminium, first variant (eeeeecff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_ALUMINIUM_2">
<parameter_description> Aluminium, second variant (d3d7cfff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_ALUMINIUM_3">
<parameter_description> Aluminium, third variant (babdb6ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_ALUMINIUM_4">
<parameter_description> Aluminium, fourth variant (888a85ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_ALUMINIUM_5">
<parameter_description> Aluminium, fifth variant (555753ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_ALUMINIUM_6">
<parameter_description> Aluminium, sixth variant (2e3436ff)
</parameter_description>
</parameter>
<parameter name="CLUTTER_COLOR_TRANSPARENT">
<parameter_description> Transparent color (00000000)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterStepMode">
<description>
Change the value transition of a step function.

See clutter_timeline_set_step_progress().



</description>
<parameters>
<parameter name="CLUTTER_STEP_MODE_START">
<parameter_description> The change in the value of a
%CLUTTER_STEP progress mode should occur at the start of
the transition
</parameter_description>
</parameter>
<parameter name="CLUTTER_STEP_MODE_END">
<parameter_description> The change in the value of a
%CLUTTER_STEP progress mode should occur at the end of
the transition
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterSwipeAction::swipe">
<description>
The ::swipe signal is emitted when a swipe gesture is recognized on the
attached actor.


</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterSwipeAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the @action
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the main direction of the swipe gesture
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the swipe should continue, and %FALSE if
the swipe should be cancelled.
</return>
</signal>

<enum name="ClutterSwipeDirection">
<description>
The main direction of the swipe gesture



</description>
<parameters>
<parameter name="CLUTTER_SWIPE_DIRECTION_UP">
<parameter_description> Upwards swipe gesture
</parameter_description>
</parameter>
<parameter name="CLUTTER_SWIPE_DIRECTION_DOWN">
<parameter_description> Downwards swipe gesture
</parameter_description>
</parameter>
<parameter name="CLUTTER_SWIPE_DIRECTION_LEFT">
<parameter_description> Leftwards swipe gesture
</parameter_description>
</parameter>
<parameter name="CLUTTER_SWIPE_DIRECTION_RIGHT">
<parameter_description> Rightwards swipe gesture
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterTapAction::tap">
<description>
The ::tap signal is emitted when the tap gesture is complete.

</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterTapAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the @action
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterText::activate">
<description>
The ::activate signal is emitted each time the actor is 'activated'
by the user, normally by pressing the 'Enter' key. The signal is
emitted only if #ClutterText:activatable is set to %TRUE.

</description>
<parameters>
<parameter name="self">
<parameter_description> the #ClutterText that emitted the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterText::cursor-changed">
<description>
The ::cursor-changed signal is emitted whenever the cursor
position or size changes.

</description>
<parameters>
<parameter name="self">
<parameter_description> the #ClutterText that emitted the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterText::delete-text">
<description>
This signal is emitted when text is deleted from the actor by
the user. It is emitted before @self text changes.

</description>
<parameters>
<parameter name="self">
<parameter_description> the #ClutterText that emitted the signal
</parameter_description>
</parameter>
<parameter name="start_pos">
<parameter_description> the starting position
</parameter_description>
</parameter>
<parameter name="end_pos">
<parameter_description> the end position
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterText::insert-text">
<description>
This signal is emitted when text is inserted into the actor by
the user. It is emitted before @self text changes.

</description>
<parameters>
<parameter name="self">
<parameter_description> the #ClutterText that emitted the signal
</parameter_description>
</parameter>
<parameter name="new_text">
<parameter_description> the new text to insert
</parameter_description>
</parameter>
<parameter name="new_text_length">
<parameter_description> the length of the new text, in bytes, or -1 if
new_text is nul-terminated
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position, in characters, at which to insert the
new text. this is an in-out parameter.  After the signal
emission is finished, it should point after the newly
inserted text.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterText::text-changed">
<description>
The ::text-changed signal is emitted after @actor's text changes

</description>
<parameters>
<parameter name="self">
<parameter_description> the #ClutterText that emitted the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterTextBuffer::deleted-text">
<description>
This signal is emitted after text is deleted from the buffer.



</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #ClutterTextBuffer
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position the text was deleted at.
</parameter_description>
</parameter>
<parameter name="n_chars">
<parameter_description> The number of characters that were deleted.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterTextBuffer::inserted-text">
<description>
This signal is emitted after text is inserted into the buffer.



</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #ClutterTextBuffer
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position the text was inserted at.
</parameter_description>
</parameter>
<parameter name="chars">
<parameter_description> The text that was inserted.
</parameter_description>
</parameter>
<parameter name="n_chars">
<parameter_description> The number of characters that were inserted.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="ClutterTextDirection">
<description>
The text direction to be used by #ClutterActor&lt;!-- --&gt;s

</description>
<parameters>
<parameter name="CLUTTER_TEXT_DIRECTION_DEFAULT">
<parameter_description> Use the default setting, as returned
by clutter_get_default_text_direction()
</parameter_description>
</parameter>
<parameter name="CLUTTER_TEXT_DIRECTION_LTR">
<parameter_description> Use left-to-right text direction
</parameter_description>
</parameter>
<parameter name="CLUTTER_TEXT_DIRECTION_RTL">
<parameter_description> Use right-to-left text direction
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterTimeline::completed">
<description>
The #ClutterTimeline::completed signal is emitted when the timeline's
elapsed time reaches the value of the #ClutterTimeline:duration
property.

This signal will be emitted even if the #ClutterTimeline is set to be
repeating.

If you want to get notification on whether the #ClutterTimeline has
been stopped or has finished its run, including its eventual repeats,
you should use the #ClutterTimeline::stopped signal instead.

</description>
<parameters>
<parameter name="timeline">
<parameter_description> the #ClutterTimeline which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterTimeline::marker-reached">
<description>
The ::marker-reached signal is emitted each time a timeline
reaches a marker set with
clutter_timeline_add_marker_at_time(). This signal is detailed
with the name of the marker as well, so it is possible to connect
a callback to the ::marker-reached signal for a specific marker
with:

&lt;informalexample&gt;&lt;programlisting&gt;
clutter_timeline_add_marker_at_time (timeline, &quot;foo&quot;, 500);
clutter_timeline_add_marker_at_time (timeline, &quot;bar&quot;, 750);

g_signal_connect (timeline, &quot;marker-reached&quot;,
G_CALLBACK (each_marker_reached), NULL);
g_signal_connect (timeline, &quot;marker-reached::foo&quot;,
G_CALLBACK (foo_marker_reached), NULL);
g_signal_connect (timeline, &quot;marker-reached::bar&quot;,
G_CALLBACK (bar_marker_reached), NULL);
&lt;/programlisting&gt;&lt;/informalexample&gt;

In the example, the first callback will be invoked for both
the &quot;foo&quot; and &quot;bar&quot; marker, while the second and third callbacks
will be invoked for the &quot;foo&quot; or &quot;bar&quot; markers, respectively.



</description>
<parameters>
<parameter name="timeline">
<parameter_description> the #ClutterTimeline which received the signal
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the name of the marker reached
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> the elapsed time
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterTimeline::new-frame">
<description>
The ::new-frame signal is emitted for each timeline running
timeline before a new frame is drawn to give animations a chance
to update the scene.

</description>
<parameters>
<parameter name="timeline">
<parameter_description> the timeline which received the signal
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> the elapsed time between 0 and duration
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterTimeline::paused">
<description>
The ::paused signal is emitted when clutter_timeline_pause() is invoked.

</description>
<parameters>
<parameter name="timeline">
<parameter_description> the #ClutterTimeline which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterTimeline::started">
<description>
The ::started signal is emitted when the timeline starts its run.
This might be as soon as clutter_timeline_start() is invoked or
after the delay set in the ClutterTimeline:delay property has
expired.

</description>
<parameters>
<parameter name="timeline">
<parameter_description> the #ClutterTimeline which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterTimeline::stopped">
<description>
The #ClutterTimeline::stopped signal is emitted when the timeline
has been stopped, either because clutter_timeline_stop() has been
called, or because it has been exhausted.

This is different from the #ClutterTimeline::completed signal,
which gets emitted after every repeat finishes.

If the #ClutterTimeline has is marked as infinitely repeating,
this signal will never be emitted.



</description>
<parameters>
<parameter name="timeline">
<parameter_description> the #ClutterTimeline that emitted the signal
</parameter_description>
</parameter>
<parameter name="is_finished">
<parameter_description> %TRUE if the signal was emitted at the end of the
timeline.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="ClutterTimelineDirection">
<description>
The direction of a #ClutterTimeline

</description>
<parameters>
<parameter name="CLUTTER_TIMELINE_FORWARD">
<parameter_description> forward direction for a timeline
</parameter_description>
</parameter>
<parameter name="CLUTTER_TIMELINE_BACKWARD">
<parameter_description> backward direction for a timeline
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="ClutterUnitType">
<description>
The type of unit in which a value is expressed

This enumeration might be expanded at later date

</description>
<parameters>
<parameter name="CLUTTER_UNIT_PIXEL">
<parameter_description> Unit expressed in pixels (with subpixel precision)
</parameter_description>
</parameter>
<parameter name="CLUTTER_UNIT_EM">
<parameter_description> Unit expressed in em
</parameter_description>
</parameter>
<parameter name="CLUTTER_UNIT_MM">
<parameter_description> Unit expressed in millimeters
</parameter_description>
</parameter>
<parameter name="CLUTTER_UNIT_POINT">
<parameter_description> Unit expressed in points
</parameter_description>
</parameter>
<parameter name="CLUTTER_UNIT_CM">
<parameter_description> Unit expressed in centimeters
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterWaylandSurface::queue-damage-redraw">
<description>
::queue-damage-redraw is emitted to notify that some sub-region
of the texture has been changed. This usually means a redraw
needs to be queued for the actor.

The default handler will queue a clipped redraw in response to
the damage, using the assumption that the pixmap is being painted
to a rectangle covering the transformed allocation of the actor.
If you sub-class and change the paint method so this isn't true
then you must also provide your own damage signal handler to
queue a redraw that blocks this default behaviour.



</description>
<parameters>
<parameter name="texture">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> The top left x position of the damage region
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> The top left y position of the damage region
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> The width of the damage region
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> The height of the damage region
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="ClutterX11FilterReturn">
<description>
Return values for the #ClutterX11FilterFunc function.



</description>
<parameters>
<parameter name="CLUTTER_X11_FILTER_CONTINUE">
<parameter_description> The event was not handled, continues the
processing
</parameter_description>
</parameter>
<parameter name="CLUTTER_X11_FILTER_TRANSLATE">
<parameter_description> Native event translated into a Clutter
event, stops the processing
</parameter_description>
</parameter>
<parameter name="CLUTTER_X11_FILTER_REMOVE">
<parameter_description> Remove the event, stops the processing
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="ClutterX11TexturePixmap::queue-damage-redraw">
<description>
::queue-damage-redraw is emitted to notify that some sub-region
of the texture has been changed (either by an automatic damage
update or by an explicit call to
clutter_x11_texture_pixmap_update_area). This usually means a
redraw needs to be queued for the actor.

The default handler will queue a clipped redraw in response to
the damage, using the assumption that the pixmap is being painted
to a rectangle covering the transformed allocation of the actor.
If you sub-class and change the paint method so this isn't true
then you must also provide your own damage signal handler to
queue a redraw that blocks this default behaviour.



</description>
<parameters>
<parameter name="texture">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> The top left x position of the damage region
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> The top left y position of the damage region
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> The width of the damage region
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> The height of the damage region
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterX11TexturePixmap::update-area">
<description>
The ::update-area signal is emitted to ask the texture to update its
content from its source pixmap.



</description>
<parameters>
<parameter name="texture">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="ClutterZoomAction::zoom">
<description>
The ::zoom signal is emitted for each series of touch events that
change the distance and focal point between the touch points.

The default handler of the signal will call
clutter_actor_set_scale() on @actor using the ratio of the first
distance between the touch points and the current distance. To
override the default behaviour, connect to this signal and return
%FALSE.


</description>
<parameters>
<parameter name="action">
<parameter_description> the #ClutterZoomAction that emitted the signal
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the #ClutterActor attached to the action
</parameter_description>
</parameter>
<parameter name="focal_point">
<parameter_description> the focal point of the zoom
</parameter_description>
</parameter>
<parameter name="factor">
<parameter_description> the initial distance between the 2 touch points
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the zoom should continue, and %FALSE if
the zoom should be cancelled.


</return>
</signal>

<enum name="ClutterZoomAxis">
<description>
The axis of the constraint that should be applied by the
zooming action.



</description>
<parameters>
<parameter name="CLUTTER_ZOOM_X_AXIS">
<parameter_description> Scale only on the X axis
</parameter_description>
</parameter>
<parameter name="CLUTTER_ZOOM_Y_AXIS">
<parameter_description> Scale only on the Y axis
</parameter_description>
</parameter>
<parameter name="CLUTTER_ZOOM_BOTH">
<parameter_description> Scale on both axis
</parameter_description>
</parameter>
</parameters>
</enum>

<function name="cally_accessibility_init">
<description>
Initializes the accessibility support.

Since: 1.4

</description>
<parameters>
</parameters>
<return> %TRUE if accessibility support has been correctly
initialized.

</return>
</function>

<function name="cally_actor_add_action">
<description>
Adds a new action to be accessed with the #AtkAction interface.

Since: 1.4

</description>
<parameters>
<parameter name="cally_actor">
<parameter_description> a #CallyActor
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the action name
</parameter_description>
</parameter>
<parameter name="action_description">
<parameter_description> the action description
</parameter_description>
</parameter>
<parameter name="action_keybinding">
<parameter_description> the action keybinding
</parameter_description>
</parameter>
<parameter name="action_func">
<parameter_description> the callback of the action, to be executed with do_action
</parameter_description>
</parameter>
</parameters>
<return> added action id, or -1 if failure

</return>
</function>

<function name="cally_actor_add_action_full">
<description>
Adds a new action to be accessed with the #AtkAction interface.

Since: 1.6

</description>
<parameters>
<parameter name="cally_actor">
<parameter_description> a #CallyActor
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the action name
</parameter_description>
</parameter>
<parameter name="action_description">
<parameter_description> the action description
</parameter_description>
</parameter>
<parameter name="action_keybinding">
<parameter_description> the action keybinding
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the callback of the action
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to be passed to @callback
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to be called when removing the action
</parameter_description>
</parameter>
</parameters>
<return> added action id, or -1 if failure

</return>
</function>

<function name="cally_actor_new">
<description>
Creates a new #CallyActor for the given @actor

Since: 1.4

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the newly created #AtkObject

</return>
</function>

<function name="cally_actor_remove_action">
<description>
Removes a action, using the @action_id returned by cally_actor_add_action()

Since: 1.4

</description>
<parameters>
<parameter name="cally_actor">
<parameter_description> a #CallyActor
</parameter_description>
</parameter>
<parameter name="action_id">
<parameter_description> the action id
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation was succesful, %FALSE otherwise

</return>
</function>

<function name="cally_actor_remove_action_by_name">
<description>
Removes an action, using the @action_name used when the action was added
with cally_actor_add_action()

Since: 1.4

</description>
<parameters>
<parameter name="cally_actor">
<parameter_description> a #CallyActor
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of the action to remove
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation was succesful, %FALSE otherwise

</return>
</function>

<function name="cally_clone_new">
<description>
Creates a new #CallyClone for the given @actor. @actor must be a
#ClutterClone.

Since: 1.4

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the newly created #AtkObject

</return>
</function>

<function name="cally_get_cally_initialized">
<description>
Returns if the accessibility support using cally is enabled.

Since: 1.4

</description>
<parameters>
</parameters>
<return> %TRUE if accessibility support has been correctly
initialized.

</return>
</function>

<function name="cally_group_new">
<description>
Creates a #CallyGroup for @actor

Since: 1.4

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterGroup
</parameter_description>
</parameter>
</parameters>
<return> the newly created #CallyGroup

</return>
</function>

<function name="cally_rectangle_new">
<description>
Creates a new #CallyRectangle for the given @actor. @actor must be
a #ClutterRectangle.

Since: 1.4

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the newly created #AtkObject

</return>
</function>

<function name="cally_root_new">
<description>
Creates a new #CallyRoot object.

Since: 1.4

</description>
<parameters>
</parameters>
<return> the newly created #AtkObject

</return>
</function>

<function name="cally_stage_new">
<description>
Creates a new #CallyStage for the given @actor. @actor should be a
#ClutterStage.

Since: 1.4

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the newly created #AtkObject

</return>
</function>

<function name="cally_text_new">
<description>
Creates a new #CallyText for the given @actor. @actor must be a
#ClutterText.

Since: 1.4

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the newly created #AtkObject

</return>
</function>

<function name="cally_texture_new">
<description>
Creates a new #CallyTexture for the given @actor. @actor must be
a #ClutterTexture.

Since: 1.4

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the newly created #AtkObject

</return>
</function>

<function name="clutter_actor_add_action">
<description>
Adds @action to the list of actions applied to @self

A #ClutterAction can only belong to one actor at a time

The #ClutterActor will hold a reference on @action until either
clutter_actor_remove_action() or clutter_actor_clear_actions()
is called



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> a #ClutterAction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_add_action_with_name">
<description>
A convenience function for setting the name of a #ClutterAction
while adding it to the list of actions applied to @self

This function is the logical equivalent of:

|[
clutter_actor_meta_set_name (CLUTTER_ACTOR_META (action), name);
clutter_actor_add_action (self, action);
]|



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name to set on the action
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> a #ClutterAction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_add_child">
<description>
Adds @child to the children of @self.

This function will acquire a reference on @child that will only
be released when calling clutter_actor_remove_child().

This function will take into consideration the #ClutterActor:depth
of @child, and will keep the list of children sorted.

This function will emit the #ClutterContainer::actor-added signal
on @self.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_add_constraint">
<description>
Adds @constraint to the list of #ClutterConstraint&lt;!-- --&gt;s applied
to @self

The #ClutterActor will hold a reference on the @constraint until
either clutter_actor_remove_constraint() or
clutter_actor_clear_constraints() is called.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="constraint">
<parameter_description> a #ClutterConstraint
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_add_constraint_with_name">
<description>
A convenience function for setting the name of a #ClutterConstraint
while adding it to the list of constraints applied to @self

This function is the logical equivalent of:

|[
clutter_actor_meta_set_name (CLUTTER_ACTOR_META (constraint), name);
clutter_actor_add_constraint (self, constraint);
]|



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name to set on the constraint
</parameter_description>
</parameter>
<parameter name="constraint">
<parameter_description> a #ClutterConstraint
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_add_effect">
<description>
Adds @effect to the list of #ClutterEffect&lt;!-- --&gt;s applied to @self

The #ClutterActor will hold a reference on the @effect until either
clutter_actor_remove_effect() or clutter_actor_clear_effects() is
called.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="effect">
<parameter_description> a #ClutterEffect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_add_effect_with_name">
<description>
A convenience function for setting the name of a #ClutterEffect
while adding it to the list of effectss applied to @self

This function is the logical equivalent of:

|[
clutter_actor_meta_set_name (CLUTTER_ACTOR_META (effect), name);
clutter_actor_add_effect (self, effect);
]|



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name to set on the effect
</parameter_description>
</parameter>
<parameter name="effect">
<parameter_description> a #ClutterEffect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_add_transition">
<description>
Adds a @transition to the #ClutterActor's list of animations.

The @name string is a per-actor unique identifier of the @transition: only
one #ClutterTransition can be associated to the specified @name.

The @transition will be started once added.

This function will take a reference on the @transition.

This function is usually called implicitly when modifying an animatable
property.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the transition to add
</parameter_description>
</parameter>
<parameter name="transition">
<parameter_description> the #ClutterTransition to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_allocate">
<description>
Assigns the size of a #ClutterActor from the given @box.

This function should only be called on the children of an actor when
overriding the #ClutterActorClass.allocate() virtual function.

This function will adjust the stored allocation to take into account
the alignment flags set in the #ClutterActor:x-align and
#ClutterActor:y-align properties, as well as the margin values set in
the #ClutterActor:margin-top, #ClutterActor:margin-right,
#ClutterActor:margin-bottom, and #ClutterActor:margin-left properties.

This function will respect the easing state of the #ClutterActor and
interpolate between the current allocation and the new one if the
easing state duration is a positive value.

Actors can know from their allocation box whether they have moved
with respect to their parent actor. The @flags parameter describes
additional information about the allocation, for instance whether
the parent has moved with respect to the stage, for example because
a grandparent's origin has moved.



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="box">
<parameter_description> new allocation of the actor, in parent-relative coordinates
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags that control the allocation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_allocate_align_fill">
<description>
Allocates @self by taking into consideration the available allocation
area; an alignment factor on either axis; and whether the actor should
fill the allocation on either axis.

The @box should contain the available allocation width and height;
if the x1 and y1 members of #ClutterActorBox are not set to 0, the
allocation will be offset by their value.

This function takes into consideration the geometry request specified by
the #ClutterActor:request-mode property, and the text direction.

This function is useful for fluid layout managers using legacy alignment
flags. Newly written layout managers should use the #ClutterActor:x-align
and #ClutterActor:y-align properties, instead, and just call
clutter_actor_allocate() inside their #ClutterActorClass.allocate()
implementation.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="box">
<parameter_description> a #ClutterActorBox, containing the available width and height
</parameter_description>
</parameter>
<parameter name="x_align">
<parameter_description> the horizontal alignment, between 0 and 1
</parameter_description>
</parameter>
<parameter name="y_align">
<parameter_description> the vertical alignment, between 0 and 1
</parameter_description>
</parameter>
<parameter name="x_fill">
<parameter_description> whether the actor should fill horizontally
</parameter_description>
</parameter>
<parameter name="y_fill">
<parameter_description> whether the actor should fill vertically
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> allocation flags to be passed to clutter_actor_allocate()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_allocate_available_size">
<description>
Allocates @self taking into account the #ClutterActor&lt;!-- --&gt;'s
preferred size, but limiting it to the maximum available width
and height provided.

This function will do the right thing when dealing with the
actor's request mode.

The implementation of this function is equivalent to:

|[
if (request_mode == CLUTTER_REQUEST_HEIGHT_FOR_WIDTH)
{
clutter_actor_get_preferred_width (self, available_height,
&amp;min_width,
&amp;natural_width);
width = CLAMP (natural_width, min_width, available_width);

clutter_actor_get_preferred_height (self, width,
&amp;min_height,
&amp;natural_height);
height = CLAMP (natural_height, min_height, available_height);
}
else
{
clutter_actor_get_preferred_height (self, available_width,
&amp;min_height,
&amp;natural_height);
height = CLAMP (natural_height, min_height, available_height);

clutter_actor_get_preferred_width (self, height,
&amp;min_width,
&amp;natural_width);
width = CLAMP (natural_width, min_width, available_width);
}

box.x1 = x; box.y1 = y;
box.x2 = box.x1 + available_width;
box.y2 = box.y1 + available_height;
clutter_actor_allocate (self, &amp;box, flags);
]|

This function can be used by fluid layout managers to allocate
an actor's preferred size without making it bigger than the area
available for the container.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the actor's X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the actor's Y coordinate
</parameter_description>
</parameter>
<parameter name="available_width">
<parameter_description> the maximum available width, or -1 to use the
actor's natural width
</parameter_description>
</parameter>
<parameter name="available_height">
<parameter_description> the maximum available height, or -1 to use the
actor's natural height
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags controlling the allocation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_allocate_preferred_size">
<description>
Allocates the natural size of @self.

This function is a utility call for #ClutterActor implementations
that allocates the actor's preferred natural size. It can be used
by fixed layout managers (like #ClutterGroup or so called
'composite actors') inside the ClutterActor::allocate
implementation to give each child exactly how much space it
requires, regardless of the size of the parent.

This function is not meant to be used by applications. It is also
not meant to be used outside the implementation of the
#ClutterActorClass.allocate virtual function.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags controlling the allocation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_apply_relative_transform_to_point">
<description>
Transforms @point in coordinates relative to the actor into
ancestor-relative coordinates using the relevant transform
stack (i.e. scale, rotation, etc).

If @ancestor is %NULL the ancestor will be the #ClutterStage. In
this case, the coordinates returned will be the coordinates on
the stage before the projection is applied. This is different from
the behaviour of clutter_actor_apply_transform_to_point().



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="ancestor">
<parameter_description> A #ClutterActor ancestor, or %NULL to use the
default #ClutterStage
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> A point as #ClutterVertex
</parameter_description>
</parameter>
<parameter name="vertex">
<parameter_description> The translated #ClutterVertex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_apply_transform_to_point">
<description>
Transforms @point in coordinates relative to the actor
into screen-relative coordinates with the current actor
transformation (i.e. scale, rotation, etc)



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> A point as #ClutterVertex
</parameter_description>
</parameter>
<parameter name="vertex">
<parameter_description> The translated #ClutterVertex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_alloc">
<description>
Allocates a new #ClutterActorBox.


</description>
<parameters>
</parameters>
<return> the newly allocated #ClutterActorBox.
Use clutter_actor_box_free() to free its resources


</return>
</function>

<function name="clutter_actor_box_clamp_to_pixel">
<description>
Clamps the components of @box to the nearest integer



</description>
<parameters>
<parameter name="box">
<parameter_description> the #ClutterActorBox to clamp
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_contains">
<description>
Checks whether a point with @x, @y coordinates is contained
withing @box


</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of the point
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of the point
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the point is contained by the #ClutterActorBox


</return>
</function>

<function name="clutter_actor_box_copy">
<description>
Copies @box


</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated copy of #ClutterActorBox. Use
clutter_actor_box_free() to free the allocated resources


</return>
</function>

<function name="clutter_actor_box_equal">
<description>
Checks @box_a and @box_b for equality


</description>
<parameters>
<parameter name="box_a">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="box_b">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the passed #ClutterActorBox are equal


</return>
</function>

<function name="clutter_actor_box_free">
<description>
Frees a #ClutterActorBox allocated using clutter_actor_box_new()
or clutter_actor_box_copy()



</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_from_vertices">
<description>
Calculates the bounding box represented by the four vertices; for details
of the vertex array see clutter_actor_get_abs_allocation_vertices().



</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="verts">
<parameter_description> array of four #ClutterVertex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_get_area">
<description>
Retrieves the area of @box


</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return> the area of a #ClutterActorBox, in pixels


</return>
</function>

<function name="clutter_actor_box_get_height">
<description>
Retrieves the height of the @box


</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return> the height of the box


</return>
</function>

<function name="clutter_actor_box_get_origin">
<description>
Retrieves the origin of @box



</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_get_size">
<description>
Retrieves the size of @box



</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_get_width">
<description>
Retrieves the width of the @box


</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return> the width of the box


</return>
</function>

<function name="clutter_actor_box_get_x">
<description>
Retrieves the X coordinate of the origin of @box


</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return> the X coordinate of the origin


</return>
</function>

<function name="clutter_actor_box_get_y">
<description>
Retrieves the Y coordinate of the origin of @box


</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return> the Y coordinate of the origin


</return>
</function>

<function name="clutter_actor_box_init">
<description>
Initializes @box with the given coordinates.


</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="x_1">
<parameter_description> X coordinate of the top left point
</parameter_description>
</parameter>
<parameter name="y_1">
<parameter_description> Y coordinate of the top left point
</parameter_description>
</parameter>
<parameter name="x_2">
<parameter_description> X coordinate of the bottom right point
</parameter_description>
</parameter>
<parameter name="y_2">
<parameter_description> Y coordinate of the bottom right point
</parameter_description>
</parameter>
</parameters>
<return> the initialized #ClutterActorBox


</return>
</function>

<function name="clutter_actor_box_init_rect">
<description>
Initializes @box with the given origin and size.



</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of the origin
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of the origin
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the box
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the box
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_interpolate">
<description>
Interpolates between @initial and @final #ClutterActorBox&lt;!-- --&gt;es
using @progress



</description>
<parameters>
<parameter name="initial">
<parameter_description> the initial #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="final">
<parameter_description> the final #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="progress">
<parameter_description> the interpolation progress
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> return location for the interpolation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_new">
<description>
Allocates a new #ClutterActorBox using the passed coordinates
for the top left and bottom right points.

This function is the logical equivalent of:

|[
clutter_actor_box_init (clutter_actor_box_alloc (),
x_1, y_1,
x_2, y_2);
]|


</description>
<parameters>
<parameter name="x_1">
<parameter_description> X coordinate of the top left point
</parameter_description>
</parameter>
<parameter name="y_1">
<parameter_description> Y coordinate of the top left point
</parameter_description>
</parameter>
<parameter name="x_2">
<parameter_description> X coordinate of the bottom right point
</parameter_description>
</parameter>
<parameter name="y_2">
<parameter_description> Y coordinate of the bottom right point
</parameter_description>
</parameter>
</parameters>
<return> the newly allocated #ClutterActorBox.
Use clutter_actor_box_free() to free the resources


</return>
</function>

<function name="clutter_actor_box_set_origin">
<description>
Changes the origin of @box, maintaining the size of the #ClutterActorBox.



</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the X coordinate of the new origin
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the Y coordinate of the new origin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_set_size">
<description>
Sets the size of @box, maintaining the origin of the #ClutterActorBox.



</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the new width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the new height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_union">
<description>
Unions the two boxes @a and @b and stores the result in @result.



</description>
<parameters>
<parameter name="a">
<parameter_description> (in) the first #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> the second #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> the #ClutterActorBox representing a union
of @a and @b
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_clear_actions">
<description>
Clears the list of actions applied to @self



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_clear_constraints">
<description>
Clears the list of constraints applied to @self



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_clear_effects">
<description>
Clears the list of effects applied to @self



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_contains">
<description>
Determines if @descendant is contained inside @self (either as an
immediate child, or as a deeper descendant). If @self and
@descendant point to the same actor then it will also return %TRUE.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="descendant">
<parameter_description> A #ClutterActor, possibly contained in @self
</parameter_description>
</parameter>
</parameters>
<return> whether @descendent is contained within @self


</return>
</function>

<function name="clutter_actor_continue_paint">
<description>
Run the next stage of the paint sequence. This function should only
be called within the implementation of the ‘run’ virtual of a
#ClutterEffect. It will cause the run method of the next effect to
be applied, or it will paint the actual actor if the current effect
is the last effect in the chain.



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_create_pango_context">
<description>
Creates a #PangoContext for the given actor. The #PangoContext
is already configured using the appropriate font map, resolution
and font options.

See also clutter_actor_get_pango_context().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the newly created #PangoContext.
Use g_object_unref() on the returned value to deallocate its
resources


</return>
</function>

<function name="clutter_actor_create_pango_layout">
<description>
Creates a new #PangoLayout from the same #PangoContext used
by the #ClutterActor. The #PangoLayout is already configured
with the font map, resolution and font options, and the
given @text.

If you want to keep around a #PangoLayout created by this
function you will have to connect to the #ClutterBackend::font-changed
and #ClutterBackend::resolution-changed signals, and call
pango_layout_context_changed() in response to them.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> (allow-none) the text to set on the #PangoLayout, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the newly created #PangoLayout.
Use g_object_unref() when done


</return>
</function>

<function name="clutter_actor_destroy">
<description>
Destroys an actor.  When an actor is destroyed, it will break any
references it holds to other objects.  If the actor is inside a
container, the actor will be removed.

When you destroy a container, its children will be destroyed as well.

Note: you cannot destroy the #ClutterStage returned by
clutter_stage_get_default().

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_destroy_all_children">
<description>
Destroys all children of @self.

This function releases the reference added by inserting a child
actor in the list of children of @self, and ensures that the
#ClutterActor::destroy signal is emitted on each child of the
actor.

By default, #ClutterActor will emit the #ClutterActor::destroy signal
when its reference count drops to 0; the default handler of the
#ClutterActor::destroy signal will destroy all the children of an
actor. This function ensures that all children are destroyed, instead
of just removed from @self, unlike clutter_actor_remove_all_children()
which will merely release the reference and remove each child.

Unless you acquired an additional reference on each child of @self
prior to calling clutter_actor_remove_all_children() and want to reuse
the actors, you should use clutter_actor_destroy_all_children() in
order to make sure that children are destroyed and signal handlers
are disconnected even in cases where circular references prevent this
from automatically happening through reference counting alone.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_event">
<description>
This function is used to emit an event on the main stage.
You should rarely need to use this function, except for
synthetising events.


</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="capture">
<parameter_description> %TRUE if event in in capture phase, %FALSE otherwise.
</parameter_description>
</parameter>
</parameters>
<return> the return value from the signal emission: %TRUE
if the actor handled the event, or %FALSE if the event was
not handled


</return>
</function>

<function name="clutter_actor_get_abs_allocation_vertices">
<description>
Calculates the transformed screen coordinates of the four corners of
the actor; the returned vertices relate to the #ClutterActorBox
coordinates  as follows:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;v[0] contains (x1, y1)&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;v[1] contains (x2, y1)&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;v[2] contains (x1, y2)&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;v[3] contains (x2, y2)&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="verts">
<parameter_description> Pointer to a location of an array
of 4 #ClutterVertex where to store the result.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_accessible">
<description>
Returns the accessible object that describes the actor to an
assistive technology.

If no class-specific #AtkObject implementation is available for the
actor instance in question, it will inherit an #AtkObject
implementation from the first ancestor class for which such an
implementation is defined.

The documentation of the &lt;ulink
url=&quot;http://developer.gnome.org/doc/API/2.0/atk/index.html&quot;&gt;ATK&lt;/ulink&gt;
library contains more information about accessible objects and
their uses.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the #AtkObject associated with @actor
</return>
</function>

<function name="clutter_actor_get_action">
<description>
Retrieves the #ClutterAction with the given name in the list
of actions applied to @self


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the action to retrieve
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterAction for the given
name, or %NULL. The returned #ClutterAction is owned by the
actor and it should not be unreferenced directly


</return>
</function>

<function name="clutter_actor_get_actions">
<description>
Retrieves the list of actions applied to @self


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> a copy
of the list of #ClutterAction&lt;!-- --&gt;s. The contents of the list are
owned by the #ClutterActor. Use g_list_free() to free the resources
allocated by the returned #GList


</return>
</function>

<function name="clutter_actor_get_allocation_box">
<description>
Gets the layout box an actor has been assigned. The allocation can
only be assumed valid inside a paint() method; anywhere else, it
may be out-of-date.

&lt;note&gt;Do not call any of the clutter_actor_get_allocation_*() family
of functions inside the implementation of the get_preferred_width()
or get_preferred_height() virtual functions.&lt;/note&gt;



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="box">
<parameter_description> the function fills this in with the actor's allocation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_allocation_vertices">
<description>
Calculates the transformed coordinates of the four corners of the
actor in the plane of @ancestor. The returned vertices relate to
the #ClutterActorBox coordinates as follows:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;@verts[0] contains (x1, y1)&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;@verts[1] contains (x2, y1)&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;@verts[2] contains (x1, y2)&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;@verts[3] contains (x2, y2)&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

If @ancestor is %NULL the ancestor will be the #ClutterStage. In
this case, the coordinates returned will be the coordinates on
the stage before the projection is applied. This is different from
the behaviour of clutter_actor_get_abs_allocation_vertices().



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="ancestor">
<parameter_description> A #ClutterActor to calculate the vertices
against, or %NULL to use the #ClutterStage
</parameter_description>
</parameter>
<parameter name="verts">
<parameter_description> return
location for an array of 4 #ClutterVertex in which to store the result
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_background_color">
<description>
Retrieves the color set using clutter_actor_set_background_color().



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_child_at_index">
<description>
Retrieves the actor at the given @index_ inside the list of
children of @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the position in the list of children
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a #ClutterActor, or %NULL


</return>
</function>

<function name="clutter_actor_get_child_transform">
<description>
Retrieves the child transformation matrix set using
clutter_actor_set_child_transform(); if none is currently set,
the @transform matrix will be initialized to the identity matrix.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="transform">
<parameter_description> a #ClutterMatrix
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_children">
<description>
Retrieves the list of children of @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> A newly
allocated #GList of #ClutterActor&lt;!-- --&gt;s. Use g_list_free() when
done.


</return>
</function>

<function name="clutter_actor_get_clip">
<description>
Gets the clip area for @self, if any is set.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="xoff">
<parameter_description> return location for the X offset of
the clip rectangle, or %NULL
</parameter_description>
</parameter>
<parameter name="yoff">
<parameter_description> return location for the Y offset of
the clip rectangle, or %NULL
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the width of
the clip rectangle, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the height of
the clip rectangle, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_clip_to_allocation">
<description>
Retrieves the value set using clutter_actor_set_clip_to_allocation()


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterActor is clipped to its allocation


</return>
</function>

<function name="clutter_actor_get_constraint">
<description>
Retrieves the #ClutterConstraint with the given name in the list
of constraints applied to @self


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the constraint to retrieve
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterConstraint for the given
name, or %NULL. The returned #ClutterConstraint is owned by the
actor and it should not be unreferenced directly


</return>
</function>

<function name="clutter_actor_get_constraints">
<description>
Retrieves the list of constraints applied to @self


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> a copy
of the list of #ClutterConstraint&lt;!-- --&gt;s. The contents of the list are
owned by the #ClutterActor. Use g_list_free() to free the resources
allocated by the returned #GList


</return>
</function>

<function name="clutter_actor_get_content">
<description>
Retrieves the contents of @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #ClutterContent instance,
or %NULL if none was set


</return>
</function>

<function name="clutter_actor_get_content_box">
<description>
Retrieves the bounding box for the #ClutterContent of @self.

The bounding box is relative to the actor's allocation.

If no #ClutterContent is set for @self, or if @self has not been
allocated yet, then the result is undefined.

The content box is guaranteed to be, at most, as big as the allocation
of the #ClutterActor.

If the #ClutterContent used by the actor has a preferred size, then
it is possible to modify the content box by using the
#ClutterActor:content-gravity property.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="box">
<parameter_description> the return location for the bounding
box for the #ClutterContent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_content_gravity">
<description>
Retrieves the content gravity as set using
clutter_actor_set_content_gravity().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the content gravity


</return>
</function>

<function name="clutter_actor_get_content_repeat">
<description>
Retrieves the repeat policy for a #ClutterActor set by
clutter_actor_set_content_repeat().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the content repeat policy


</return>
</function>

<function name="clutter_actor_get_content_scaling_filters">
<description>
Retrieves the values set using clutter_actor_set_content_scaling_filters().



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="min_filter">
<parameter_description> return location for the minification
filter, or %NULL
</parameter_description>
</parameter>
<parameter name="mag_filter">
<parameter_description> return location for the magnification
filter, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_default_paint_volume">
<description>
Retrieves the default paint volume for @self.

This function provides the same #ClutterPaintVolume that would be
computed by the default implementation inside #ClutterActor of the
#ClutterActorClass.get_paint_volume() virtual function.

This function should only be used by #ClutterActor subclasses that
cannot chain up to the parent implementation when computing their
paint volume.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the default
#ClutterPaintVolume, relative to the #ClutterActor, or %NULL if
the actor could not compute a valid paint volume. The returned value
is not guaranteed to be stable across multiple frames, so if you
want to retain it, you will need to copy it using
clutter_paint_volume_copy().


</return>
</function>

<function name="clutter_actor_get_easing_delay">
<description>
Retrieves the delay that should be applied when tweening animatable
properties.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> a delay, in milliseconds


</return>
</function>

<function name="clutter_actor_get_easing_duration">
<description>
Retrieves the duration of the tweening for animatable
properties of @self for the current easing state.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the duration of the tweening, in milliseconds


</return>
</function>

<function name="clutter_actor_get_easing_mode">
<description>
Retrieves the easing mode for the tweening of animatable properties
of @self for the current easing state.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> an easing mode


</return>
</function>

<function name="clutter_actor_get_effect">
<description>
Retrieves the #ClutterEffect with the given name in the list
of effects applied to @self


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the effect to retrieve
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterEffect for the given
name, or %NULL. The returned #ClutterEffect is owned by the
actor and it should not be unreferenced directly


</return>
</function>

<function name="clutter_actor_get_effects">
<description>
Retrieves the #ClutterEffect&lt;!-- --&gt;s applied on @self, if any


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> a list
of #ClutterEffect&lt;!-- --&gt;s, or %NULL. The elements of the returned
list are owned by Clutter and they should not be freed. You should
free the returned list using g_list_free() when done


</return>
</function>

<function name="clutter_actor_get_first_child">
<description>
Retrieves the first child of @self.

The returned pointer is only valid until the scene graph changes; it
is not safe to modify the list of children of @self while iterating
it.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a #ClutterActor, or %NULL


</return>
</function>

<function name="clutter_actor_get_fixed_position_set">
<description>
Checks whether an actor has a fixed position set (and will thus be
unaffected by any layout manager).


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the fixed position is set on the actor


</return>
</function>

<function name="clutter_actor_get_flags">
<description>
Retrieves the flags set on @self


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> a bitwise or of #ClutterActorFlags or 0


</return>
</function>

<function name="clutter_actor_get_height">
<description>
Retrieves the height of a #ClutterActor.

If the actor has a valid allocation, this function will return the
height of the allocated area given to the actor.

If the actor does not have a valid allocation, this function will
return the actor's natural height, that is the preferred height of
the actor.

If you care whether you get the preferred height or the height that
has been assigned to the actor, you should probably call a different
function like clutter_actor_get_allocation_box() to retrieve the
allocated size or clutter_actor_get_preferred_height() to retrieve the
preferred height.

If an actor has a fixed height, for instance a height that has been
assigned using clutter_actor_set_height(), the height returned will
be the same value.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the height of the actor, in pixels
</return>
</function>

<function name="clutter_actor_get_last_child">
<description>
Retrieves the last child of @self.

The returned pointer is only valid until the scene graph changes; it
is not safe to modify the list of children of @self while iterating
it.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a #ClutterActor, or %NULL


</return>
</function>

<function name="clutter_actor_get_layout_manager">
<description>
Retrieves the #ClutterLayoutManager used by @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #ClutterLayoutManager,
or %NULL


</return>
</function>

<function name="clutter_actor_get_margin">
<description>
Retrieves all the components of the margin of a #ClutterActor.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="margin">
<parameter_description> return location for a #ClutterMargin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_margin_bottom">
<description>
Retrieves the bottom margin of a #ClutterActor.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the bottom margin


</return>
</function>

<function name="clutter_actor_get_margin_left">
<description>
Retrieves the left margin of a #ClutterActor.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the left margin


</return>
</function>

<function name="clutter_actor_get_margin_right">
<description>
Retrieves the right margin of a #ClutterActor.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the right margin


</return>
</function>

<function name="clutter_actor_get_margin_top">
<description>
Retrieves the top margin of a #ClutterActor.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the top margin


</return>
</function>

<function name="clutter_actor_get_n_children">
<description>
Retrieves the number of children of @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the number of children of an actor


</return>
</function>

<function name="clutter_actor_get_name">
<description>
Retrieves the name of @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the name of the actor, or %NULL. The returned string is
owned by the actor and should not be modified or freed.
</return>
</function>

<function name="clutter_actor_get_next_sibling">
<description>
Retrieves the sibling of @self that comes after it in the list
of children of @self's parent.

The returned pointer is only valid until the scene graph changes; it
is not safe to modify the list of children of @self while iterating
it.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a #ClutterActor, or %NULL


</return>
</function>

<function name="clutter_actor_get_offscreen_redirect">
<description>
Retrieves whether to redirect the actor to an offscreen buffer, as
set by clutter_actor_set_offscreen_redirect().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the value of the offscreen-redirect property of the actor


</return>
</function>

<function name="clutter_actor_get_opacity">
<description>
Retrieves the opacity value of an actor, as set by
clutter_actor_set_opacity().

For retrieving the absolute opacity of the actor inside a paint
virtual function, see clutter_actor_get_paint_opacity().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the opacity of the actor
</return>
</function>

<function name="clutter_actor_get_paint_box">
<description>
Retrieves the paint volume of the passed #ClutterActor, and
transforms it into a 2D bounding box in stage coordinates.

This function is useful to determine the on screen area occupied by
the actor. The box is only an approximation and may often be
considerably larger due to the optimizations used to calculate the
box. The box is never smaller though, so it can reliably be used
for culling.

There are times when a 2D paint box can't be determined, e.g.
because the actor isn't yet parented under a stage or because
the actor is unable to determine a paint volume.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="box">
<parameter_description> return location for a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a 2D paint box could be determined, else
%FALSE.


</return>
</function>

<function name="clutter_actor_get_paint_opacity">
<description>
Retrieves the absolute opacity of the actor, as it appears on the stage.

This function traverses the hierarchy chain and composites the opacity of
the actor with that of its parents.

This function is intended for subclasses to use in the paint virtual
function, to paint themselves with the correct opacity.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> The actor opacity value.


</return>
</function>

<function name="clutter_actor_get_paint_visibility">
<description>
Retrieves the 'paint' visibility of an actor recursively checking for non
visible parents.

This is by definition the same as %CLUTTER_ACTOR_IS_MAPPED.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is visibile and will be painted.


</return>
</function>

<function name="clutter_actor_get_paint_volume">
<description>
Retrieves the paint volume of the passed #ClutterActor, or %NULL
when a paint volume can't be determined.

The paint volume is defined as the 3D space occupied by an actor
when being painted.

This function will call the &lt;function&gt;get_paint_volume()&lt;/function&gt;
virtual function of the #ClutterActor class. Sub-classes of #ClutterActor
should not usually care about overriding the default implementation,
unless they are, for instance: painting outside their allocation, or
actors with a depth factor (not in terms of #ClutterActor:depth but real
3D depth).

&lt;note&gt;2D actors overriding &lt;function&gt;get_paint_volume()&lt;/function&gt;
ensure their volume has a depth of 0. (This will be true so long as
you don't call clutter_paint_volume_set_depth().)&lt;/note&gt;


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a #ClutterPaintVolume,
or %NULL if no volume could be determined. The returned pointer
is not guaranteed to be valid across multiple frames; if you want
to keep it, you will need to copy it using clutter_paint_volume_copy().


</return>
</function>

<function name="clutter_actor_get_pango_context">
<description>
Retrieves the #PangoContext for @self. The actor's #PangoContext
is already configured using the appropriate font map, resolution
and font options.

Unlike clutter_actor_create_pango_context(), this context is owend
by the #ClutterActor and it will be updated each time the options
stored by the #ClutterBackend change.

You can use the returned #PangoContext to create a #PangoLayout
and render text using cogl_pango_render_layout() to reuse the
glyphs cache also used by Clutter.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the #PangoContext for a #ClutterActor.
The returned #PangoContext is owned by the actor and should not be
unreferenced by the application code


</return>
</function>

<function name="clutter_actor_get_parent">
<description>
Retrieves the parent of @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> The #ClutterActor parent, or %NULL
if no parent is set
</return>
</function>

<function name="clutter_actor_get_pivot_point">
<description>
Retrieves the coordinates of the #ClutterActor:pivot-point.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="pivot_x">
<parameter_description> return location for the normalized X
coordinate of the pivot point, or %NULL
</parameter_description>
</parameter>
<parameter name="pivot_y">
<parameter_description> return location for the normalized Y
coordinate of the pivot point, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_pivot_point_z">
<description>
Retrieves the Z component of the #ClutterActor:pivot-point.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_position">
<description>
This function tries to &quot;do what you mean&quot; and tell you where the
actor is, prior to any transformations. Retrieves the fixed
position of an actor in pixels, if one has been set; otherwise, if
the allocation is valid, returns the actor's allocated position;
otherwise, returns 0,0.

The returned position is in pixels.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_preferred_height">
<description>
Computes the requested minimum and natural heights for an actor,
or if they are already computed, returns the cached values.

An actor may not get its request - depending on the layout
manager that's in effect.



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="for_width">
<parameter_description> available width to assume in computing desired height,
or a negative value to indicate that no width is defined
</parameter_description>
</parameter>
<parameter name="min_height_p">
<parameter_description> return location for minimum height,
or %NULL
</parameter_description>
</parameter>
<parameter name="natural_height_p">
<parameter_description> return location for natural
height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_preferred_size">
<description>
Computes the preferred minimum and natural size of an actor, taking into
account the actor's geometry management (either height-for-width
or width-for-height).

The width and height used to compute the preferred height and preferred
width are the actor's natural ones.

If you need to control the height for the preferred width, or the width for
the preferred height, you should use clutter_actor_get_preferred_width()
and clutter_actor_get_preferred_height(), and check the actor's preferred
geometry management using the #ClutterActor:request-mode property.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="min_width_p">
<parameter_description> return location for the minimum
width, or %NULL
</parameter_description>
</parameter>
<parameter name="min_height_p">
<parameter_description> return location for the minimum
height, or %NULL
</parameter_description>
</parameter>
<parameter name="natural_width_p">
<parameter_description> return location for the natural
width, or %NULL
</parameter_description>
</parameter>
<parameter name="natural_height_p">
<parameter_description> return location for the natural
height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_preferred_width">
<description>
Computes the requested minimum and natural widths for an actor,
optionally depending on the specified height, or if they are
already computed, returns the cached values.

An actor may not get its request - depending on the layout
manager that's in effect.



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="for_height">
<parameter_description> available height when computing the preferred width,
or a negative value to indicate that no height is defined
</parameter_description>
</parameter>
<parameter name="min_width_p">
<parameter_description> return location for minimum width,
or %NULL
</parameter_description>
</parameter>
<parameter name="natural_width_p">
<parameter_description> return location for the natural
width, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_previous_sibling">
<description>
Retrieves the sibling of @self that comes before it in the list
of children of @self's parent.

The returned pointer is only valid until the scene graph changes; it
is not safe to modify the list of children of @self while iterating
it.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a #ClutterActor, or %NULL


</return>
</function>

<function name="clutter_actor_get_reactive">
<description>
Checks whether @actor is marked as reactive.


</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is reactive


</return>
</function>

<function name="clutter_actor_get_request_mode">
<description>
Retrieves the geometry request mode of @self


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the request mode for the actor


</return>
</function>

<function name="clutter_actor_get_rotation_angle">
<description>
Retrieves the angle of rotation set by clutter_actor_set_rotation_angle().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the axis of the rotation
</parameter_description>
</parameter>
</parameters>
<return> the angle of rotation, in degrees


</return>
</function>

<function name="clutter_actor_get_scale">
<description>
Retrieves an actors scale factors.



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> Location to store horizonal
scale factor, or %NULL.
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> Location to store vertical
scale factor, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_scale_z">
<description>
Retrieves the scaling factor along the Z axis, as set using
clutter_actor_set_scale_z().


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the scaling factor along the Z axis


</return>
</function>

<function name="clutter_actor_get_size">
<description>
This function tries to &quot;do what you mean&quot; and return
the size an actor will have. If the actor has a valid
allocation, the allocation will be returned; otherwise,
the actors natural size request will be returned.

If you care whether you get the request vs. the allocation, you
should probably call a different function like
clutter_actor_get_allocation_box() or
clutter_actor_get_preferred_width().



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the width, or %NULL.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the height, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_stage">
<description>
Retrieves the #ClutterStage where @actor is contained.


</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the stage
containing the actor, or %NULL


</return>
</function>

<function name="clutter_actor_get_text_direction">
<description>
Retrieves the value set using clutter_actor_set_text_direction()

If no text direction has been previously set, the default text
direction, as returned by clutter_get_default_text_direction(), will
be returned instead


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterTextDirection for the actor


</return>
</function>

<function name="clutter_actor_get_transform">
<description>
Retrieves the current transformation matrix of a #ClutterActor.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="transform">
<parameter_description> a #ClutterMatrix
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_transformed_paint_volume">
<description>
Retrieves the 3D paint volume of an actor like
clutter_actor_get_paint_volume() does (Please refer to the
documentation of clutter_actor_get_paint_volume() for more
details.) and it additionally transforms the paint volume into the
coordinate space of @relative_to_ancestor. (Or the stage if %NULL
is passed for @relative_to_ancestor)

This can be used by containers that base their paint volume on
the volume of their children. Such containers can query the
transformed paint volume of all of its children and union them
together using clutter_paint_volume_union().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="relative_to_ancestor">
<parameter_description> A #ClutterActor that is an ancestor of @self
(or %NULL for the stage)
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a #ClutterPaintVolume,
or %NULL if no volume could be determined. The returned pointer is
not guaranteed to be valid across multiple frames; if you wish to
keep it, you will have to copy it using clutter_paint_volume_copy().


</return>
</function>

<function name="clutter_actor_get_transformed_position">
<description>
Gets the absolute position of an actor, in pixels relative to the stage.



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_transformed_size">
<description>
Gets the absolute size of an actor in pixels, taking into account the
scaling factors.

If the actor has a valid allocation, the allocated size will be used.
If the actor has not a valid allocation then the preferred size will
be transformed and returned.

If you want the transformed allocation, see
clutter_actor_get_abs_allocation_vertices() instead.

&lt;note&gt;When the actor (or one of its ancestors) is rotated around the
X or Y axis, it no longer appears as on the stage as a rectangle, but
as a generic quadrangle; in that case this function returns the size
of the smallest rectangle that encapsulates the entire quad. Please
note that in this case no assumptions can be made about the relative
position of this envelope to the absolute position of the actor, as
returned by clutter_actor_get_transformed_position(); if you need this
information, you need to use clutter_actor_get_abs_allocation_vertices()
to get the coords of the actual quadrangle.&lt;/note&gt;



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_transition">
<description>
Retrieves the #ClutterTransition of a #ClutterActor by using the
transition @name.

Transitions created for animatable properties use the name of the
property itself, for instance the code below:

|[
clutter_actor_set_easing_duration (actor, 1000);
clutter_actor_set_rotation (actor, CLUTTER_Y_AXIS, 360.0, x, y, z);

transition = clutter_actor_get_transition (actor, &quot;rotation-angle-y&quot;);
g_signal_connect (transition, &quot;stopped&quot;,
G_CALLBACK (on_transition_stopped),
actor);
]|

will call the &lt;function&gt;on_transition_stopped&lt;/function&gt; callback when
the transition is finished.

If you just want to get notifications of the completion of a transition,
you should use the #ClutterActor::transition-stopped signal, using the
transition name as the signal detail.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the transition
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterTransition, or %NULL is none
was found to match the passed name; the returned instance is owned
by Clutter and it should not be freed


</return>
</function>

<function name="clutter_actor_get_translation">
<description>
Retrieves the translation set using clutter_actor_set_translation().



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="translate_x">
<parameter_description> return location for the X component
of the translation, or %NULL
</parameter_description>
</parameter>
<parameter name="translate_y">
<parameter_description> return location for the Y component
of the translation, or %NULL
</parameter_description>
</parameter>
<parameter name="translate_z">
<parameter_description> return location for the Z component
of the translation, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_width">
<description>
Retrieves the width of a #ClutterActor.

If the actor has a valid allocation, this function will return the
width of the allocated area given to the actor.

If the actor does not have a valid allocation, this function will
return the actor's natural width, that is the preferred width of
the actor.

If you care whether you get the preferred width or the width that
has been assigned to the actor, you should probably call a different
function like clutter_actor_get_allocation_box() to retrieve the
allocated size or clutter_actor_get_preferred_width() to retrieve the
preferred width.

If an actor has a fixed width, for instance a width that has been
assigned using clutter_actor_set_width(), the width returned will
be the same value.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the width of the actor, in pixels
</return>
</function>

<function name="clutter_actor_get_x">
<description>
Retrieves the X coordinate of a #ClutterActor.

This function tries to &quot;do what you mean&quot;, by returning the
correct value depending on the actor's state.

If the actor has a valid allocation, this function will return
the X coordinate of the origin of the allocation box.

If the actor has any fixed coordinate set using clutter_actor_set_x(),
clutter_actor_set_position() or clutter_actor_set_geometry(), this
function will return that coordinate.

If both the allocation and a fixed position are missing, this function
will return 0.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the X coordinate, in pixels, ignoring any
transformation (i.e. scaling, rotation)
</return>
</function>

<function name="clutter_actor_get_x_align">
<description>
Retrieves the horizontal alignment policy set using
clutter_actor_set_x_align().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the horizontal alignment policy.


</return>
</function>

<function name="clutter_actor_get_x_expand">
<description>
Retrieves the value set with clutter_actor_set_x_expand().

See also: clutter_actor_needs_expand()


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor has been set to expand


</return>
</function>

<function name="clutter_actor_get_y">
<description>
Retrieves the Y coordinate of a #ClutterActor.

This function tries to &quot;do what you mean&quot;, by returning the
correct value depending on the actor's state.

If the actor has a valid allocation, this function will return
the Y coordinate of the origin of the allocation box.

If the actor has any fixed coordinate set using clutter_actor_set_y(),
clutter_actor_set_position() or clutter_actor_set_geometry(), this
function will return that coordinate.

If both the allocation and a fixed position are missing, this function
will return 0.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the Y coordinate, in pixels, ignoring any
transformation (i.e. scaling, rotation)
</return>
</function>

<function name="clutter_actor_get_y_align">
<description>
Retrieves the vertical alignment policy set using
clutter_actor_set_y_align().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the vertical alignment policy.


</return>
</function>

<function name="clutter_actor_get_y_expand">
<description>
Retrieves the value set with clutter_actor_set_y_expand().

See also: clutter_actor_needs_expand()


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor has been set to expand


</return>
</function>

<function name="clutter_actor_get_z_position">
<description>
Retrieves the actor's position on the Z axis.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the position on the Z axis.


</return>
</function>

<function name="clutter_actor_grab_key_focus">
<description>
Sets the key focus of the #ClutterStage including @self
to this #ClutterActor.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_has_actions">
<description>
Returns whether the actor has any actions applied.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor has any actions,
%FALSE otherwise


</return>
</function>

<function name="clutter_actor_has_allocation">
<description>
Checks if the actor has an up-to-date allocation assigned to
it. This means that the actor should have an allocation: it's
visible and has a parent. It also means that there is no
outstanding relayout request in progress for the actor or its
children (There might be other outstanding layout requests in
progress that will cause the actor to get a new allocation
when the stage is laid out, however).

If this function returns %FALSE, then the actor will normally
be allocated before it is next drawn on the screen.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor has an up-to-date allocation


</return>
</function>

<function name="clutter_actor_has_clip">
<description>
Determines whether the actor has a clip area set or not.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor has a clip area set.


</return>
</function>

<function name="clutter_actor_has_constraints">
<description>
Returns whether the actor has any constraints applied.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor has any constraints,
%FALSE otherwise


</return>
</function>

<function name="clutter_actor_has_effects">
<description>
Returns whether the actor has any effects applied.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor has any effects,
%FALSE otherwise


</return>
</function>

<function name="clutter_actor_has_key_focus">
<description>
Checks whether @self is the #ClutterActor that has key focus


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor has key focus, and %FALSE otherwise


</return>
</function>

<function name="clutter_actor_has_mapped_clones">
<description>
Returns whether the actor has any mapped clones.

Since: 1.16

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_has_overlaps">
<description>
Asks the actor's implementation whether it may contain overlapping
primitives.

For example; Clutter may use this to determine whether the painting
should be redirected to an offscreen buffer to correctly implement
the opacity property.

Custom actors can override the default response by implementing the
#ClutterActor &lt;function&gt;has_overlaps&lt;/function&gt; virtual function. See
clutter_actor_set_offscreen_redirect() for more information.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor may have overlapping primitives, and
%FALSE otherwise


</return>
</function>

<function name="clutter_actor_has_pointer">
<description>
Checks whether an actor contains the pointer of a
#ClutterInputDevice


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor contains the pointer, and
%FALSE otherwise


</return>
</function>

<function name="clutter_actor_hide">
<description>
Flags an actor to be hidden. A hidden actor will not be
rendered on the stage.

Actors are visible by default.

If this function is called on an actor without a parent, the
#ClutterActor:show-on-set-parent property will be set to %FALSE
as a side-effect.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_insert_child_above">
<description>
Inserts @child into the list of children of @self, above another
child of @self or, if @sibling is %NULL, above all the children
of @self.

This function will acquire a reference on @child that will only
be released when calling clutter_actor_remove_child().

This function will not take into consideration the #ClutterActor:depth
of @child.

This function will emit the #ClutterContainer::actor-added signal
on @self.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> a child of @self, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_insert_child_at_index">
<description>
Inserts @child into the list of children of @self, using the
given @index_. If @index_ is greater than the number of children
in @self, or is less than 0, then the new child is added at the end.

This function will acquire a reference on @child that will only
be released when calling clutter_actor_remove_child().

This function will not take into consideration the #ClutterActor:depth
of @child.

This function will emit the #ClutterContainer::actor-added signal
on @self.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_insert_child_below">
<description>
Inserts @child into the list of children of @self, below another
child of @self or, if @sibling is %NULL, below all the children
of @self.

This function will acquire a reference on @child that will only
be released when calling clutter_actor_remove_child().

This function will not take into consideration the #ClutterActor:depth
of @child.

This function will emit the #ClutterContainer::actor-added signal
on @self.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> a child of @self, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_is_in_clone_paint">
<description>
Checks whether @self is being currently painted by a #ClutterClone

This function is useful only inside the ::paint virtual function
implementations or within handlers for the #ClutterActor::paint
signal

This function should not be used by applications


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterActor is currently being painted
by a #ClutterClone, and %FALSE otherwise


</return>
</function>

<function name="clutter_actor_is_rotated">
<description>
Checks whether any rotation is applied to the actor.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is rotated.


</return>
</function>

<function name="clutter_actor_is_scaled">
<description>
Checks whether the actor is scaled in either dimension.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is scaled.


</return>
</function>

<function name="clutter_actor_iter_destroy">
<description>
Safely destroys the #ClutterActor currently pointer to by the iterator
from its parent.

This function can only be called after clutter_actor_iter_next() or
clutter_actor_iter_prev() returned %TRUE, and cannot be called more
than once for the same actor.

This function will call clutter_actor_destroy() internally.



</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterActorIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_iter_init">
<description>
Initializes a #ClutterActorIter, which can then be used to iterate
efficiently over a section of the scene graph, and associates it
with @root.

Modifying the scene graph section that contains @root will invalidate
the iterator.

|[
ClutterActorIter iter;
ClutterActor *child;

clutter_actor_iter_init (&amp;iter, container);
while (clutter_actor_iter_next (&amp;iter, &amp;child))
{
/ * do something with child * /
}
]|



</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterActorIter
</parameter_description>
</parameter>
<parameter name="root">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_iter_is_valid">
<description>
Checks whether a #ClutterActorIter is still valid.

An iterator is considered valid if it has been initialized, and
if the #ClutterActor that it refers to hasn't been modified after
the initialization.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterActorIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the iterator is valid, and %FALSE otherwise


</return>
</function>

<function name="clutter_actor_iter_next">
<description>
Advances the @iter and retrieves the next child of the root #ClutterActor
that was used to initialize the #ClutterActorIterator.

If the iterator can advance, this function returns %TRUE and sets the
@child argument.

If the iterator cannot advance, this function returns %FALSE, and
the contents of @child are undefined.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterActorIter
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> return location for a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the iterator could advance, and %FALSE otherwise.


</return>
</function>

<function name="clutter_actor_iter_prev">
<description>
Advances the @iter and retrieves the previous child of the root
#ClutterActor that was used to initialize the #ClutterActorIterator.

If the iterator can advance, this function returns %TRUE and sets the
@child argument.

If the iterator cannot advance, this function returns %FALSE, and
the contents of @child are undefined.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterActorIter
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> return location for a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the iterator could advance, and %FALSE otherwise.


</return>
</function>

<function name="clutter_actor_iter_remove">
<description>
Safely removes the #ClutterActor currently pointer to by the iterator
from its parent.

This function can only be called after clutter_actor_iter_next() or
clutter_actor_iter_prev() returned %TRUE, and cannot be called more
than once for the same actor.

This function will call clutter_actor_remove_child() internally.



</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterActorIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_map">
<description>
Sets the %CLUTTER_ACTOR_MAPPED flag on the actor and possibly maps
and realizes its children if they are visible. Does nothing if the
actor is not visible.

Calling this function is strongly disencouraged: the default
implementation of #ClutterActorClass.map() will map all the children
of an actor when mapping its parent.

When overriding map, it is mandatory to chain up to the parent
implementation.



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_meta_get_actor">
<description>
Retrieves a pointer to the #ClutterActor that owns @meta


</description>
<parameters>
<parameter name="meta">
<parameter_description> a #ClutterActorMeta
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a #ClutterActor or %NULL


</return>
</function>

<function name="clutter_actor_meta_get_enabled">
<description>
Retrieves whether @meta is enabled


</description>
<parameters>
<parameter name="meta">
<parameter_description> a #ClutterActorMeta
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterActorMeta instance is enabled


</return>
</function>

<function name="clutter_actor_meta_get_name">
<description>
Retrieves the name set using clutter_actor_meta_set_name()


</description>
<parameters>
<parameter name="meta">
<parameter_description> a #ClutterActorMeta
</parameter_description>
</parameter>
</parameters>
<return> the name of the #ClutterActorMeta
instance, or %NULL if none was set. The returned string is owned
by the #ClutterActorMeta instance and it should not be modified
or freed


</return>
</function>

<function name="clutter_actor_meta_set_enabled">
<description>
Sets whether @meta should be enabled or not



</description>
<parameters>
<parameter name="meta">
<parameter_description> a #ClutterActorMeta
</parameter_description>
</parameter>
<parameter name="is_enabled">
<parameter_description> whether @meta is enabled
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_meta_set_name">
<description>
Sets the name of @meta

The name can be used to identify the #ClutterActorMeta instance



</description>
<parameters>
<parameter name="meta">
<parameter_description> a #ClutterActorMeta
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of @meta
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_move_by">
<description>
Changes the fixed position of an actor by @dx on the horizontal
axis, and by @dy on the vertical axis.



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="dx">
<parameter_description> Distance to move Actor on X axis.
</parameter_description>
</parameter>
<parameter name="dy">
<parameter_description> Distance to move Actor on Y axis.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_needs_expand">
<description>
Checks whether an actor, or any of its children, is set to expand
horizontally or vertically.

This function should only be called by layout managers that can
assign extra space to their children.

If you want to know whether the actor was explicitly set to expand,
use clutter_actor_get_x_expand() or clutter_actor_get_y_expand().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="orientation">
<parameter_description> the direction of expansion
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor should expand


</return>
</function>

<function name="clutter_actor_new">
<description>
Creates a new #ClutterActor.

A newly created actor has a floating reference, which will be sunk
when it is added to another actor.


</description>
<parameters>
</parameters>
<return> the newly created #ClutterActor


</return>
</function>

<function name="clutter_actor_paint">
<description>
Renders the actor to display.

This function should not be called directly by applications.
Call clutter_actor_queue_redraw() to queue paints, instead.

This function is context-aware, and will either cause a
regular paint or a pick paint.

This function will emit the #ClutterActor::paint signal or
the #ClutterActor::pick signal, depending on the context.

This function does not paint the actor if the actor is set to 0,
unless it is performing a pick paint.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_queue_redraw">
<description>
Queues up a redraw of an actor and any children. The redraw occurs
once the main loop becomes idle (after the current batch of events
has been processed, roughly).

Applications rarely need to call this, as redraws are handled
automatically by modification functions.

This function will not do anything if @self is not visible, or
if the actor is inside an invisible part of the scenegraph.

Also be aware that painting is a NOP for actors with an opacity of
0

When you are implementing a custom actor you must queue a redraw
whenever some private state changes that will affect painting or
picking of your actor.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_queue_redraw_with_clip">
<description>
Queues a redraw on @self limited to a specific, actor-relative
rectangular area.

If @clip is %NULL this function is equivalent to
clutter_actor_queue_redraw().



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="clip">
<parameter_description> a rectangular clip region, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_queue_relayout">
<description>
Indicates that the actor's size request or other layout-affecting
properties may have changed. This function is used inside #ClutterActor
subclass implementations, not by applications directly.

Queueing a new layout automatically queues a redraw as well.



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_realize">
<description>
Realization informs the actor that it is attached to a stage. It
can use this to allocate resources if it wanted to delay allocation
until it would be rendered. However it is perfectly acceptable for
an actor to create resources before being realized because Clutter
only ever has a single rendering context so that actor is free to
be moved from one stage to another.

This function does nothing if the actor is already realized.

Because a realized actor must have realized parent actors, calling
clutter_actor_realize() will also realize all parents of the actor.

This function does not realize child actors, except in the special
case that realizing the stage, when the stage is visible, will
suddenly map (and thus realize) the children of the stage.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_remove_action">
<description>
Removes @action from the list of actions applied to @self

The reference held by @self on the #ClutterAction will be released



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> a #ClutterAction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_remove_action_by_name">
<description>
Removes the #ClutterAction with the given name from the list
of actions applied to @self



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the action to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_remove_all_children">
<description>
Removes all children of @self.

This function releases the reference added by inserting a child actor
in the list of children of @self.

If the reference count of a child drops to zero, the child will be
destroyed. If you want to ensure the destruction of all the children
of @self, use clutter_actor_destroy_all_children().



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_remove_all_transitions">
<description>
Removes all transitions associated to @self.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_remove_child">
<description>
Removes @child from the children of @self.

This function will release the reference added by
clutter_actor_add_child(), so if you want to keep using @child
you will have to acquire a referenced on it before calling this
function.

This function will emit the #ClutterContainer::actor-removed
signal on @self.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_remove_clip">
<description>
Removes clip area from @self.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_remove_constraint">
<description>
Removes @constraint from the list of constraints applied to @self

The reference held by @self on the #ClutterConstraint will be released



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="constraint">
<parameter_description> a #ClutterConstraint
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_remove_constraint_by_name">
<description>
Removes the #ClutterConstraint with the given name from the list
of constraints applied to @self



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the constraint to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_remove_effect">
<description>
Removes @effect from the list of effects applied to @self

The reference held by @self on the #ClutterEffect will be released



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="effect">
<parameter_description> a #ClutterEffect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_remove_effect_by_name">
<description>
Removes the #ClutterEffect with the given name from the list
of effects applied to @self



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the effect to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_remove_transition">
<description>
Removes the transition stored inside a #ClutterActor using @name
identifier.

If the transition is currently in progress, it will be stopped.

This function releases the reference acquired when the transition
was added to the #ClutterActor.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the transition to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_replace_child">
<description>
Replaces @old_child with @new_child in the list of children of @self.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="old_child">
<parameter_description> the child of @self to replace
</parameter_description>
</parameter>
<parameter name="new_child">
<parameter_description> the #ClutterActor to replace @old_child
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_restore_easing_state">
<description>
Restores the easing state as it was prior to a call to
clutter_actor_save_easing_state().



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_save_easing_state">
<description>
Saves the current easing state for animatable properties, and creates
a new state with the default values for easing mode and duration.

New transitions created after calling this function will inherit the
duration, easing mode, and delay of the new easing state; this also
applies to transitions modified in flight.

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_allocation">
<description>
Stores the allocation of @self as defined by @box.

This function can only be called from within the implementation of
the #ClutterActorClass.allocate() virtual function.

The allocation should have been adjusted to take into account constraints,
alignment, and margin properties. If you are implementing a #ClutterActor
subclass that provides its own layout management policy for its children
instead of using a #ClutterLayoutManager delegate, you should not call
this function on the children of @self; instead, you should call
clutter_actor_allocate(), which will adjust the allocation box for
you.

This function should only be used by subclasses of #ClutterActor
that wish to store their allocation but cannot chain up to the
parent's implementation; the default implementation of the
#ClutterActorClass.allocate() virtual function will call this
function.

It is important to note that, while chaining up was the recommended
behaviour for #ClutterActor subclasses prior to the introduction of
this function, it is recommended to call clutter_actor_set_allocation()
instead.

If the #ClutterActor is using a #ClutterLayoutManager delegate object
to handle the allocation of its children, this function will call
the clutter_layout_manager_allocate() function only if the
%CLUTTER_DELEGATE_LAYOUT flag is set on @flags, otherwise it is
expected that the subclass will call clutter_layout_manager_allocate()
by itself. For instance, the following code:

|[
static void
my_actor_allocate (ClutterActor *actor,
const ClutterActorBox *allocation,
ClutterAllocationFlags flags)
{
ClutterActorBox new_alloc;
ClutterAllocationFlags new_flags;

adjust_allocation (allocation, &amp;new_alloc);

new_flags = flags | CLUTTER_DELEGATE_LAYOUT;

/ * this will use the layout manager set on the actor * /
clutter_actor_set_allocation (actor, &amp;new_alloc, new_flags);
}
]|

is equivalent to this:

|[
static void
my_actor_allocate (ClutterActor *actor,
const ClutterActorBox *allocation,
ClutterAllocationFlags flags)
{
ClutterLayoutManager *layout;
ClutterActorBox new_alloc;

adjust_allocation (allocation, &amp;new_alloc);

clutter_actor_set_allocation (actor, &amp;new_alloc, flags);

layout = clutter_actor_get_layout_manager (actor);
clutter_layout_manager_allocate (layout,
CLUTTER_CONTAINER (actor),
&amp;new_alloc,
flags);
}
]|



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> allocation flags
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_background_color">
<description>
Sets the background color of a #ClutterActor.

The background color will be used to cover the whole allocation of the
actor. The default background color of an actor is transparent.

To check whether an actor has a background color, you can use the
#ClutterActor:background-color-set actor property.

The #ClutterActor:background-color property is animatable.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #ClutterColor, or %NULL to unset a previously
set color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_child_above_sibling">
<description>
Sets @child to be above @sibling in the list of children of @self.

If @sibling is %NULL, @child will be the new last child of @self.

This function is logically equivalent to removing @child and using
clutter_actor_insert_child_above(), but it will not emit signals
or change state on @child.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #ClutterActor child of @self
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> a #ClutterActor child of @self, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_child_at_index">
<description>
Changes the index of @child in the list of children of @self.

This function is logically equivalent to removing @child and
calling clutter_actor_insert_child_at_index(), but it will not
emit signals or change state on @child.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #ClutterActor child of @self
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the new index for @child
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_child_below_sibling">
<description>
Sets @child to be below @sibling in the list of children of @self.

If @sibling is %NULL, @child will be the new first child of @self.

This function is logically equivalent to removing @self and using
clutter_actor_insert_child_below(), but it will not emit signals
or change state on @child.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #ClutterActor child of @self
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> a #ClutterActor child of @self, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_child_transform">
<description>
Sets the transformation matrix to be applied to all the children
of @self prior to their own transformations. The default child
transformation is the identity matrix.

If @transform is %NULL, the child transform will be unset.

The #ClutterActor:child-transform property is animatable.

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="transform">
<parameter_description> a #ClutterMatrix, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_clip">
<description>
Sets clip area for @self. The clip area is always computed from the
upper left corner of the actor.



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="xoff">
<parameter_description> X offset of the clip rectangle
</parameter_description>
</parameter>
<parameter name="yoff">
<parameter_description> Y offset of the clip rectangle
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of the clip rectangle
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of the clip rectangle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_clip_to_allocation">
<description>
Sets whether @self should be clipped to the same size as its
allocation



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="clip_set">
<parameter_description> %TRUE to apply a clip tracking the allocation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_content">
<description>
Sets the contents of a #ClutterActor.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="content">
<parameter_description> a #ClutterContent, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_content_gravity">
<description>
Sets the gravity of the #ClutterContent used by @self.

See the description of the #ClutterActor:content-gravity property for
more information.

The #ClutterActor:content-gravity property is animatable.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="gravity">
<parameter_description> the #ClutterContentGravity
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_content_repeat">
<description>
Sets the policy for repeating the #ClutterActor:content of a
#ClutterActor. The behaviour is deferred to the #ClutterContent
implementation.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="repeat">
<parameter_description> the repeat policy
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_content_scaling_filters">
<description>
Sets the minification and magnification filter to be applied when
scaling the #ClutterActor:content of a #ClutterActor.

The #ClutterActor:minification-filter will be used when reducing
the size of the content; the #ClutterActor:magnification-filter
will be used when increasing the size of the content.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="min_filter">
<parameter_description> the minification filter for the content
</parameter_description>
</parameter>
<parameter name="mag_filter">
<parameter_description> the magnification filter for the content
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_easing_delay">
<description>
Sets the delay that should be applied before tweening animatable
properties.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> the delay before the start of the tweening, in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_easing_duration">
<description>
Sets the duration of the tweening for animatable properties
of @self for the current easing state.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> the duration of the easing, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_easing_mode">
<description>
Sets the easing mode for the tweening of animatable properties
of @self.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> an easing mode, excluding %CLUTTER_CUSTOM_MODE
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_fixed_position_set">
<description>
Sets whether an actor has a fixed position set (and will thus be
unaffected by any layout manager).



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="is_set">
<parameter_description> whether to use fixed position
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_flags">
<description>
Sets @flags on @self

This function will emit notifications for the changed properties



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the flags to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_height">
<description>
Forces a height on an actor, causing the actor's preferred width
and height (if any) to be ignored.

If @height is -1 the actor will use its preferred height instead of
overriding it, i.e. you can &quot;unset&quot; the height with -1.

This function sets both the minimum and natural size of the actor.

since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Requested new height for the actor, in pixels, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_layout_manager">
<description>
Sets the #ClutterLayoutManager delegate object that will be used to
lay out the children of @self.

The #ClutterActor will take a reference on the passed @manager which
will be released either when the layout manager is removed, or when
the actor is destroyed.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager, or %NULL to unset it
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_margin">
<description>
Sets all the components of the margin of a #ClutterActor.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="margin">
<parameter_description> a #ClutterMargin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_margin_bottom">
<description>
Sets the margin from the bottom of a #ClutterActor.

The #ClutterActor:margin-bottom property is animatable.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="margin">
<parameter_description> the bottom margin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_margin_left">
<description>
Sets the margin from the left of a #ClutterActor.

The #ClutterActor:margin-left property is animatable.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="margin">
<parameter_description> the left margin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_margin_right">
<description>
Sets the margin from the right of a #ClutterActor.

The #ClutterActor:margin-right property is animatable.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="margin">
<parameter_description> the right margin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_margin_top">
<description>
Sets the margin from the top of a #ClutterActor.

The #ClutterActor:margin-top property is animatable.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="margin">
<parameter_description> the top margin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_name">
<description>
Sets the given name to @self. The name can be used to identify
a #ClutterActor.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> Textual tag to apply to actor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_offscreen_redirect">
<description>
Defines the circumstances where the actor should be redirected into
an offscreen image. The offscreen image is used to flatten the
actor into a single image while painting for two main reasons.
Firstly, when the actor is painted a second time without any of its
contents changing it can simply repaint the cached image without
descending further down the actor hierarchy. Secondly, it will make
the opacity look correct even if there are overlapping primitives
in the actor.

Caching the actor could in some cases be a performance win and in
some cases be a performance lose so it is important to determine
which value is right for an actor before modifying this value. For
example, there is never any reason to flatten an actor that is just
a single texture (such as a #ClutterTexture) because it is
effectively already cached in an image so the offscreen would be
redundant. Also if the actor contains primitives that are far apart
with a large transparent area in the middle (such as a large
CluterGroup with a small actor in the top left and a small actor in
the bottom right) then the cached image will contain the entire
image of the large area and the paint will waste time blending all
of the transparent pixels in the middle.

The default method of implementing opacity on a container simply
forwards on the opacity to all of the children. If the children are
overlapping then it will appear as if they are two separate glassy
objects and there will be a break in the color where they
overlap. By redirecting to an offscreen buffer it will be as if the
two opaque objects are combined into one and then made transparent
which is usually what is expected.

The image below demonstrates the difference between redirecting and
not. The image shows two Clutter groups, each containing a red and
a green rectangle which overlap. The opacity on the group is set to
128 (which is 50%). When the offscreen redirect is not used, the
red rectangle can be seen through the blue rectangle as if the two
rectangles were separately transparent. When the redirect is used
the group as a whole is transparent instead so the red rectangle is
not visible where they overlap.

&lt;figure id=&quot;offscreen-redirect&quot;&gt;
&lt;title&gt;Sample of using an offscreen redirect for transparency&lt;/title&gt;
&lt;graphic fileref=&quot;offscreen-redirect.png&quot; format=&quot;PNG&quot;/&gt;
&lt;/figure&gt;

The default value for this property is 0, so we effectively will
never redirect an actor offscreen by default. This means that there
are times that transparent actors may look glassy as described
above. The reason this is the default is because there is a
performance trade off between quality and performance here. In many
cases the default form of glassy opacity looks good enough, but if
it's not you will need to set the
%CLUTTER_OFFSCREEN_REDIRECT_AUTOMATIC_FOR_OPACITY flag to enable
redirection for opacity.

Custom actors that don't contain any overlapping primitives are
recommended to override the has_overlaps() virtual to return %FALSE
for maximum efficiency.



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="redirect">
<parameter_description> New offscreen redirect flags for the actor.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_opacity">
<description>
Sets the actor's opacity, with zero being completely transparent and
255 (0xff) being fully opaque.

The #ClutterActor:opacity property is animatable.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="opacity">
<parameter_description> New opacity value for the actor.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_pivot_point">
<description>
Sets the position of the #ClutterActor:pivot-point around which the
scaling and rotation transformations occur.

The pivot point's coordinates are in normalized space, with the (0, 0)
point being the top left corner of the actor, and the (1, 1) point being
the bottom right corner.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="pivot_x">
<parameter_description> the normalized X coordinate of the pivot point
</parameter_description>
</parameter>
<parameter name="pivot_y">
<parameter_description> the normalized Y coordinate of the pivot point
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_pivot_point_z">
<description>
Sets the component on the Z axis of the #ClutterActor:pivot-point around
which the scaling and rotation transformations occur.

The @pivot_z value is expressed as a distance along the Z axis.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="pivot_z">
<parameter_description> the Z coordinate of the actor's pivot point
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_position">
<description>
Sets the actor's fixed position in pixels relative to any parent
actor.

If a layout manager is in use, this position will override the
layout manager and force a fixed position.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> New left position of actor in pixels.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> New top position of actor in pixels.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_reactive">
<description>
Sets @actor as reactive. Reactive actors will receive events.



</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="reactive">
<parameter_description> whether the actor should be reactive to events
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_request_mode">
<description>
Sets the geometry request mode of @self.

The @mode determines the order for invoking
clutter_actor_get_preferred_width() and
clutter_actor_get_preferred_height()



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the request mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_rotation_angle">
<description>
Sets the @angle of rotation of a #ClutterActor on the given @axis.

This function is a convenience for setting the rotation properties
#ClutterActor:rotation-angle-x, #ClutterActor:rotation-angle-y,
and #ClutterActor:rotation-angle-z.

The center of rotation is established by the #ClutterActor:pivot-point
property.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the axis to set the angle one
</parameter_description>
</parameter>
<parameter name="angle">
<parameter_description> the angle of rotation, in degrees
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_scale">
<description>
Scales an actor with the given factors.

The scale transformation is relative the the #ClutterActor:pivot-point.

The #ClutterActor:scale-x and #ClutterActor:scale-y properties are
animatable.



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> double factor to scale actor by horizontally.
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> double factor to scale actor by vertically.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_scale_z">
<description>
Scales an actor on the Z axis by the given @scale_z factor.

The scale transformation is relative the the #ClutterActor:pivot-point.

The #ClutterActor:scale-z property is animatable.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="scale_z">
<parameter_description> the scaling factor along the Z axis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_size">
<description>
Sets the actor's size request in pixels. This overrides any
&quot;normal&quot; size request the actor would have. For example
a text actor might normally request the size of the text;
this function would force a specific size instead.

If @width and/or @height are -1 the actor will use its
&quot;normal&quot; size request instead of overriding it, i.e.
you can &quot;unset&quot; the size with -1.

This function sets or unsets both the minimum and natural size.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> New width of actor in pixels, or -1
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> New height of actor in pixels, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_text_direction">
<description>
Sets the #ClutterTextDirection for an actor

The passed text direction must not be %CLUTTER_TEXT_DIRECTION_DEFAULT

If @self implements #ClutterContainer then this function will recurse
inside all the children of @self (including the internal ones).

Composite actors not implementing #ClutterContainer, or actors requiring
special handling when the text direction changes, should connect to
the #GObject::notify signal for the #ClutterActor:text-direction property



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="text_dir">
<parameter_description> the text direction for @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_transform">
<description>
Overrides the transformations of a #ClutterActor with a custom
matrix, which will be applied relative to the origin of the
actor's allocation and to the actor's pivot point.

The #ClutterActor:transform property is animatable.

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="transform">
<parameter_description> a #ClutterMatrix, or %NULL to
unset a custom transformation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_translation">
<description>
Sets an additional translation transformation on a #ClutterActor,
relative to the #ClutterActor:pivot-point.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="translate_x">
<parameter_description> the translation along the X axis
</parameter_description>
</parameter>
<parameter name="translate_y">
<parameter_description> the translation along the Y axis
</parameter_description>
</parameter>
<parameter name="translate_z">
<parameter_description> the translation along the Z axis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_width">
<description>
Forces a width on an actor, causing the actor's preferred width
and height (if any) to be ignored.

If @width is -1 the actor will use its preferred width request
instead of overriding it, i.e. you can &quot;unset&quot; the width with -1.

This function sets both the minimum and natural size of the actor.

since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Requested new width for the actor, in pixels, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_x">
<description>
Sets the actor's X coordinate, relative to its parent, in pixels.

Overrides any layout manager and forces a fixed position for
the actor.

The #ClutterActor:x property is animatable.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the actor's position on the X axis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_x_align">
<description>
Sets the horizontal alignment policy of a #ClutterActor, in case the
actor received extra horizontal space.

See also the #ClutterActor:x-align property.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="x_align">
<parameter_description> the horizontal alignment policy
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_x_expand">
<description>
Sets whether a #ClutterActor should expand horizontally; this means
that layout manager should allocate extra space for the actor, if
possible.

Setting an actor to expand will also make all its parent expand, so
that it's possible to build an actor tree and only set this flag on
its leaves and not on every single actor.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> whether the actor should expand horizontally
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_y">
<description>
Sets the actor's Y coordinate, relative to its parent, in pixels.#

Overrides any layout manager and forces a fixed position for
the actor.

The #ClutterActor:y property is animatable.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the actor's position on the Y axis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_y_align">
<description>
Sets the vertical alignment policy of a #ClutterActor, in case the
actor received extra vertical space.

See also the #ClutterActor:y-align property.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="y_align">
<parameter_description> the vertical alignment policy
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_y_expand">
<description>
Sets whether a #ClutterActor should expand horizontally; this means
that layout manager should allocate extra space for the actor, if
possible.

Setting an actor to expand will also make all its parent expand, so
that it's possible to build an actor tree and only set this flag on
its leaves and not on every single actor.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> whether the actor should expand vertically
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_z_position">
<description>
Sets the actor's position on the Z axis.

See #ClutterActor:z-position.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="z_position">
<parameter_description> the position on the Z axis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_should_pick_paint">
<description>
Should be called inside the implementation of the
#ClutterActor::pick virtual function in order to check whether
the actor should paint itself in pick mode or not.

This function should never be called directly by applications.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor should paint its silhouette,
%FALSE otherwise
</return>
</function>

<function name="clutter_actor_show">
<description>
Flags an actor to be displayed. An actor that isn't shown will not
be rendered on the stage.

Actors are visible by default.

If this function is called on an actor without a parent, the
#ClutterActor:show-on-set-parent will be set to %TRUE as a side
effect.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_transform_stage_point">
<description>
This function translates screen coordinates (@x, @y) to
coordinates relative to the actor. For example, it can be used to translate
screen events from global screen coordinates into actor-local coordinates.

The conversion can fail, notably if the transform stack results in the
actor being projected on the screen as a mere line.

The conversion should not be expected to be pixel-perfect due to the
nature of the operation. In general the error grows when the skewing
of the actor rectangle on screen increases.

&lt;note&gt;&lt;para&gt;This function can be computationally intensive.&lt;/para&gt;&lt;/note&gt;

&lt;note&gt;&lt;para&gt;This function only works when the allocation is up-to-date,
i.e. inside of paint().&lt;/para&gt;&lt;/note&gt;


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x screen coordinate of the point to unproject
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y screen coordinate of the point to unproject
</parameter_description>
</parameter>
<parameter name="x_out">
<parameter_description> return location for the unprojected x coordinance
</parameter_description>
</parameter>
<parameter name="y_out">
<parameter_description> return location for the unprojected y coordinance
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if conversion was successful.


</return>
</function>

<function name="clutter_actor_unmap">
<description>
Unsets the %CLUTTER_ACTOR_MAPPED flag on the actor and possibly
unmaps its children if they were mapped.

Calling this function is not encouraged: the default #ClutterActor
implementation of #ClutterActorClass.unmap() will also unmap any
eventual children by default when their parent is unmapped.

When overriding #ClutterActorClass.unmap(), it is mandatory to
chain up to the parent implementation.

&lt;note&gt;It is important to note that the implementation of the
#ClutterActorClass.unmap() virtual function may be called after
the #ClutterActorClass.destroy() or the #GObjectClass.dispose()
implementation, but it is guaranteed to be called before the
#GObjectClass.finalize() implementation.&lt;/note&gt;



</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_unrealize">
<description>
Unrealization informs the actor that it may be being destroyed or
moved to another stage. The actor may want to destroy any
underlying graphics resources at this point. However it is
perfectly acceptable for it to retain the resources until the actor
is destroyed because Clutter only ever uses a single rendering
context and all of the graphics resources are valid on any stage.

Because mapped actors must be realized, actors may not be
unrealized if they are mapped. This function hides the actor to be
sure it isn't mapped, an application-visible side effect that you
may not be expecting.

This function should not be called by application code.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_unset_flags">
<description>
Unsets @flags on @self

This function will emit notifications for the changed properties



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the flags to unset
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_align_constraint_get_align_axis">
<description>
Retrieves the value set using clutter_align_constraint_set_align_axis()


</description>
<parameters>
<parameter name="align">
<parameter_description> a #ClutterAlignConstraint
</parameter_description>
</parameter>
</parameters>
<return> the alignment axis


</return>
</function>

<function name="clutter_align_constraint_get_factor">
<description>
Retrieves the factor set using clutter_align_constraint_set_factor()


</description>
<parameters>
<parameter name="align">
<parameter_description> a #ClutterAlignConstraint
</parameter_description>
</parameter>
</parameters>
<return> the alignment factor


</return>
</function>

<function name="clutter_align_constraint_get_source">
<description>
Retrieves the source of the alignment


</description>
<parameters>
<parameter name="align">
<parameter_description> a #ClutterAlignConstraint
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterActor used as the source
of the alignment


</return>
</function>

<function name="clutter_align_constraint_new">
<description>
Creates a new constraint, aligning a #ClutterActor's position with
regards of the size of the actor to @source, with the given
alignment @factor


</description>
<parameters>
<parameter name="source">
<parameter_description> the #ClutterActor to use as the source of the
alignment, or %NULL
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the axis to be used to compute the alignment
</parameter_description>
</parameter>
<parameter name="factor">
<parameter_description> the alignment factor, between 0.0 and 1.0
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterAlignConstraint


</return>
</function>

<function name="clutter_align_constraint_set_align_axis">
<description>
Sets the axis to which the alignment refers to



</description>
<parameters>
<parameter name="align">
<parameter_description> a #ClutterAlignConstraint
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the axis to which the alignment refers to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_align_constraint_set_factor">
<description>
Sets the alignment factor of the constraint

The factor depends on the #ClutterAlignConstraint:align-axis property
and it is a value between 0.0 (meaning left, when
#ClutterAlignConstraint:align-axis is set to %CLUTTER_ALIGN_X_AXIS; or
meaning top, when #ClutterAlignConstraint:align-axis is set to
%CLUTTER_ALIGN_Y_AXIS) and 1.0 (meaning right, when
#ClutterAlignConstraint:align-axis is set to %CLUTTER_ALIGN_X_AXIS; or
meaning bottom, when #ClutterAlignConstraint:align-axis is set to
%CLUTTER_ALIGN_Y_AXIS). A value of 0.5 aligns in the middle in either
cases



</description>
<parameters>
<parameter name="align">
<parameter_description> a #ClutterAlignConstraint
</parameter_description>
</parameter>
<parameter name="factor">
<parameter_description> the alignment factor, between 0.0 and 1.0
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_align_constraint_set_source">
<description>
Sets the source of the alignment constraint



</description>
<parameters>
<parameter name="align">
<parameter_description> a #ClutterAlignConstraint
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a #ClutterActor, or %NULL to unset the source
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animatable_find_property">
<description>
Finds the #GParamSpec for @property_name


</description>
<parameters>
<parameter name="animatable">
<parameter_description> a #ClutterAnimatable
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the animatable property to find
</parameter_description>
</parameter>
</parameters>
<return> The #GParamSpec for the given property
or %NULL


</return>
</function>

<function name="clutter_animatable_get_initial_state">
<description>
Retrieves the current state of @property_name and sets @value with it



</description>
<parameters>
<parameter name="animatable">
<parameter_description> a #ClutterAnimatable
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the animatable property to retrieve
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue initialized to the type of the property to retrieve
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animatable_interpolate_value">
<description>
Asks a #ClutterAnimatable implementation to interpolate a
a named property between the initial and final values of
a #ClutterInterval, using @progress as the interpolation
value, and store the result inside @value.

This function should be used for every property animation
involving #ClutterAnimatable&lt;!-- --&gt;s.


</description>
<parameters>
<parameter name="animatable">
<parameter_description> a #ClutterAnimatable
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to interpolate
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> a #ClutterInterval with the animation range
</parameter_description>
</parameter>
<parameter name="progress">
<parameter_description> the progress to use to interpolate between the
initial and final values of the @interval
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> return location for an initialized #GValue
using the same type of the @interval
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the interpolation was successful,
and %FALSE otherwise


</return>
</function>

<function name="clutter_animatable_set_final_state">
<description>
Sets the current state of @property_name to @value



</description>
<parameters>
<parameter name="animatable">
<parameter_description> a #ClutterAnimatable
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the animatable property to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the animatable property to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_backend_get_cogl_context">
<description>
Retrieves the #CoglContext associated with the given clutter
@backend. A #CoglContext is required when using some of the
experimental 2.0 Cogl API.

&lt;note&gt;Since CoglContext is itself experimental API this API should
be considered experimental too.&lt;/note&gt;

&lt;note&gt;This API is not yet supported on OSX because OSX still
uses the stub Cogl winsys and the Clutter backend doesn't
explicitly create a CoglContext.&lt;/note&gt;


</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
</parameters>
<return> The #CoglContext associated with @backend.


Stability: unstable
</return>
</function>

<function name="clutter_backend_get_font_options">
<description>
Retrieves the font options for @backend.


</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
</parameters>
<return> the font options of the #ClutterBackend.
The returned #cairo_font_options_t is owned by the backend and should
not be modified or freed


</return>
</function>

<function name="clutter_backend_get_resolution">
<description>
Gets the resolution for font handling on the screen.

The resolution is a scale factor between points specified in a
#PangoFontDescription and cairo units. The default value is 96.0,
meaning that a 10 point font will be 13 units
high (10 * 96. / 72. = 13.3).

Clutter will set the resolution using the current backend when
initializing; the resolution is also stored in the
#ClutterSettings:font-dpi property.


</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
</parameters>
<return> the current resolution, or -1 if no resolution
has been set.


</return>
</function>

<function name="clutter_backend_set_font_options">
<description>
Sets the new font options for @backend. The #ClutterBackend will
copy the #cairo_font_options_t.

If @options is %NULL, the first following call to
clutter_backend_get_font_options() will return the default font
options for @backend.

This function is intended for actors creating a Pango layout
using the PangoCairo API.



</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> Cairo font options for the backend, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_bin_layout_new">
<description>
Creates a new #ClutterBinLayout layout manager


</description>
<parameters>
</parameters>
<return> the newly created layout manager
</return>
</function>

<function name="clutter_bind_constraint_get_coordinate">
<description>
Retrieves the bound coordinate of the constraint


</description>
<parameters>
<parameter name="constraint">
<parameter_description> a #ClutterBindConstraint
</parameter_description>
</parameter>
</parameters>
<return> the bound coordinate


</return>
</function>

<function name="clutter_bind_constraint_get_offset">
<description>
Retrieves the offset set using clutter_bind_constraint_set_offset()


</description>
<parameters>
<parameter name="constraint">
<parameter_description> a #ClutterBindConstraint
</parameter_description>
</parameter>
</parameters>
<return> the offset, in pixels


</return>
</function>

<function name="clutter_bind_constraint_get_source">
<description>
Retrieves the #ClutterActor set using clutter_bind_constraint_set_source()


</description>
<parameters>
<parameter name="constraint">
<parameter_description> a #ClutterBindConstraint
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the source actor


</return>
</function>

<function name="clutter_bind_constraint_new">
<description>
Creates a new constraint, binding a #ClutterActor's position to
the given @coordinate of the position of @source


</description>
<parameters>
<parameter name="source">
<parameter_description> the #ClutterActor to use as the source of
the binding, or %NULL
</parameter_description>
</parameter>
<parameter name="coordinate">
<parameter_description> the coordinate to bind
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset to apply to the binding, in pixels
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterBindConstraint


</return>
</function>

<function name="clutter_bind_constraint_set_coordinate">
<description>
Sets the coordinate to bind in the constraint



</description>
<parameters>
<parameter name="constraint">
<parameter_description> a #ClutterBindConstraint
</parameter_description>
</parameter>
<parameter name="coordinate">
<parameter_description> the coordinate to bind
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_bind_constraint_set_offset">
<description>
Sets the offset to be applied to the constraint



</description>
<parameters>
<parameter name="constraint">
<parameter_description> a #ClutterBindConstraint
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset to apply, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_bind_constraint_set_source">
<description>
Sets the source #ClutterActor for the constraint



</description>
<parameters>
<parameter name="constraint">
<parameter_description> a #ClutterBindConstraint
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a #ClutterActor, or %NULL to unset the source
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_binding_pool_activate">
<description>
Activates the callback associated to the action that is
bound to the @key_val and @modifiers pair.

The callback has the following signature:

|[
void (* callback) (GObject             *gobject,
const gchar         *action_name,
guint                key_val,
ClutterModifierType  modifiers,
gpointer             user_data);
]|

Where the #GObject instance is @gobject and the user data
is the one passed when installing the action with
clutter_binding_pool_install_action().

If the action bound to the @key_val, @modifiers pair has been
blocked using clutter_binding_pool_block_action(), the callback
will not be invoked, and this function will return %FALSE.


</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="key_val">
<parameter_description> the key symbol
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> bitmask for the modifiers
</parameter_description>
</parameter>
<parameter name="gobject">
<parameter_description> a #GObject
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if an action was found and was activated


</return>
</function>

<function name="clutter_binding_pool_block_action">
<description>
Blocks all the actions with name @action_name inside @pool.



</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> an action name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_binding_pool_find">
<description>
Finds the #ClutterBindingPool with @name.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the binding pool to find
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #ClutterBindingPool, or %NULL


</return>
</function>

<function name="clutter_binding_pool_find_action">
<description>
Retrieves the name of the action matching the given key symbol
and modifiers bitmask.


</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="key_val">
<parameter_description> a key symbol
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> a bitmask for the modifiers
</parameter_description>
</parameter>
</parameters>
<return> the name of the action, if found, or %NULL. The
returned string is owned by the binding pool and should never
be modified or freed


</return>
</function>

<function name="clutter_binding_pool_get_for_class">
<description>
Retrieves the #ClutterBindingPool for the given #GObject class
and, eventually, creates it. This function is a wrapper around
clutter_binding_pool_new() and uses the class type name as the
unique name for the binding pool.

Calling this function multiple times will return the same
#ClutterBindingPool.

A binding pool for a class can also be retrieved using
clutter_binding_pool_find() with the class type name:

|[
pool = clutter_binding_pool_find (G_OBJECT_TYPE_NAME (instance));
]|


</description>
<parameters>
<parameter name="klass">
<parameter_description> a #GObjectClass pointer
</parameter_description>
</parameter>
</parameters>
<return> the binding pool for the given class.
The returned #ClutterBindingPool is owned by Clutter and should not
be freed directly


</return>
</function>

<function name="clutter_binding_pool_install_action">
<description>
Installs a new action inside a #ClutterBindingPool. The action
is bound to @key_val and @modifiers.

The same action name can be used for multiple @key_val, @modifiers
pairs.

When an action has been activated using clutter_binding_pool_activate()
the passed @callback will be invoked (with @data).

Actions can be blocked with clutter_binding_pool_block_action()
and then unblocked using clutter_binding_pool_unblock_action().



</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of the action
</parameter_description>
</parameter>
<parameter name="key_val">
<parameter_description> key symbol
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> bitmask of modifiers
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> function to be called
when the action is activated
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to be passed to @callback
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to be called when the action is removed
from the pool
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_binding_pool_install_closure">
<description>
A #GClosure variant of clutter_binding_pool_install_action().

Installs a new action inside a #ClutterBindingPool. The action
is bound to @key_val and @modifiers.

The same action name can be used for multiple @key_val, @modifiers
pairs.

When an action has been activated using clutter_binding_pool_activate()
the passed @closure will be invoked.

Actions can be blocked with clutter_binding_pool_block_action()
and then unblocked using clutter_binding_pool_unblock_action().



</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of the action
</parameter_description>
</parameter>
<parameter name="key_val">
<parameter_description> key symbol
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> bitmask of modifiers
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description> a #GClosure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_binding_pool_new">
<description>
Creates a new #ClutterBindingPool that can be used to store
key bindings for an actor. The @name must be a unique identifier
for the binding pool, so that clutter_binding_pool_find() will
be able to return the correct binding pool.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the binding pool
</parameter_description>
</parameter>
</parameters>
<return> the newly created binding pool with the given
name. Use g_object_unref() when done.


</return>
</function>

<function name="clutter_binding_pool_override_action">
<description>
Allows overriding the action for @key_val and @modifiers inside a
#ClutterBindingPool. See clutter_binding_pool_install_action().

When an action has been activated using clutter_binding_pool_activate()
the passed @callback will be invoked (with @data).

Actions can be blocked with clutter_binding_pool_block_action()
and then unblocked using clutter_binding_pool_unblock_action().



</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="key_val">
<parameter_description> key symbol
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> bitmask of modifiers
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> function to be called when the action is activated
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to be passed to @callback
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to be called when the action is removed
from the pool
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_binding_pool_override_closure">
<description>
A #GClosure variant of clutter_binding_pool_override_action().

Allows overriding the action for @key_val and @modifiers inside a
#ClutterBindingPool. See clutter_binding_pool_install_closure().

When an action has been activated using clutter_binding_pool_activate()
the passed @callback will be invoked (with @data).

Actions can be blocked with clutter_binding_pool_block_action()
and then unblocked using clutter_binding_pool_unblock_action().



</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="key_val">
<parameter_description> key symbol
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> bitmask of modifiers
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description> a #GClosure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_binding_pool_remove_action">
<description>
Removes the action matching the given @key_val, @modifiers pair,
if any exists.



</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="key_val">
<parameter_description> a key symbol
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> a bitmask for the modifiers
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_binding_pool_unblock_action">
<description>
Unblockes all the actions with name @action_name inside @pool.

Unblocking an action does not cause the callback bound to it to
be invoked in case clutter_binding_pool_activate() was called on
an action previously blocked with clutter_binding_pool_block_action().



</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> an action name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_blur_effect_new">
<description>
Creates a new #ClutterBlurEffect to be used with
clutter_actor_add_effect()


</description>
<parameters>
</parameters>
<return> the newly created #ClutterBlurEffect or %NULL


</return>
</function>

<function name="clutter_box_layout_get_homogeneous">
<description>
Retrieves if the children sizes are allocated homogeneously.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterBoxLayout is arranging its children
homogeneously, and %FALSE otherwise


</return>
</function>

<function name="clutter_box_layout_get_orientation">
<description>
Retrieves the orientation of the @layout.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
</parameters>
<return> the orientation of the layout


</return>
</function>

<function name="clutter_box_layout_get_pack_start">
<description>
Retrieves the value set using clutter_box_layout_set_pack_start()


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterBoxLayout should pack children
at the beginning of the layout, and %FALSE otherwise


</return>
</function>

<function name="clutter_box_layout_get_spacing">
<description>
Retrieves the spacing set using clutter_box_layout_set_spacing()


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
</parameters>
<return> the spacing between children of the #ClutterBoxLayout


</return>
</function>

<function name="clutter_box_layout_new">
<description>
Creates a new #ClutterBoxLayout layout manager


</description>
<parameters>
</parameters>
<return> the newly created #ClutterBoxLayout


</return>
</function>

<function name="clutter_box_layout_set_homogeneous">
<description>
Sets whether the size of @layout children should be
homogeneous



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="homogeneous">
<parameter_description> %TRUE if the layout should be homogeneous
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_box_layout_set_orientation">
<description>
Sets the orientation of the #ClutterBoxLayout layout manager.



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="orientation">
<parameter_description> the orientation of the #ClutterBoxLayout
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_box_layout_set_pack_start">
<description>
Sets whether children of @layout should be layed out by appending
them or by prepending them



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="pack_start">
<parameter_description> %TRUE if the @layout should pack children at the
beginning of the layout
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_box_layout_set_spacing">
<description>
Sets the spacing between children of @layout



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="spacing">
<parameter_description> the spacing between children of the layout, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_brightness_contrast_effect_get_brightness">
<description>
Retrieves the change in brightness used by @effect.



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterBrightnessContrastEffect
</parameter_description>
</parameter>
<parameter name="red">
<parameter_description> return location for red component of the
change in brightness
</parameter_description>
</parameter>
<parameter name="green">
<parameter_description> return location for green component of the
change in brightness
</parameter_description>
</parameter>
<parameter name="blue">
<parameter_description> return location for blue component of the
change in brightness
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_brightness_contrast_effect_get_contrast">
<description>
Retrieves the contrast value used by @effect.



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterBrightnessContrastEffect
</parameter_description>
</parameter>
<parameter name="red">
<parameter_description> return location for red component of the
change in contrast
</parameter_description>
</parameter>
<parameter name="green">
<parameter_description> return location for green component of the
change in contrast
</parameter_description>
</parameter>
<parameter name="blue">
<parameter_description> return location for blue component of the
change in contrast
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_brightness_contrast_effect_new">
<description>
Creates a new #ClutterBrightnessContrastEffect to be used with
clutter_actor_add_effect()


</description>
<parameters>
</parameters>
<return> the newly created
#ClutterBrightnessContrastEffect or %NULL.  Use g_object_unref() when
done.


</return>
</function>

<function name="clutter_brightness_contrast_effect_set_brightness">
<description>
The range of @brightness is [-1.0, 1.0], where 0.0 designates no change;
a value below 0.0 indicates a decrease in brightness; and a value
above 0.0 indicates an increase of brightness.



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterBrightnessContrastEffect
</parameter_description>
</parameter>
<parameter name="brightness">
<parameter_description>  the brightness change for all three components (r, g, b)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_brightness_contrast_effect_set_brightness_full">
<description>
The range for each component is [-1.0, 1.0] where 0.0 designates no change,
values below 0.0 mean a decrease in brightness, and values above indicate
an increase.



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterBrightnessContrastEffect
</parameter_description>
</parameter>
<parameter name="red">
<parameter_description> red component of the change in brightness
</parameter_description>
</parameter>
<parameter name="green">
<parameter_description> green component of the change in brightness
</parameter_description>
</parameter>
<parameter name="blue">
<parameter_description> blue component of the change in brightness
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_brightness_contrast_effect_set_contrast">
<description>
The range for @contrast is [-1.0, 1.0], where 0.0 designates no change;
a value below 0.0 indicates a decrease in contrast; and a value above
0.0 indicates an increase.



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterBrightnessContrastEffect
</parameter_description>
</parameter>
<parameter name="contrast">
<parameter_description> contrast change for all three channels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_brightness_contrast_effect_set_contrast_full">
<description>
The range for each component is [-1.0, 1.0] where 0.0 designates no change,
values below 0.0 mean a decrease in contrast, and values above indicate
an increase.



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterBrightnessContrastEffect
</parameter_description>
</parameter>
<parameter name="red">
<parameter_description> red component of the change in contrast
</parameter_description>
</parameter>
<parameter name="green">
<parameter_description> green component of the change in contrast
</parameter_description>
</parameter>
<parameter name="blue">
<parameter_description> blue component of the change in contrast
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_cairo_clear">
<description>
Utility function to clear a Cairo context.



</description>
<parameters>
<parameter name="cr">
<parameter_description> a Cairo context
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_cairo_set_source_color">
<description>
Utility function for setting the source color of @cr using
a #ClutterColor. This function is the equivalent of:

|[
cairo_set_source_rgba (cr,
color-&gt;red / 255.0,
color-&gt;green / 255.0,
color-&gt;blue / 255.0,
color-&gt;alpha / 255.0);
]|



</description>
<parameters>
<parameter name="cr">
<parameter_description> a Cairo context
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_canvas_new">
<description>
Creates a new instance of #ClutterCanvas.

You should call clutter_canvas_set_size() to set the size of the canvas.

You should call clutter_content_invalidate() every time you wish to
draw the contents of the canvas.


</description>
<parameters>
</parameters>
<return> The newly allocated instance of
#ClutterCanvas. Use g_object_unref() when done.


</return>
</function>

<function name="clutter_canvas_set_size">
<description>
Sets the size of the @canvas.

This function will cause the @canvas to be invalidated.



</description>
<parameters>
<parameter name="canvas">
<parameter_description> a #ClutterCanvas
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the canvas, in pixels
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the canvas, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_cex100_get_egl_display">
<description>
Retrieves the EGL display used by Clutter, if it supports the
EGL windowing system and if it is running using an EGL backend.


</description>
<parameters>
</parameters>
<return> the EGL display used by Clutter, or 0


</return>
</function>

<function name="clutter_cex100_set_buffering_mode">
<description>
Configure the buffering mode of the underlying GDL plane. The GDL
surface used by Clutter to draw can be backed up by either one or two
back buffers thus being double or triple buffered, respectively.

Clutter defaults to %CLUTTER_CEX100_TRIPLE_BUFFERING.

&lt;note&gt;This function has to be called before clutter_init()&lt;/note&gt;



</description>
<parameters>
<parameter name="mode">
<parameter_description> a #ClutterCex100BufferingMode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_cex100_set_plane">
<description>
Intel CE3100 and CE4100 have several planes (frame buffers) and a
hardware blender to blend the planes togeteher and produce the final
image.

clutter_cex100_set_plane() let's you configure the GDL plane where
the stage will be drawn. By default Clutter will pick UPP_C
(GDL_PLANE_ID_UPP_C).

&lt;note&gt;This function has to be called before clutter_init()&lt;/note&gt;



</description>
<parameters>
<parameter name="plane">
<parameter_description> a GDL plane
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_check_version">
<description>
Run-time version check, to check the version the Clutter library
that an application is currently linked against

This is the run-time equivalent of the compile-time %CLUTTER_CHECK_VERSION
pre-processor macro


</description>
<parameters>
<parameter name="major">
<parameter_description> major version, like 1 in 1.2.3
</parameter_description>
</parameter>
<parameter name="minor">
<parameter_description> minor version, like 2 in 1.2.3
</parameter_description>
</parameter>
<parameter name="micro">
<parameter_description> micro version, like 3 in 1.2.3
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the version of the Clutter library is
greater than (@major, @minor, @micro), and %FALSE otherwise


</return>
</function>

<function name="clutter_check_windowing_backend">
<description>
Checks the run-time name of the Clutter windowing system backend, using
the symbolic macros like %CLUTTER_WINDOWING_WIN32 or
%CLUTTER_WINDOWING_X11.

This function should be used in conjuction with the compile-time macros
inside applications and libraries that are using the platform-specific
windowing system API, to ensure that they are running on the correct
windowing system; for instance:

|[
&#35;ifdef CLUTTER_WINDOWING_X11
if (clutter_check_windowing_backend (CLUTTER_WINDOWING_X11))
{
/ * it is safe to use the clutter_x11_* API * /
}
else
&#35;endif
&#35;ifdef CLUTTER_WINDOWING_WIN32
if (clutter_check_windowing_backend (CLUTTER_WINDOWING_WIN32))
{
/ * it is safe to use the clutter_win32_* API * /
}
else
&#35;endif
g_error (&quot;Unknown Clutter backend.&quot;);
]|


</description>
<parameters>
<parameter name="backend_type">
<parameter_description> the name of the backend to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the current Clutter windowing system backend is
the one checked, and %FALSE otherwise


</return>
</function>

<function name="clutter_child_meta_get_actor">
<description>
Retrieves the actor wrapped by @data


</description>
<parameters>
<parameter name="data">
<parameter_description> a #ClutterChildMeta
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterActor


</return>
</function>

<function name="clutter_child_meta_get_container">
<description>
Retrieves the container using @data


</description>
<parameters>
<parameter name="data">
<parameter_description> a #ClutterChildMeta
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterContainer


</return>
</function>

<function name="clutter_click_action_get_button">
<description>
Retrieves the button that was pressed.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterClickAction
</parameter_description>
</parameter>
</parameters>
<return> the button value


</return>
</function>

<function name="clutter_click_action_get_coords">
<description>
Retrieves the screen coordinates of the button press.



</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterClickAction
</parameter_description>
</parameter>
<parameter name="press_x">
<parameter_description> return location for the X coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="press_y">
<parameter_description> return location for the Y coordinate, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_click_action_get_state">
<description>
Retrieves the modifier state of the click action.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterClickAction
</parameter_description>
</parameter>
</parameters>
<return> the modifier state parameter, or 0


</return>
</function>

<function name="clutter_click_action_new">
<description>
Creates a new #ClutterClickAction instance


</description>
<parameters>
</parameters>
<return> the newly created #ClutterClickAction


</return>
</function>

<function name="clutter_click_action_release">
<description>
Emulates a release of the pointer button, which ungrabs the pointer
and unsets the #ClutterClickAction:pressed state.

This function will also cancel the long press gesture if one was
initiated.

This function is useful to break a grab, for instance after a certain
amount of time has passed.



</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterClickAction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_clip_node_new">
<description>
Creates a new #ClutterPaintNode that will clip its child
nodes to the 2D regions added to it.


</description>
<parameters>
</parameters>
<return> the newly created #ClutterPaintNode.
Use clutter_paint_node_unref() when done.


</return>
</function>

<function name="clutter_clone_get_source">
<description>
Retrieves the source #ClutterActor being cloned by @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterClone
</parameter_description>
</parameter>
</parameters>
<return> the actor source for the clone


</return>
</function>

<function name="clutter_clone_new">
<description>
Creates a new #ClutterActor which clones @source/


</description>
<parameters>
<parameter name="source">
<parameter_description> a #ClutterActor, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterClone


</return>
</function>

<function name="clutter_clone_set_source">
<description>
Sets @source as the source actor to be cloned by @self.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterClone
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a #ClutterActor, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_add">
<description>
Adds @a to @b and saves the resulting color inside @result.

The alpha channel of @result is set as as the maximum value
between the alpha channels of @a and @b.

</description>
<parameters>
<parameter name="a">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> return location for the result
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_alloc">
<description>
Allocates a new, transparent black #ClutterColor.


</description>
<parameters>
</parameters>
<return> the newly allocated #ClutterColor; use
clutter_color_free() to free its resources


</return>
</function>

<function name="clutter_color_copy">
<description>
Makes a copy of the color structure.  The result must be
freed using clutter_color_free().


</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> an allocated copy of @color.


</return>
</function>

<function name="clutter_color_darken">
<description>
Darkens @color by a fixed amount, and saves the changed color
in @result.

</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> return location for the darker color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_equal">
<description>
Compares two #ClutterColor&lt;!-- --&gt;s and checks if they are the same.

This function can be passed to g_hash_table_new() as the @key_equal_func
parameter, when using #ClutterColor&lt;!-- --&gt;s as keys in a #GHashTable.


</description>
<parameters>
<parameter name="v1">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="v2">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two colors are the same.


</return>
</function>

<function name="clutter_color_free">
<description>
Frees a color structure created with clutter_color_copy().



</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_from_hls">
<description>
Converts a color expressed in HLS (hue, luminance and saturation)
values into a #ClutterColor.

</description>
<parameters>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
<parameter name="hue">
<parameter_description> hue value, in the 0 .. 360 range
</parameter_description>
</parameter>
<parameter name="luminance">
<parameter_description> luminance value, in the 0 .. 1 range
</parameter_description>
</parameter>
<parameter name="saturation">
<parameter_description> saturation value, in the 0 .. 1 range
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_from_pixel">
<description>
Converts @pixel from the packed representation of a four 8 bit channel
color to a #ClutterColor.

</description>
<parameters>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
<parameter name="pixel">
<parameter_description> a 32 bit packed integer containing a color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_from_string">
<description>
Parses a string definition of a color, filling the
&lt;structfield&gt;red&lt;/structfield&gt;, &lt;structfield&gt;green&lt;/structfield&gt;, 
&lt;structfield&gt;blue&lt;/structfield&gt; and &lt;structfield&gt;alpha&lt;/structfield&gt; 
channels of @color.

The @color is not allocated.

The format of @str can be either one of:

&lt;itemizedlist&gt;
&lt;listitem&gt;
&lt;para&gt;a standard name (as taken from the X11 rgb.txt file)&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;an hexadecimal value in the form: &lt;literal&gt;&#35;rgb&lt;/literal&gt;,
&lt;literal&gt;&#35;rrggbb&lt;/literal&gt;, &lt;literal&gt;&#35;rgba&lt;/literal&gt; or
&lt;literal&gt;&#35;rrggbbaa&lt;/literal&gt;&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;a RGB color in the form: &lt;literal&gt;rgb(r, g, b)&lt;/literal&gt;&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;a RGB color in the form: &lt;literal&gt;rgba(r, g, b, a)&lt;/literal&gt;&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;a HSL color in the form: &lt;literal&gt;hsl(h, s, l)&lt;/literal&gt;&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;a HSL color in the form: &lt;literal&gt;hsla(h, s, l, a)&lt;/literal&gt;&lt;/para&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;

where 'r', 'g', 'b' and 'a' are (respectively) the red, green, blue color
intensities and the opacity. The 'h', 's' and 'l' are (respectively) the
hue, saturation and luminance values.

In the rgb() and rgba() formats, the 'r', 'g', and 'b' values are either
integers between 0 and 255, or percentage values in the range between 0%
and 100%; the percentages require the '%' character. The 'a' value, if
specified, can only be a floating point value between 0.0 and 1.0.

In the hls() and hlsa() formats, the 'h' value (hue) it's an angle between
0 and 360.0 degrees; the 'l' and 's' values (luminance and saturation) are
a floating point value between 0.0 and 1.0. The 'a' value, if specified,
can only be a floating point value between 0.0 and 1.0.

Whitespace inside the definitions is ignored; no leading whitespace
is allowed.

If the alpha component is not specified then it is assumed to be set to
be fully opaque.


</description>
<parameters>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string specifiying a color
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if parsing succeeded, and %FALSE otherwise


</return>
</function>

<function name="clutter_color_get_static">
<description>
Retrieves a static color for the given @color name

Static colors are created by Clutter and are guaranteed to always be
available and valid


</description>
<parameters>
<parameter name="color">
<parameter_description> the named global color
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a static color; the returned pointer
is owned by Clutter and it should never be modified or freed


</return>
</function>

<function name="clutter_color_hash">
<description>
Converts a #ClutterColor to a hash value.

This function can be passed to g_hash_table_new() as the @hash_func
parameter, when using #ClutterColor&lt;!-- --&gt;s as keys in a #GHashTable.


</description>
<parameters>
<parameter name="v">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> a hash value corresponding to the color


</return>
</function>

<function name="clutter_color_init">
<description>
Initializes @color with the given values.


</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="red">
<parameter_description> red component of the color, between 0 and 255
</parameter_description>
</parameter>
<parameter name="green">
<parameter_description> green component of the color, between 0 and 255
</parameter_description>
</parameter>
<parameter name="blue">
<parameter_description> blue component of the color, between 0 and 255
</parameter_description>
</parameter>
<parameter name="alpha">
<parameter_description> alpha component of the color, between 0 and 255
</parameter_description>
</parameter>
</parameters>
<return> the initialized #ClutterColor


</return>
</function>

<function name="clutter_color_interpolate">
<description>
Interpolates between @initial and @final #ClutterColor&lt;!-- --&gt;s
using @progress



</description>
<parameters>
<parameter name="initial">
<parameter_description> the initial #ClutterColor
</parameter_description>
</parameter>
<parameter name="final">
<parameter_description> the final #ClutterColor
</parameter_description>
</parameter>
<parameter name="progress">
<parameter_description> the interpolation progress
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> return location for the interpolation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_lighten">
<description>
Lightens @color by a fixed amount, and saves the changed color
in @result.

</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> return location for the lighter color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_new">
<description>
Creates a new #ClutterColor with the given values.

This function is the equivalent of:

|[
clutter_color_init (clutter_color_alloc (), red, green, blue, alpha);
]|


</description>
<parameters>
<parameter name="red">
<parameter_description> red component of the color, between 0 and 255
</parameter_description>
</parameter>
<parameter name="green">
<parameter_description> green component of the color, between 0 and 255
</parameter_description>
</parameter>
<parameter name="blue">
<parameter_description> blue component of the color, between 0 and 255
</parameter_description>
</parameter>
<parameter name="alpha">
<parameter_description> alpha component of the color, between 0 and 255
</parameter_description>
</parameter>
</parameters>
<return> the newly allocated color.
Use clutter_color_free() when done


</return>
</function>

<function name="clutter_color_node_new">
<description>
Creates a new #ClutterPaintNode that will paint a solid color
fill using @color.


</description>
<parameters>
<parameter name="color">
<parameter_description> the color to paint, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterPaintNode. Use
clutter_paint_node_unref() when done


</return>
</function>

<function name="clutter_color_shade">
<description>
Shades @color by @factor and saves the modified color into @result.

</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="factor">
<parameter_description> the shade factor to apply
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> return location for the shaded color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_subtract">
<description>
Subtracts @b from @a and saves the resulting color inside @result.

This function assumes that the components of @a are greater than the
components of @b; the result is, otherwise, undefined.

The alpha channel of @result is set as the minimum value
between the alpha channels of @a and @b.

</description>
<parameters>
<parameter name="a">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> return location for the result
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_to_hls">
<description>
Converts @color to the HLS format.

The @hue value is in the 0 .. 360 range. The @luminance and
@saturation values are in the 0 .. 1 range.

</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="hue">
<parameter_description> return location for the hue value or %NULL
</parameter_description>
</parameter>
<parameter name="luminance">
<parameter_description> return location for the luminance value or %NULL
</parameter_description>
</parameter>
<parameter name="saturation">
<parameter_description> return location for the saturation value or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_to_pixel">
<description>
Converts @color into a packed 32 bit integer, containing
all the four 8 bit channels used by #ClutterColor.


</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> a packed color
</return>
</function>

<function name="clutter_color_to_string">
<description>
Returns a textual specification of @color in the hexadecimal form
&lt;literal&gt;&#35;rrggbbaa&lt;/literal&gt;, where &lt;literal&gt;r&lt;/literal&gt;,
&lt;literal&gt;g&lt;/literal&gt;, &lt;literal&gt;b&lt;/literal&gt; and &lt;literal&gt;a&lt;/literal&gt; are
hexadecimal digits representing the red, green, blue and alpha components
respectively.


</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated text string


</return>
</function>

<function name="clutter_colorize_effect_get_tint">
<description>
Retrieves the tint used by @effect



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterColorizeEffect
</parameter_description>
</parameter>
<parameter name="tint">
<parameter_description> return location for the color used
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_colorize_effect_new">
<description>
Creates a new #ClutterColorizeEffect to be used with
clutter_actor_add_effect()


</description>
<parameters>
<parameter name="tint">
<parameter_description> the color to be used
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterColorizeEffect or %NULL


</return>
</function>

<function name="clutter_colorize_effect_set_tint">
<description>
Sets the tint to be used when colorizing



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterColorizeEffect
</parameter_description>
</parameter>
<parameter name="tint">
<parameter_description> the color to be used
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_child_get">
<description>
Gets @container specific properties of an actor.

In general, a copy is made of the property contents and the caller is
responsible for freeing the memory in the appropriate manner for the type, for
instance by calling g_free() or g_object_unref(). 



</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor that is a child of @container.
</parameter_description>
</parameter>
<parameter name="first_prop">
<parameter_description> name of the first property to be set.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value for the first property, followed optionally by more name/value
pairs terminated with NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_child_get_property">
<description>
Gets a container specific property of a child of @container, In general,
a copy is made of the property contents and the caller is responsible for
freeing the memory by calling g_value_unset().

Note that clutter_container_child_set_property() is really intended for
language bindings, clutter_container_child_set() is much more convenient
for C programming.



</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #ClutterActor that is a child of @container.
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> the name of the property to set.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_child_notify">
<description>
Calls the #ClutterContainerIface.child_notify() virtual function
of #ClutterContainer. The default implementation will emit the
#ClutterContainer::child-notify signal.



</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> a #GParamSpec
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_child_set">
<description>
Sets container specific properties on the child of a container.



</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor that is a child of @container.
</parameter_description>
</parameter>
<parameter name="first_prop">
<parameter_description> name of the first property to be set.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value for the first property, followed optionally by more name/value
pairs terminated with NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_child_set_property">
<description>
Sets a container-specific property on a child of @container.



</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #ClutterActor that is a child of @container.
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> the name of the property to set.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_class_find_child_property">
<description>
Looks up the #GParamSpec for a child property of @klass.


</description>
<parameters>
<parameter name="klass">
<parameter_description> a #GObjectClass implementing the #ClutterContainer interface.
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> a property name.
</parameter_description>
</parameter>
</parameters>
<return> The #GParamSpec for the property or %NULL
if no such property exist.


</return>
</function>

<function name="clutter_container_class_list_child_properties">
<description>
Returns an array of #GParamSpec for all child properties.


</description>
<parameters>
<parameter name="klass">
<parameter_description> a #GObjectClass implementing the #ClutterContainer interface.
</parameter_description>
</parameter>
<parameter name="n_properties">
<parameter_description> return location for length of returned array.
</parameter_description>
</parameter>
</parameters>
<return> an array
of #GParamSpec&lt;!-- --&gt;s which should be freed after use.


</return>
</function>

<function name="clutter_container_create_child_meta">
<description>
Creates the #ClutterChildMeta wrapping @actor inside the
@container, if the #ClutterContainerIface::child_meta_type
class member is not set to %G_TYPE_INVALID.

This function is only useful when adding a #ClutterActor to
a #ClutterContainer implementation outside of the
#ClutterContainer::add() virtual function implementation.

Applications should not call this function.



</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_destroy_child_meta">
<description>
Destroys the #ClutterChildMeta wrapping @actor inside the
@container, if any.

This function is only useful when removing a #ClutterActor to
a #ClutterContainer implementation outside of the
#ClutterContainer::add() virtual function implementation.

Applications should not call this function.



</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_get_child_meta">
<description>
Retrieves the #ClutterChildMeta which contains the data about the
@container specific state for @actor.


</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor that is a child of @container.
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterChildMeta for the @actor child
of @container or %NULL if the specifiec actor does not exist or the
container is not configured to provide #ClutterChildMeta&lt;!-- --&gt;s


</return>
</function>

<function name="clutter_content_get_preferred_size">
<description>
Retrieves the natural size of the @content, if any.

The natural size of a #ClutterContent is defined as the size the content
would have regardless of the allocation of the actor that is painting it,
for instance the size of an image data.


</description>
<parameters>
<parameter name="content">
<parameter_description> a #ClutterContent
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the natural width of the content
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the natural height of the content
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the content has a preferred size, and %FALSE
otherwise


</return>
</function>

<function name="clutter_content_invalidate">
<description>
Invalidates a #ClutterContent.

This function should be called by #ClutterContent implementations when
they change the way a the content should be painted regardless of the
actor state.



</description>
<parameters>
<parameter name="content">
<parameter_description> a #ClutterContent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_deform_effect_get_back_material">
<description>
Retrieves the handle to the back face material used by @effect


</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterDeformEffect
</parameter_description>
</parameter>
</parameters>
<return> a handle for the material, or %NULL.
The returned material is owned by the #ClutterDeformEffect and it
should not be freed directly


</return>
</function>

<function name="clutter_deform_effect_get_n_tiles">
<description>
Retrieves the number of horizontal and vertical tiles used to sub-divide
the actor's geometry during the effect



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterDeformEffect
</parameter_description>
</parameter>
<parameter name="x_tiles">
<parameter_description> return location for the number of horizontal tiles,
or %NULL
</parameter_description>
</parameter>
<parameter name="y_tiles">
<parameter_description> return location for the number of vertical tiles,
or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_deform_effect_invalidate">
<description>
Invalidates the @effect&lt;!-- --&gt;'s vertices and, if it is associated
to an actor, it will queue a redraw



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterDeformEffect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_deform_effect_set_back_material">
<description>
Sets the material that should be used when drawing the back face
of the actor during a deformation

The #ClutterDeformEffect will take a reference on the material's
handle



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterDeformEffect
</parameter_description>
</parameter>
<parameter name="material">
<parameter_description> a handle to a Cogl material
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_deform_effect_set_n_tiles">
<description>
Sets the number of horizontal and vertical tiles to be used
when applying the effect

More tiles allow a finer grained deformation at the expenses
of computation



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterDeformEffect
</parameter_description>
</parameter>
<parameter name="x_tiles">
<parameter_description> number of horizontal tiles
</parameter_description>
</parameter>
<parameter name="y_tiles">
<parameter_description> number of vertical tiles
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_desaturate_effect_get_factor">
<description>
Retrieves the desaturation factor of @effect


</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterDesaturateEffect
</parameter_description>
</parameter>
</parameters>
<return> the desaturation factor


</return>
</function>

<function name="clutter_desaturate_effect_new">
<description>
Creates a new #ClutterDesaturateEffect to be used with
clutter_actor_add_effect()


</description>
<parameters>
<parameter name="factor">
<parameter_description> the desaturation factor, between 0.0 and 1.0
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterDesaturateEffect or %NULL


</return>
</function>

<function name="clutter_desaturate_effect_set_factor">
<description>
Sets the desaturation factor for @effect, with 0.0 being &quot;do not desaturate&quot;
and 1.0 being &quot;fully desaturate&quot;



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterDesaturateEffect
</parameter_description>
</parameter>
<parameter name="factor">
<parameter_description> the desaturation factor, between 0.0 and 1.0
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_device_manager_get_core_device">
<description>
Retrieves the core #ClutterInputDevice of type @device_type

Core devices are devices created automatically by the default
Clutter backend


</description>
<parameters>
<parameter name="device_manager">
<parameter_description> a #ClutterDeviceManager
</parameter_description>
</parameter>
<parameter name="device_type">
<parameter_description> the type of the core device
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterInputDevice or %NULL. The
returned device is owned by the #ClutterDeviceManager and should
not be modified or freed


</return>
</function>

<function name="clutter_device_manager_get_default">
<description>
Retrieves the device manager singleton


</description>
<parameters>
</parameters>
<return> the #ClutterDeviceManager singleton.
The returned instance is owned by Clutter and it should not be
modified or freed


</return>
</function>

<function name="clutter_device_manager_get_device">
<description>
Retrieves the #ClutterInputDevice with the given @device_id


</description>
<parameters>
<parameter name="device_manager">
<parameter_description> a #ClutterDeviceManager
</parameter_description>
</parameter>
<parameter name="device_id">
<parameter_description> the integer id of a device
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterInputDevice or %NULL. The
returned device is owned by the #ClutterDeviceManager and should
never be modified or freed


</return>
</function>

<function name="clutter_device_manager_list_devices">
<description>
Lists all currently registered input devices


</description>
<parameters>
<parameter name="device_manager">
<parameter_description> a #ClutterDeviceManager
</parameter_description>
</parameter>
</parameters>
<return>
a newly allocated list of #ClutterInputDevice objects. Use
g_slist_free() to deallocate it when done


</return>
</function>

<function name="clutter_device_manager_peek_devices">
<description>
Lists all currently registered input devices


</description>
<parameters>
<parameter name="device_manager">
<parameter_description> a #ClutterDeviceManager
</parameter_description>
</parameter>
</parameters>
<return>
a pointer to the internal list of #ClutterInputDevice objects. The
returned list is owned by the #ClutterDeviceManager and should never
be modified or freed


</return>
</function>

<function name="clutter_disable_accessibility">
<description>
Disable loading the accessibility support. It has the same effect
as setting the environment variable
CLUTTER_DISABLE_ACCESSIBILITY. For the same reason, this method
should be called before clutter_init().

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_do_event">
<description>
Processes an event.

The @event must be a valid #ClutterEvent and have a #ClutterStage
associated to it.

This function is only useful when embedding Clutter inside another
toolkit, and it should never be called by applications.



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_drag_action_get_drag_area">
<description>
Retrieves the &quot;drag area&quot; associated with @action, that
is a #ClutterRect that constrains the actor movements,
in parents coordinates.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterDragAction
</parameter_description>
</parameter>
<parameter name="drag_area">
<parameter_description> a #ClutterRect to be filled
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is actually constrained (and thus
@drag_area is valid), %FALSE otherwise
</return>
</function>

<function name="clutter_drag_action_get_drag_axis">
<description>
Retrieves the axis constraint set by clutter_drag_action_set_drag_axis()


</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterDragAction
</parameter_description>
</parameter>
</parameters>
<return> the axis constraint


</return>
</function>

<function name="clutter_drag_action_get_drag_handle">
<description>
Retrieves the drag handle set by clutter_drag_action_set_drag_handle()


</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterDragAction
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterActor, used as the drag
handle, or %NULL if none was set


</return>
</function>

<function name="clutter_drag_action_get_drag_threshold">
<description>
Retrieves the values set by clutter_drag_action_set_drag_threshold().

If the #ClutterDragAction:x-drag-threshold property or the
#ClutterDragAction:y-drag-threshold property have been set to -1 then
this function will return the default drag threshold value as stored
by the #ClutterSettings:dnd-drag-threshold property of #ClutterSettings.



</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterDragAction
</parameter_description>
</parameter>
<parameter name="x_threshold">
<parameter_description> return location for the horizontal drag
threshold value, in pixels
</parameter_description>
</parameter>
<parameter name="y_threshold">
<parameter_description> return location for the vertical drag
threshold value, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_drag_action_get_motion_coords">
<description>
Retrieves the coordinates, in stage space, of the latest motion
event during the dragging



</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterDragAction
</parameter_description>
</parameter>
<parameter name="motion_x">
<parameter_description> return location for the latest motion
event's X coordinate
</parameter_description>
</parameter>
<parameter name="motion_y">
<parameter_description> return location for the latest motion
event's Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_drag_action_get_press_coords">
<description>
Retrieves the coordinates, in stage space, of the press event
that started the dragging



</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterDragAction
</parameter_description>
</parameter>
<parameter name="press_x">
<parameter_description> return location for the press event's X coordinate
</parameter_description>
</parameter>
<parameter name="press_y">
<parameter_description> return location for the press event's Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_drag_action_new">
<description>
Creates a new #ClutterDragAction instance


</description>
<parameters>
</parameters>
<return> the newly created #ClutterDragAction


</return>
</function>

<function name="clutter_drag_action_set_drag_area">
<description>
Sets @drag_area to constrain the dragging of the actor associated
with @action, so that it position is always within @drag_area, expressed
in parent's coordinates.
If @drag_area is %NULL, the actor is not constrained.

</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterDragAction
</parameter_description>
</parameter>
<parameter name="drag_area">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_drag_action_set_drag_axis">
<description>
Restricts the dragging action to a specific axis



</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterDragAction
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the axis to constraint the dragging to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_drag_action_set_drag_handle">
<description>
Sets the actor to be used as the drag handle.



</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterDragAction
</parameter_description>
</parameter>
<parameter name="handle">
<parameter_description> a #ClutterActor, or %NULL to unset
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_drag_action_set_drag_threshold">
<description>
Sets the horizontal and vertical drag thresholds that must be
cleared by the pointer before @action can begin the dragging.

If @x_threshold or @y_threshold are set to -1 then the default
drag threshold stored in the #ClutterSettings:dnd-drag-threshold
property of #ClutterSettings will be used.



</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterDragAction
</parameter_description>
</parameter>
<parameter name="x_threshold">
<parameter_description> a distance on the horizontal axis, in pixels, or
-1 to use the default drag threshold from #ClutterSettings
</parameter_description>
</parameter>
<parameter name="y_threshold">
<parameter_description> a distance on the vertical axis, in pixels, or
-1 to use the default drag threshold from #ClutterSettings
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_drop_action_new">
<description>
Creates a new #ClutterDropAction.

Use clutter_actor_add_action() to add the action to a #ClutterActor.


</description>
<parameters>
</parameters>
<return> the newly created #ClutterDropAction


</return>
</function>

<function name="clutter_effect_queue_repaint">
<description>
Queues a repaint of the effect. The effect can detect when the ‘paint’
method is called as a result of this function because it will not
have the %CLUTTER_EFFECT_PAINT_ACTOR_DIRTY flag set. In that case the
effect is free to assume that the actor has not changed its
appearance since the last time it was painted so it doesn't need to
call clutter_actor_continue_paint() if it can draw a cached
image. This is mostly intended for effects that are using a
%CoglOffscreen to redirect the actor (such as
%ClutterOffscreenEffect). In that case the effect can save a bit of
rendering time by painting the cached texture without causing the
entire actor to be painted.

This function can be used by effects that have their own animatable
parameters. For example, an effect which adds a varying degree of a
red tint to an actor by redirecting it through a CoglOffscreen
might have a property to specify the level of tint. When this value
changes, the underlying actor doesn't need to be redrawn so the
effect can call clutter_effect_queue_repaint() to make sure the
effect is repainted.

Note however that modifying the position of the parent of an actor
may change the appearance of the actor because its transformation
matrix would change. In this case a redraw wouldn't be queued on
the actor itself so the %CLUTTER_EFFECT_PAINT_ACTOR_DIRTY would still
not be set. The effect can detect this case by keeping track of the
last modelview matrix that was used to render the actor and
veryifying that it remains the same in the next paint.

Any other effects that are layered on top of the passed in effect
will still be passed the %CLUTTER_EFFECT_PAINT_ACTOR_DIRTY flag. If
anything queues a redraw on the actor without specifying an effect
or with an effect that is lower in the chain of effects than this
one then that will override this call. In that case this effect
will instead be called with the %CLUTTER_EFFECT_PAINT_ACTOR_DIRTY
flag set.



</description>
<parameters>
<parameter name="effect">
<parameter_description> A #ClutterEffect which needs redrawing
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_egl_display">
<description>
Retrieves the &lt;structname&gt;EGLDisplay&lt;/structname&gt; used by Clutter

Deprecated: 1.6: Use clutter_egl_get_egl_display() instead

</description>
<parameters>
</parameters>
<return> the EGL display

</return>
</function>

<function name="clutter_egl_get_egl_display">
<description>
Retrieves the  &lt;structname&gt;EGLDisplay&lt;/structname&gt; used by Clutter.


</description>
<parameters>
</parameters>
<return> the EGL display


</return>
</function>

<function name="clutter_eglx_display">
<description>
Retrieves the &lt;structname&gt;EGLDisplay&lt;/structname&gt; used by Clutter,
if Clutter has been compiled with EGL and X11 support.

Deprecated: 1.6: Use clutter_egl_get_egl_display() instead

</description>
<parameters>
</parameters>
<return> the EGL display



</return>
</function>

<function name="clutter_evdev_reclaim_devices">
<description>
This causes Clutter to re-probe for evdev devices. This is must only be
called after a corresponding call to clutter_evdev_release_devices()
was previously used to release all evdev devices. This API is typically
used when a clutter application using evdev has regained focus due to
switching ttys.

This function should only be called after clutter has been initialized.


Stability: unstable

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_evdev_release_devices">
<description>
Releases all the evdev devices that Clutter is currently managing. This api
is typically used when switching away from the Clutter application when
switching tty. The devices can be reclaimed later with a call to
clutter_evdev_reclaim_devices().

This function should only be called after clutter has been initialized.


Stability: unstable

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_event_copy">
<description>
Copies @event.


</description>
<parameters>
<parameter name="event">
<parameter_description> A #ClutterEvent.
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #ClutterEvent
</return>
</function>

<function name="clutter_event_free">
<description>
Frees all resources used by @event.

</description>
<parameters>
<parameter name="event">
<parameter_description> A #ClutterEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_get">
<description>
Pops an event off the event queue. Applications should not need to call 
this.


</description>
<parameters>
</parameters>
<return> A #ClutterEvent or NULL if queue empty


</return>
</function>

<function name="clutter_event_get_angle">
<description>
Retrieves the angle relative from @source to @target.

The direction of the angle is from the position X axis towards
the positive Y axis.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the angle between two #ClutterEvent


</return>
</function>

<function name="clutter_event_get_axes">
<description>
Retrieves the array of axes values attached to the event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="n_axes">
<parameter_description> return location for the number of axes returned
</parameter_description>
</parameter>
</parameters>
<return> an array of axis values


</return>
</function>

<function name="clutter_event_get_button">
<description>
Retrieves the button number of @event


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_BUTTON_PRESS or
of type %CLUTTER_BUTTON_RELEASE
</parameter_description>
</parameter>
</parameters>
<return> the button number


</return>
</function>

<function name="clutter_event_get_click_count">
<description>
Retrieves the number of clicks of @event


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_BUTTON_PRESS or
of type %CLUTTER_BUTTON_RELEASE
</parameter_description>
</parameter>
</parameters>
<return> the click count


</return>
</function>

<function name="clutter_event_get_coords">
<description>
Retrieves the coordinates of @event and puts them into @x and @y.



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_get_device">
<description>
Retrieves the #ClutterInputDevice for the event.
If you want the physical device the event originated from, use
clutter_event_get_source_device().

The #ClutterInputDevice structure is completely opaque and should
be cast to the platform-specific implementation.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterInputDevice or %NULL. The
returned device is owned by the #ClutterEvent and it should not
be unreferenced


</return>
</function>

<function name="clutter_event_get_device_id">
<description>
Retrieves the events device id if set.


</description>
<parameters>
<parameter name="event">
<parameter_description> a clutter event 
</parameter_description>
</parameter>
</parameters>
<return> A unique identifier for the device or -1 if the event has
no specific device set.
</return>
</function>

<function name="clutter_event_get_device_type">
<description>
Retrieves the type of the device for @event


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterInputDeviceType for the device, if
any is set


</return>
</function>

<function name="clutter_event_get_distance">
<description>
Retrieves the distance between two events, a @source and a @target.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the distance between two #ClutterEvent


</return>
</function>

<function name="clutter_event_get_event_sequence">
<description>
Retrieves the #ClutterEventSequence of @event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_TOUCH_BEGIN,
%CLUTTER_TOUCH_UPDATE, %CLUTTER_TOUCH_END, or
%CLUTTER_TOUCH_CANCEL
</parameter_description>
</parameter>
</parameters>
<return> the event sequence, or %NULL


</return>
</function>

<function name="clutter_event_get_flags">
<description>
Retrieves the #ClutterEventFlags of @event


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the event flags


</return>
</function>

<function name="clutter_event_get_key_code">
<description>
Retrieves the keycode of the key that caused @event


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_KEY_PRESS or
of type %CLUTTER_KEY_RELEASE
</parameter_description>
</parameter>
</parameters>
<return> The keycode representing the key


</return>
</function>

<function name="clutter_event_get_key_symbol">
<description>
Retrieves the key symbol of @event


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_KEY_PRESS or
of type %CLUTTER_KEY_RELEASE
</parameter_description>
</parameter>
</parameters>
<return> the key symbol representing the key


</return>
</function>

<function name="clutter_event_get_key_unicode">
<description>
Retrieves the unicode value for the key that caused @keyev.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_KEY_PRESS
or %CLUTTER_KEY_RELEASE
</parameter_description>
</parameter>
</parameters>
<return> The unicode value representing the key
</return>
</function>

<function name="clutter_event_get_position">
<description>
Retrieves the event coordinates as a #ClutterPoint.



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> a #ClutterPoint
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_get_related">
<description>
Retrieves the related actor of a crossing event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_ENTER or of
type %CLUTTER_LEAVE
</parameter_description>
</parameter>
</parameters>
<return> the related #ClutterActor, or %NULL


</return>
</function>

<function name="clutter_event_get_scroll_delta">
<description>
Retrieves the precise scrolling information of @event.

The @event has to have a #ClutterScrollEvent.direction value
of %CLUTTER_SCROLL_SMOOTH.



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_SCROLL
</parameter_description>
</parameter>
<parameter name="dx">
<parameter_description> return location for the delta on the horizontal axis
</parameter_description>
</parameter>
<parameter name="dy">
<parameter_description> return location for the delta on the vertical axis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_get_scroll_direction">
<description>
Retrieves the direction of the scrolling of @event


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_SCROLL
</parameter_description>
</parameter>
</parameters>
<return> the scrolling direction


</return>
</function>

<function name="clutter_event_get_source">
<description>
Retrieves the source #ClutterActor the event originated from, or
NULL if the event has no source.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterActor


</return>
</function>

<function name="clutter_event_get_source_device">
<description>
Retrieves the hardware device that originated the event.

If you need the virtual device, use clutter_event_get_device().

If no hardware device originated this event, this function will
return the same device as clutter_event_get_device().


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a #ClutterInputDevice
or %NULL


</return>
</function>

<function name="clutter_event_get_stage">
<description>
Retrieves the source #ClutterStage the event originated for, or
%NULL if the event has no stage.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterStage


</return>
</function>

<function name="clutter_event_get_state">
<description>
Retrieves the modifier state of the event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the modifier state parameter, or 0


</return>
</function>

<function name="clutter_event_get_time">
<description>
Retrieves the time of the event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the time of the event, or %CLUTTER_CURRENT_TIME


</return>
</function>

<function name="clutter_event_has_control_modifier">
<description>
Checks whether @event has the Control modifier mask set.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event has the Control modifier mask set


</return>
</function>

<function name="clutter_event_has_shift_modifier">
<description>
Checks whether @event has the Shift modifier mask set.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event has the Shift modifier mask set


</return>
</function>

<function name="clutter_event_is_pointer_emulated">
<description>
Checks whether a pointer @event has been generated by the windowing
system. The returned value can be used to distinguish between events
synthesized by the windowing system itself (as opposed by Clutter).


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event is pointer emulated


</return>
</function>

<function name="clutter_event_new">
<description>
Creates a new #ClutterEvent of the specified type.


</description>
<parameters>
<parameter name="type">
<parameter_description> The type of event.
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #ClutterEvent.
</return>
</function>

<function name="clutter_event_peek">
<description>
Returns a pointer to the first event from the event queue but 
does not remove it. 


</description>
<parameters>
</parameters>
<return> A #ClutterEvent or NULL if queue empty.


</return>
</function>

<function name="clutter_event_put">
<description>
Puts a copy of the event on the back of the event queue. The event will
have the %CLUTTER_EVENT_FLAG_SYNTHETIC flag set. If the source is set
event signals will be emitted for this source and capture/bubbling for
its ancestors. If the source is not set it will be generated by picking
or use the actor that currently has keyboard focus



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_set_button">
<description>
Sets the button number of @event



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent or type %CLUTTER_BUTTON_PRESS or
of type %CLUTTER_BUTTON_RELEASE
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> the button number
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_set_coords">
<description>
Sets the coordinates of the @event.



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the X coordinate of the event
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the Y coordinate of the event
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_set_device">
<description>
Sets the device for @event.



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> a #ClutterInputDevice, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_set_flags">
<description>
Sets the #ClutterEventFlags of @event



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a binary OR of #ClutterEventFlags values
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_set_key_code">
<description>
Sets the keycode of the @event.



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_KEY_PRESS
or %CLUTTER_KEY_RELEASE
</parameter_description>
</parameter>
<parameter name="key_code">
<parameter_description> the keycode representing the key
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_set_key_symbol">
<description>
Sets the key symbol of @event.



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_KEY_PRESS
or %CLUTTER_KEY_RELEASE
</parameter_description>
</parameter>
<parameter name="key_sym">
<parameter_description> the key symbol representing the key
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_set_key_unicode">
<description>
Sets the Unicode value of @event.



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_KEY_PRESS
or %CLUTTER_KEY_RELEASE
</parameter_description>
</parameter>
<parameter name="key_unicode">
<parameter_description> the Unicode value representing the key
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_set_related">
<description>
Sets the related actor of a crossing event



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_ENTER or %CLUTTER_LEAVE
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_set_scroll_delta">
<description>
Sets the precise scrolling information of @event.



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_SCROLL
</parameter_description>
</parameter>
<parameter name="dx">
<parameter_description> delta on the horizontal axis
</parameter_description>
</parameter>
<parameter name="dy">
<parameter_description> delta on the vertical axis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_set_scroll_direction">
<description>
Sets the direction of the scrolling of @event



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the scrolling direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_set_source">
<description>
Sets the source #ClutterActor of @event.



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_set_source_device">
<description>
Sets the source #ClutterInputDevice for @event.

The #ClutterEvent must have been created using clutter_event_new().



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_set_stage">
<description>
Sets the source #ClutterStage of the event.



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="stage">
<parameter_description> a #ClutterStage, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_set_state">
<description>
Sets the modifier state of the event.



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the modifier state to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_set_time">
<description>
Sets the time of the event.



</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the time of the event
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_type">
<description>
Retrieves the type of the event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterEventType
</return>
</function>

<function name="clutter_events_pending">
<description>
Checks if events are pending in the event queue.


</description>
<parameters>
</parameters>
<return> TRUE if there are pending events, FALSE otherwise.


</return>
</function>

<function name="clutter_feature_available">
<description>
Checks whether @feature is available.  @feature can be a logical
OR of #ClutterFeatureFlags.


</description>
<parameters>
<parameter name="feature">
<parameter_description> a #ClutterFeatureFlags
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a feature is available


</return>
</function>

<function name="clutter_feature_get_all">
<description>
Returns all the supported features.


</description>
<parameters>
</parameters>
<return> a logical OR of all the supported features.


</return>
</function>

<function name="clutter_fixed_layout_new">
<description>
Creates a new #ClutterFixedLayout


</description>
<parameters>
</parameters>
<return> the newly created #ClutterFixedLayout


</return>
</function>

<function name="clutter_flow_layout_get_column_spacing">
<description>
Retrieves the spacing between columns


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
</parameters>
<return> the spacing between columns of the #ClutterFlowLayout,
in pixels


</return>
</function>

<function name="clutter_flow_layout_get_column_width">
<description>
Retrieves the minimum and maximum column widths



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="min_width">
<parameter_description> return location for the minimum column width, or %NULL
</parameter_description>
</parameter>
<parameter name="max_width">
<parameter_description> return location for the maximum column width, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_flow_layout_get_homogeneous">
<description>
Retrieves whether the @layout is homogeneous


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterFlowLayout is homogeneous


</return>
</function>

<function name="clutter_flow_layout_get_orientation">
<description>
Retrieves the orientation of the @layout


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
</parameters>
<return> the orientation of the #ClutterFlowLayout


</return>
</function>

<function name="clutter_flow_layout_get_row_height">
<description>
Retrieves the minimum and maximum row heights



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="min_height">
<parameter_description> return location for the minimum row height, or %NULL
</parameter_description>
</parameter>
<parameter name="max_height">
<parameter_description> return location for the maximum row height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_flow_layout_get_row_spacing">
<description>
Retrieves the spacing between rows


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
</parameters>
<return> the spacing between rows of the #ClutterFlowLayout,
in pixels


</return>
</function>

<function name="clutter_flow_layout_get_snap_to_grid">
<description>
Retrieves the value of #ClutterFlowLayout:snap-to-grid property

Since: 1.16

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @layout is placing its children on a grid

</return>
</function>

<function name="clutter_flow_layout_new">
<description>
Creates a new #ClutterFlowLayout with the given @orientation


</description>
<parameters>
<parameter name="orientation">
<parameter_description> the orientation of the flow layout
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterFlowLayout


</return>
</function>

<function name="clutter_flow_layout_set_column_spacing">
<description>
Sets the space between columns, in pixels



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="spacing">
<parameter_description> the space between columns
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_flow_layout_set_column_width">
<description>
Sets the minimum and maximum widths that a column can have



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="min_width">
<parameter_description> minimum width of a column
</parameter_description>
</parameter>
<parameter name="max_width">
<parameter_description> maximum width of a column
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_flow_layout_set_homogeneous">
<description>
Sets whether the @layout should allocate the same space for
each child



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="homogeneous">
<parameter_description> whether the layout should be homogeneous or not
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_flow_layout_set_orientation">
<description>
Sets the orientation of the flow layout

The orientation controls the direction used to allocate
the children: either horizontally or vertically. The
orientation also controls the direction of the overflowing



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="orientation">
<parameter_description> the orientation of the layout
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_flow_layout_set_row_height">
<description>
Sets the minimum and maximum heights that a row can have



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="min_height">
<parameter_description> the minimum height of a row
</parameter_description>
</parameter>
<parameter name="max_height">
<parameter_description> the maximum height of a row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_flow_layout_set_row_spacing">
<description>
Sets the spacing between rows, in pixels



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="spacing">
<parameter_description> the space between rows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_flow_layout_set_snap_to_grid">
<description>
Whether the @layout should place its children on a grid.

Since: 1.16

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="snap_to_grid">
<parameter_description> %TRUE if @layout should place its children on a grid
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_gdk_disable_event_retrieval">
<description>
Disable the event retrieval in Clutter.

Callers of this function have to set up an event filter using the
GDK API, and call clutter_gdk_handle_event().

This function should only be used when embedding Clutter into
a GDK based toolkit.



</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_gdk_get_default_display">
<description>
Retrieves the pointer to the default display.


</description>
<parameters>
</parameters>
<return> the default display


</return>
</function>

<function name="clutter_gdk_get_stage_from_window">
<description>
Gets the stage for a particular X window.  


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> A #ClutterStage, or% NULL if a stage
does not exist for the window


</return>
</function>

<function name="clutter_gdk_get_stage_window">
<description>
Gets the stages GdkWindow.


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> A GdkWindow* for the stage window.


</return>
</function>

<function name="clutter_gdk_handle_event">
<description>
This function processes a single GDK event; it can be used to hook
into external event processing


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> #GdkFilterReturn. %GDK_FILTER_REMOVE indicates that
Clutter has internally handled the event and the caller should do
no further processing. %GDK_FILTER_CONTINUE indicates that Clutter
is either not interested in the event, or has used the event to
update internal state without taking any exclusive action.
%GDK_FILTER_TRANSLATE will not occur.

</return>
</function>

<function name="clutter_gdk_set_display">
<description>
Sets the display connection Clutter should use; must be called
before clutter_init(), clutter_init_with_args() or other functions
pertaining Clutter's initialization process.

If you are parsing the command line arguments by retrieving Clutter's
#GOptionGroup with clutter_get_option_group() and calling
g_option_context_parse() yourself, you should also call
clutter_gdk_set_display() before g_option_context_parse().



</description>
<parameters>
<parameter name="display">
<parameter_description> pointer to a GDK display connection.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_gdk_set_stage_foreign">
<description>
Target the #ClutterStage to use an existing external #GdkWindow


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> an existing #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if foreign window is valid


</return>
</function>

<function name="clutter_gesture_action_cancel">
<description>
Cancel a #ClutterGestureAction before it begins

</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterGestureAction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_gesture_action_get_device">
<description>
Retrieves the #ClutterInputDevice of a touch point.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterGestureAction
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> the touch point index, with 0 being the first touch
point received by the action
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterInputDevice of a touch point.
</return>
</function>

<function name="clutter_gesture_action_get_last_event">
<description>
Retrieves a reference to the last #ClutterEvent for a touch point. Call
clutter_event_copy() if you need to store the reference somewhere.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterGestureAction
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> index of a point currently active
</parameter_description>
</parameter>
</parameters>
<return> the last #ClutterEvent for a touch point.
</return>
</function>

<function name="clutter_gesture_action_get_motion_coords">
<description>
Retrieves the coordinates, in stage space, of the latest motion
event during the dragging.



</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterGestureAction
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> the touch point index, with 0 being the first touch
point received by the action
</parameter_description>
</parameter>
<parameter name="motion_x">
<parameter_description> return location for the latest motion
event's X coordinate
</parameter_description>
</parameter>
<parameter name="motion_y">
<parameter_description> return location for the latest motion
event's Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_gesture_action_get_motion_delta">
<description>
Retrieves the incremental delta since the last motion event
during the dragging.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterGestureAction
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> the touch point index, with 0 being the first touch
point received by the action
</parameter_description>
</parameter>
<parameter name="delta_x">
<parameter_description> return location for the X axis
component of the incremental motion delta
</parameter_description>
</parameter>
<parameter name="delta_y">
<parameter_description> return location for the Y axis
component of the incremental motion delta
</parameter_description>
</parameter>
</parameters>
<return> the distance since last motion event
</return>
</function>

<function name="clutter_gesture_action_get_n_current_points">
<description>
Retrieves the number of points currently active.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterGestureAction
</parameter_description>
</parameter>
</parameters>
<return> the number of points currently active.
</return>
</function>

<function name="clutter_gesture_action_get_n_touch_points">
<description>
Retrieves the number of requested points to trigger the gesture.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterGestureAction
</parameter_description>
</parameter>
</parameters>
<return> the number of points to trigger the gesture.


</return>
</function>

<function name="clutter_gesture_action_get_press_coords">
<description>
Retrieves the coordinates, in stage space, of the press event
that started the dragging for a specific touch point.



</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterGestureAction
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> the touch point index, with 0 being the first touch
point received by the action
</parameter_description>
</parameter>
<parameter name="press_x">
<parameter_description> return location for the press
event's X coordinate
</parameter_description>
</parameter>
<parameter name="press_y">
<parameter_description> return location for the press
event's Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_gesture_action_get_release_coords">
<description>
Retrieves the coordinates, in stage space, where the touch point was
last released.



</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterGestureAction
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> the touch point index, with 0 being the first touch
point received by the action
</parameter_description>
</parameter>
<parameter name="release_x">
<parameter_description> return location for the X coordinate of
the last release
</parameter_description>
</parameter>
<parameter name="release_y">
<parameter_description> return location for the Y coordinate of
the last release
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_gesture_action_get_sequence">
<description>
Retrieves the #ClutterEventSequence of a touch point.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterGestureAction
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> index of a point currently active
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterEventSequence of a touch point.
</return>
</function>

<function name="clutter_gesture_action_get_velocity">
<description>
Retrieves the velocity, in stage pixels per millisecond, of the
latest motion event during the dragging.

</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterGestureAction
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> the touch point index, with 0 being the first touch
point received by the action
</parameter_description>
</parameter>
<parameter name="velocity_x">
<parameter_description> return location for the latest motion
event's X velocity
</parameter_description>
</parameter>
<parameter name="velocity_y">
<parameter_description> return location for the latest motion
event's Y velocity
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_gesture_action_new">
<description>
Creates a new #ClutterGestureAction instance.


</description>
<parameters>
</parameters>
<return> the newly created #ClutterGestureAction


</return>
</function>

<function name="clutter_gesture_action_set_n_touch_points">
<description>
Sets the number of points needed to trigger the gesture.



</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterGestureAction
</parameter_description>
</parameter>
<parameter name="nb_points">
<parameter_description> a number of points
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_get_accessibility_enabled">
<description>
Returns whether Clutter has accessibility support enabled.  As
least, a value of TRUE means that there are a proper AtkUtil
implementation available


</description>
<parameters>
</parameters>
<return> %TRUE if Clutter has accessibility support enabled


</return>
</function>

<function name="clutter_get_current_event">
<description>
If an event is currently being processed, return that event.
This function is intended to be used to access event state
that might not be exposed by higher-level widgets.  For
example, to get the key modifier state from a Button 'clicked'
event.


</description>
<parameters>
</parameters>
<return> The current ClutterEvent, or %NULL if none


</return>
</function>

<function name="clutter_get_current_event_time">
<description>
Retrieves the timestamp of the last event, if there is an
event or if the event has a timestamp.


</description>
<parameters>
</parameters>
<return> the event timestamp, or %CLUTTER_CURRENT_TIME


</return>
</function>

<function name="clutter_get_default_backend">
<description>
Retrieves the default #ClutterBackend used by Clutter. The
#ClutterBackend holds backend-specific configuration options.


</description>
<parameters>
</parameters>
<return> the default backend. You should
not ref or unref the returned object. Applications should rarely
need to use this.


</return>
</function>

<function name="clutter_get_default_text_direction">
<description>
Retrieves the default direction for the text. The text direction is
determined by the locale and/or by the &lt;varname&gt;CLUTTER_TEXT_DIRECTION&lt;/varname&gt;
environment variable.

The default text direction can be overridden on a per-actor basis by using
clutter_actor_set_text_direction().


</description>
<parameters>
</parameters>
<return> the default text direction


</return>
</function>

<function name="clutter_get_font_map">
<description>
Retrieves the #PangoFontMap instance used by Clutter.
You can use the global font map object with the COGL
Pango API.


</description>
<parameters>
</parameters>
<return> the #PangoFontMap instance. The returned
value is owned by Clutter and it should never be unreferenced.


</return>
</function>

<function name="clutter_get_keyboard_grab">
<description>
Queries the current keyboard grab of clutter.


</description>
<parameters>
</parameters>
<return> the actor currently holding the keyboard grab, or NULL if there is no grab.


</return>
</function>

<function name="clutter_get_option_group">
<description>
Returns a #GOptionGroup for the command line arguments recognized
by Clutter. You should add this group to your #GOptionContext with
g_option_context_add_group(), if you are using g_option_context_parse()
to parse your commandline arguments.

Calling g_option_context_parse() with Clutter's #GOptionGroup will result
in Clutter's initialization. That is, the following code:

|[
g_option_context_set_main_group (context, clutter_get_option_group ());
res = g_option_context_parse (context, &amp;argc, &amp;argc, NULL);
]|

is functionally equivalent to:

|[
clutter_init (&amp;argc, &amp;argv);
]|

After g_option_context_parse() on a #GOptionContext containing the
Clutter #GOptionGroup has returned %TRUE, Clutter is guaranteed to be
initialized.


</description>
<parameters>
</parameters>
<return> a #GOptionGroup for the commandline arguments
recognized by Clutter


</return>
</function>

<function name="clutter_get_option_group_without_init">
<description>
Returns a #GOptionGroup for the command line arguments recognized
by Clutter. You should add this group to your #GOptionContext with
g_option_context_add_group(), if you are using g_option_context_parse()
to parse your commandline arguments.

Unlike clutter_get_option_group(), calling g_option_context_parse() with
the #GOptionGroup returned by this function requires a subsequent explicit
call to clutter_init(); use this function when needing to set foreign
display connection with clutter_x11_set_display(), or with
&lt;function&gt;gtk_clutter_init()&lt;/function&gt;.


</description>
<parameters>
</parameters>
<return> a #GOptionGroup for the commandline arguments
recognized by Clutter


</return>
</function>

<function name="clutter_get_pointer_grab">
<description>
Queries the current pointer grab of clutter.


</description>
<parameters>
</parameters>
<return> the actor currently holding the pointer grab, or NULL if there is no grab.


</return>
</function>

<function name="clutter_get_script_id">
<description>
Retrieves the Clutter script id, if any.


</description>
<parameters>
<parameter name="gobject">
<parameter_description> a #GObject
</parameter_description>
</parameter>
</parameters>
<return> the script id, or %NULL if @object was not defined inside
a UI definition file. The returned string is owned by the object and
should never be modified or freed.


</return>
</function>

<function name="clutter_glx_texture_pixmap_new">
<description>
Creates a new, empty #ClutterGLXTexturePixmap

Deprecated: 1.6: Use clutter_x11_texture_pixmap_new() instead

</description>
<parameters>
</parameters>
<return> A new #ClutterGLXTexturePixmap



</return>
</function>

<function name="clutter_glx_texture_pixmap_new_with_pixmap">
<description>
Creates a new #ClutterGLXTexturePixmap for @pixmap

Deprecated: 1.6: Use clutter_x11_texture_pixmap_new_with_pixmap() instead

</description>
<parameters>
<parameter name="pixmap">
<parameter_description> the X Pixmap to which this texture should be bound
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterGLXTexturePixmap bound to the given X Pixmap



</return>
</function>

<function name="clutter_glx_texture_pixmap_new_with_window">
<description>
Creates a new #ClutterGLXTexturePixmap for @window

Deprecated: 1.6: Use clutter_x11_texture_pixmap_new_with_window() instead

</description>
<parameters>
<parameter name="window">
<parameter_description> the X window to which this texture should be bound
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterGLXTexturePixmap bound to the given X window



</return>
</function>

<function name="clutter_glx_texture_pixmap_using_extension">
<description>
Checks whether @texture is using the GLX_EXT_texture_from_pixmap
extension; this extension can be optionally (though it is strongly
encouraged) implemented as a zero-copy between a GLX pixmap and
a GL texture.

Deprecated: 1.6: Use cogl_texture_pixmap_x11_is_using_tfp_extension()
on the texture handle instead.



</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterGLXTexturePixmap
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the texture is using the
GLX_EXT_texture_from_pixmap OpenGL extension or falling back to the
slower software mechanism.

</return>
</function>

<function name="clutter_grab_keyboard">
<description>
Grabs keyboard events, after the grab is done keyboard
events (#ClutterActor::key-press-event and #ClutterActor::key-release-event)
are delivered to this actor directly. The source set in the event will be
the actor that would have received the event if the keyboard grab was not
in effect.

Like pointer grabs, keyboard grabs should only be used as a last
resource.

See also clutter_stage_set_key_focus() and clutter_actor_grab_key_focus()
to perform a &quot;soft&quot; key grab and assign key focus to a specific actor.



</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_grab_pointer">
<description>
Grabs pointer events, after the grab is done all pointer related events
(press, motion, release, enter, leave and scroll) are delivered to this
actor directly without passing through both capture and bubble phases of
the event delivery chain. The source set in the event will be the actor
that would have received the event if the pointer grab was not in effect.

&lt;note&gt;&lt;para&gt;Grabs completely override the entire event delivery chain
done by Clutter. Pointer grabs should only be used as a last resource;
using the #ClutterActor::captured-event signal should always be the
preferred way to intercept event delivery to reactive actors.&lt;/para&gt;&lt;/note&gt;

This function should rarely be used.

If a grab is required, you are strongly encouraged to use a specific
input device by calling clutter_input_device_grab().



</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_grid_layout_attach">
<description>
Adds a widget to the grid.

The position of @child is determined by @left and @top. The
number of 'cells' that @child will occupy is determined by
@width and @height.



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterGridLayout
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #ClutterActor to add
</parameter_description>
</parameter>
<parameter name="left">
<parameter_description> the column number to attach the left side of @child to
</parameter_description>
</parameter>
<parameter name="top">
<parameter_description> the row number to attach the top side of @child to
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the number of columns that @child will span
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the number of rows that @child will span
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_grid_layout_attach_next_to">
<description>
Adds a actor to the grid.

The actor is placed next to @sibling, on the side determined by
@side. When @sibling is %NULL, the actor is placed in row (for
left or right placement) or column 0 (for top or bottom placement),
at the end indicated by @side.

Attaching widgets labeled [1], [2], [3] with @sibling == %NULL and
@side == %CLUTTER_GRID_POSITION_LEFT yields a layout of [3][2][1].



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterGridLayout
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the actor to add
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the child of @layout that @child will be placed
next to, or %NULL to place @child at the beginning or end
</parameter_description>
</parameter>
<parameter name="side">
<parameter_description> the side of @sibling that @child is positioned next to
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the number of columns that @child will span
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the number of rows that @child will span
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_grid_layout_get_child_at">
<description>
Gets the child of @layout whose area covers the grid
cell whose upper left corner is at @left, @top.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterGridLayout
</parameter_description>
</parameter>
<parameter name="left">
<parameter_description> the left edge of the cell
</parameter_description>
</parameter>
<parameter name="top">
<parameter_description> the top edge of the cell
</parameter_description>
</parameter>
</parameters>
<return> the child at the given position, or %NULL


</return>
</function>

<function name="clutter_grid_layout_get_column_homogeneous">
<description>
Returns whether all columns of @layout have the same width.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterGridLayout
</parameter_description>
</parameter>
</parameters>
<return> whether all columns of @layout have the same width.
</return>
</function>

<function name="clutter_grid_layout_get_column_spacing">
<description>
Retrieves the spacing set using clutter_grid_layout_set_column_spacing()


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterGridLayout
</parameter_description>
</parameter>
</parameters>
<return> the spacing between coluns of @layout


</return>
</function>

<function name="clutter_grid_layout_get_orientation">
<description>
Retrieves the orientation of the @layout.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterGridLayout
</parameter_description>
</parameter>
</parameters>
<return> the orientation of the layout


</return>
</function>

<function name="clutter_grid_layout_get_row_homogeneous">
<description>
Returns whether all rows of @layout have the same height.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterGridLayout
</parameter_description>
</parameter>
</parameters>
<return> whether all rows of @layout have the same height.


</return>
</function>

<function name="clutter_grid_layout_get_row_spacing">
<description>
Retrieves the spacing set using clutter_grid_layout_set_row_spacing()


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterGridLayout
</parameter_description>
</parameter>
</parameters>
<return> the spacing between rows of @layout


</return>
</function>

<function name="clutter_grid_layout_insert_column">
<description>
Inserts a column at the specified position.

Children which are attached at or to the right of this position
are moved one column to the right. Children which span across this
position are grown to span the new column.



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterGridLayout
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position to insert the column at
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_grid_layout_insert_next_to">
<description>
Inserts a row or column at the specified position.

The new row or column is placed next to @sibling, on the side
determined by @side. If @side is %CLUTTER_GRID_POSITION_LEFT or
%CLUTTER_GRID_POSITION_BOTTOM, a row is inserted. If @side is
%CLUTTER_GRID_POSITION_LEFT of %CLUTTER_GRID_POSITION_RIGHT,
a column is inserted.



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterGridLayout
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the child of @layout that the new row or column will be
placed next to
</parameter_description>
</parameter>
<parameter name="side">
<parameter_description> the side of @sibling that @child is positioned next to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_grid_layout_insert_row">
<description>
Inserts a row at the specified position.

Children which are attached at or below this position
are moved one row down. Children which span across this
position are grown to span the new row.



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterGridLayout
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position to insert the row at
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_grid_layout_new">
<description>
Creates a new #ClutterGridLayout


</description>
<parameters>
</parameters>
<return> the new #ClutterGridLayout
</return>
</function>

<function name="clutter_grid_layout_set_column_homogeneous">
<description>
Sets whether all columns of @layout will have the same width.



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterGridLayout
</parameter_description>
</parameter>
<parameter name="homogeneous">
<parameter_description> %TRUE to make columns homogeneous
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_grid_layout_set_column_spacing">
<description>
Sets the spacing between columns of @layout



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterGridLayout
</parameter_description>
</parameter>
<parameter name="spacing">
<parameter_description> the spacing between columns of the layout, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_grid_layout_set_orientation">
<description>
Sets the orientation of the @layout



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterGridLayout
</parameter_description>
</parameter>
<parameter name="orientation">
<parameter_description> the orientation of the #ClutterGridLayout
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_grid_layout_set_row_homogeneous">
<description>
Sets whether all rows of @layout will have the same height.



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterGridLayout
</parameter_description>
</parameter>
<parameter name="homogeneous">
<parameter_description> %TRUE to make rows homogeneous
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_grid_layout_set_row_spacing">
<description>
Sets the spacing between rows of @layout



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterGridLayout
</parameter_description>
</parameter>
<parameter name="spacing">
<parameter_description> the spacing between rows of the layout, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_image_get_texture">
<description>
Retrieves a pointer to the Cogl texture used by @image.

If you change the contents of the returned Cogl texture you will need
to manually invalidate the @image with clutter_content_invalidate()
in order to update the actors using @image as their content.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #ClutterImage
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the Cogl texture, or %NULL


Stability: unstable
</return>
</function>

<function name="clutter_image_new">
<description>
Creates a new #ClutterImage instance.


</description>
<parameters>
</parameters>
<return> the newly created #ClutterImage instance.
Use g_object_unref() when done.


</return>
</function>

<function name="clutter_image_set_area">
<description>
Sets the image data to be display by @image, using @rect to indicate
the position and size of the image data to be set.

If the @image does not have any image data set when this function is
called, a new texture will be created with the size of the width and
height of the rectangle, i.e. calling this function on a newly created
#ClutterImage will be the equivalent of calling clutter_image_set_data().

If the image data was successfully loaded, the @image will be invalidated.

In case of error, the @error value will be set, and this function will
return %FALSE.

The image data is copied in texture memory.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #ClutterImage
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the image data, as an array of bytes
</parameter_description>
</parameter>
<parameter name="pixel_format">
<parameter_description> the Cogl pixel format of the image data
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> a rectangle indicating the area that should be set
</parameter_description>
</parameter>
<parameter name="row_stride">
<parameter_description> the length of each row inside @data
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the image data was successfully loaded,
and %FALSE otherwise.


</return>
</function>

<function name="clutter_image_set_bytes">
<description>
Sets the image data stored inside a #GBytes to be displayed by @image.

If the image data was successfully loaded, the @image will be invalidated.

In case of error, the @error value will be set, and this function will
return %FALSE.

The image data contained inside the #GBytes is copied in texture memory,
and no additional reference is acquired on the @data.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #ClutterImage
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the image data, as a #GBytes
</parameter_description>
</parameter>
<parameter name="pixel_format">
<parameter_description> the Cogl pixel format of the image data
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the image data
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the image data
</parameter_description>
</parameter>
<parameter name="row_stride">
<parameter_description> the length of each row inside @data
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the image data was successfully loaded,
and %FALSE otherwise.


</return>
</function>

<function name="clutter_image_set_data">
<description>
Sets the image data to be displayed by @image.

If the image data was successfully loaded, the @image will be invalidated.

In case of error, the @error value will be set, and this function will
return %FALSE.

The image data is copied in texture memory.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #ClutterImage
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the image data, as an array of bytes
</parameter_description>
</parameter>
<parameter name="pixel_format">
<parameter_description> the Cogl pixel format of the image data
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the image data
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the image data
</parameter_description>
</parameter>
<parameter name="row_stride">
<parameter_description> the length of each row inside @data
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the image data was successfully loaded,
and %FALSE otherwise.


</return>
</function>

<function name="clutter_init">
<description>
Initialises everything needed to operate with Clutter and parses some
standard command line options; @argc and @argv are adjusted accordingly
so your own code will never see those standard arguments.

It is safe to call this function multiple times.

&lt;note&gt;This function will not abort in case of errors during
initialization; clutter_init() will print out the error message on
stderr, and will return an error code. It is up to the application
code to handle this case. If you need to display the error message
yourself, you can use clutter_init_with_args(), which takes a #GError
pointer.&lt;/note&gt;

If this function fails, and returns an error code, any subsequent
Clutter API will have undefined behaviour - including segmentation
faults and assertion failures. Make sure to handle the returned
#ClutterInitError enumeration value.


</description>
<parameters>
<parameter name="argc">
<parameter_description> The number of arguments in @argv
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> A pointer to an array
of arguments.
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterInitError value
</return>
</function>

<function name="clutter_init_with_args">
<description>
This function does the same work as clutter_init(). Additionally,
it allows you to add your own command line options, and it
automatically generates nicely formatted &lt;option&gt;--help&lt;/option&gt;
output. Note that your program will be terminated after writing
out the help output. Also note that, in case of error, the
error message will be placed inside @error instead of being
printed on the display.

Just like clutter_init(), if this function returns an error code then
any subsequent call to any other Clutter API will result in undefined
behaviour - including segmentation faults.


</description>
<parameters>
<parameter name="argc">
<parameter_description> a pointer to the number of command line arguments
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> a pointer to the array
of command line arguments
</parameter_description>
</parameter>
<parameter name="parameter_string">
<parameter_description> a string which is displayed in the
first line of &lt;option&gt;--help&lt;/option&gt; output, after
&lt;literal&gt;&lt;replaceable&gt;programname&lt;/replaceable&gt; [OPTION...]&lt;/literal&gt;
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> a %NULL terminated array of
#GOptionEntry&lt;!-- --&gt;s describing the options of your program
</parameter_description>
</parameter>
<parameter name="translation_domain">
<parameter_description> a translation domain to use for
translating the &lt;option&gt;--help&lt;/option&gt; output for the options in
@entries with gettext(), or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> %CLUTTER_INIT_SUCCESS if Clutter has been successfully
initialised, or other values or #ClutterInitError in case of
error.


</return>
</function>

<function name="clutter_input_device_get_associated_device">
<description>
Retrieves a pointer to the #ClutterInputDevice that has been
associated to @device.

If the #ClutterInputDevice:device-mode property of @device is
set to %CLUTTER_INPUT_MODE_MASTER, this function will return
%NULL.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterInputDevice, or %NULL


</return>
</function>

<function name="clutter_input_device_get_axis">
<description>
Retrieves the type of axis on @device at the given index.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the axis
</parameter_description>
</parameter>
</parameters>
<return> the axis type


</return>
</function>

<function name="clutter_input_device_get_axis_value">
<description>
Extracts the value of the given @axis of a #ClutterInputDevice from
an array of axis values.

An example of typical usage for this function is:

|[
ClutterInputDevice *device = clutter_event_get_device (event);
gdouble *axes = clutter_event_get_axes (event, NULL);
gdouble pressure_value = 0;

clutter_input_device_get_axis_value (device, axes,
CLUTTER_INPUT_AXIS_PRESSURE,
&amp;pressure_value);
]|


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
<parameter name="axes">
<parameter_description> an array of axes values, typically
coming from clutter_event_get_axes()
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the axis to extract
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> return location for the axis value
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value was set, and %FALSE otherwise


</return>
</function>

<function name="clutter_input_device_get_coords">
<description>
Retrieves the latest coordinates of a pointer or touch point of
@device.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
<parameter name="sequence">
<parameter_description> a #ClutterEventSequence, or %NULL if
the device is not touch-based
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> return location for the pointer
or touch point
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if the device's sequence hasn't been found,
and %TRUE otherwise.


</return>
</function>

<function name="clutter_input_device_get_device_id">
<description>
Retrieves the unique identifier of @device


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return> the identifier of the device


</return>
</function>

<function name="clutter_input_device_get_device_mode">
<description>
Retrieves the #ClutterInputMode of @device.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return> the device mode


</return>
</function>

<function name="clutter_input_device_get_device_name">
<description>
Retrieves the name of the @device


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return> the name of the device, or %NULL. The returned string
is owned by the #ClutterInputDevice and should never be modified
or freed


</return>
</function>

<function name="clutter_input_device_get_device_type">
<description>
Retrieves the type of @device


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return> the type of the device


</return>
</function>

<function name="clutter_input_device_get_enabled">
<description>
Retrieves whether @device is enabled.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the device is enabled


</return>
</function>

<function name="clutter_input_device_get_grabbed_actor">
<description>
Retrieves a pointer to the #ClutterActor currently grabbing all
the events coming from @device.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterActor, or %NULL


</return>
</function>

<function name="clutter_input_device_get_has_cursor">
<description>
Retrieves whether @device has a pointer that follows the
device motion.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the device has a cursor


</return>
</function>

<function name="clutter_input_device_get_key">
<description>
Retrieves the key set using clutter_input_device_set_key()


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the key
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> return location for the keyval at @index_
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> return location for the modifiers at @index_
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a key was set at the given index


</return>
</function>

<function name="clutter_input_device_get_n_axes">
<description>
Retrieves the number of axes available on @device.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return> the number of axes on the device


</return>
</function>

<function name="clutter_input_device_get_n_keys">
<description>
Retrieves the number of keys registered for @device.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return> the number of registered keys


</return>
</function>

<function name="clutter_input_device_get_pointer_actor">
<description>
Retrieves the #ClutterActor underneath the pointer of @device


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice of type %CLUTTER_POINTER_DEVICE
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #ClutterActor or %NULL


</return>
</function>

<function name="clutter_input_device_get_pointer_stage">
<description>
Retrieves the #ClutterStage underneath the pointer of @device


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice of type %CLUTTER_POINTER_DEVICE
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #ClutterStage or %NULL


</return>
</function>

<function name="clutter_input_device_get_slave_devices">
<description>
Retrieves the slave devices attached to @device.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return> a
list of #ClutterInputDevice, or %NULL. The contents of the list are
owned by the device. Use g_list_free() when done


</return>
</function>

<function name="clutter_input_device_grab">
<description>
Acquires a grab on @actor for the given @device.

Any event coming from @device will be delivered to @actor, bypassing
the usual event delivery mechanism, until the grab is released by
calling clutter_input_device_ungrab().

The grab is client-side: even if the windowing system used by the Clutter
backend has the concept of &quot;device grabs&quot;, Clutter will not use them.

Only #ClutterInputDevice of types %CLUTTER_POINTER_DEVICE and
%CLUTTER_KEYBOARD_DEVICE can hold a grab.



</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_input_device_keycode_to_evdev">
<description>
Translates a hardware keycode from a #ClutterKeyEvent to the
equivalent evdev keycode. Note that depending on the input backend
used by Clutter this function can fail if there is no obvious
mapping between the key codes. The hardware keycode can be taken
from the #ClutterKeyEvent.hardware_keycode member of #ClutterKeyEvent.


</description>
<parameters>
<parameter name="device">
<parameter_description> A #ClutterInputDevice
</parameter_description>
</parameter>
<parameter name="hardware_keycode">
<parameter_description> The hardware keycode from a #ClutterKeyEvent
</parameter_description>
</parameter>
<parameter name="evdev_keycode">
<parameter_description> The return location for the evdev keycode
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the conversion succeeded, %FALSE otherwise.


</return>
</function>

<function name="clutter_input_device_sequence_get_grabbed_actor">
<description>
Retrieves a pointer to the #ClutterActor currently grabbing the
touch events coming from @device given the @sequence.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
<parameter name="sequence">
<parameter_description> a #ClutterEventSequence
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterActor, or %NULL


</return>
</function>

<function name="clutter_input_device_sequence_grab">
<description>
Acquires a grab on @actor for the given @device and the given touch
@sequence.

Any touch event coming from @device and from @sequence will be
delivered to @actor, bypassing the usual event delivery mechanism,
until the grab is released by calling
clutter_input_device_sequence_ungrab().

The grab is client-side: even if the windowing system used by the Clutter
backend has the concept of &quot;device grabs&quot;, Clutter will not use them.



</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
<parameter name="sequence">
<parameter_description> a #ClutterEventSequence
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_input_device_sequence_ungrab">
<description>
Releases the grab on the @device for the given @sequence, if one is
in place.



</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
<parameter name="sequence">
<parameter_description> a #ClutterEventSequence
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_input_device_set_enabled">
<description>
Enables or disables a #ClutterInputDevice.

Only devices with a #ClutterInputDevice:device-mode property set
to %CLUTTER_INPUT_MODE_SLAVE or %CLUTTER_INPUT_MODE_FLOATING can
be disabled.



</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> %TRUE to enable the @device
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_input_device_set_key">
<description>
Sets the keyval and modifiers at the given @index_ for @device.

Clutter will use the keyval and modifiers set when filling out
an event coming from the same input device.



</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the key
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> the keyval
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> a bitmask of modifiers
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_input_device_ungrab">
<description>
Releases the grab on the @device, if one is in place.



</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_input_device_update_from_event">
<description>
Forcibly updates the state of the @device using a #ClutterEvent

This function should never be used by applications: it is meant
for integration with embedding toolkits, like clutter-gtk

Embedding toolkits that disable the event collection inside Clutter
need to use this function to update the state of input devices depending
on a #ClutterEvent that they are going to submit to the event handling code
in Clutter though clutter_do_event(). Since the input devices hold the state
that is going to be used to fill in fields like the #ClutterButtonEvent
click count, or to emit synthesized events like %CLUTTER_ENTER and
%CLUTTER_LEAVE, it is necessary for embedding toolkits to also be
responsible of updating the input device state.

For instance, this might be the code to translate an embedding toolkit
native motion notification into a Clutter #ClutterMotionEvent and ask
Clutter to process it:

|[
ClutterEvent c_event;

translate_native_event_to_clutter (native_event, &amp;c_event);

clutter_do_event (&amp;c_event);
]|

Before letting clutter_do_event() process the event, it is necessary to call
clutter_input_device_update_from_event():

|[
ClutterEvent c_event;
ClutterDeviceManager *manager;
ClutterInputDevice *device;

translate_native_event_to_clutter (native_event, &amp;c_event);

/ * get the device manager * /
manager = clutter_device_manager_get_default ();

/ * use the default Core Pointer that Clutter
* backends register by default
* /
device = clutter_device_manager_get_core_device (manager, %CLUTTER_POINTER_DEVICE);

/ * update the state of the input device * /
clutter_input_device_update_from_event (device, &amp;c_event, FALSE);

clutter_do_event (&amp;c_event);
]|

The @update_stage boolean argument should be used when the input device
enters and leaves a #ClutterStage; it will use the #ClutterStage field
of the passed @event to update the stage associated to the input device.



</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="update_stage">
<parameter_description> whether to update the #ClutterStage of the @device
using the stage of the event
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_clone">
<description>
Creates a copy of @interval.


</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterInterval


</return>
</function>

<function name="clutter_interval_compute">
<description>
Computes the value between the @interval boundaries given the
progress @factor

Unlike clutter_interval_compute_value(), this function will
return a const pointer to the computed value

You should use this function if you immediately pass the computed
value to another function that makes a copy of it, like
g_object_set_property()


</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="factor">
<parameter_description> the progress factor, between 0 and 1
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the computed value,
or %NULL if the computation was not successfull


</return>
</function>

<function name="clutter_interval_compute_value">
<description>
Computes the value between the @interval boundaries given the
progress @factor and copies it into @value.


</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="factor">
<parameter_description> the progress factor, between 0 and 1
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> return location for an initialized #GValue
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation was successful


</return>
</function>

<function name="clutter_interval_get_final_value">
<description>
Retrieves the final value of @interval and copies
it into @value.

The passed #GValue must be initialized to the value held by
the #ClutterInterval.



</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_get_initial_value">
<description>
Retrieves the initial value of @interval and copies
it into @value.

The passed #GValue must be initialized to the value held by
the #ClutterInterval.



</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_get_interval">
<description>
Variable arguments wrapper for clutter_interval_get_initial_value()
and clutter_interval_get_final_value() that avoids using the
#GValue arguments:

|[
gint a = 0, b = 0;
clutter_interval_get_interval (interval, &amp;a, &amp;b);
]|

This function is meant for the convenience of the C API; bindings
should reimplement this function using the #GValue-based API.



</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> return locations for the initial and final values of
the interval
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_get_value_type">
<description>
Retrieves the #GType of the values inside @interval.


</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
</parameters>
<return> the type of the value, or G_TYPE_INVALID


</return>
</function>

<function name="clutter_interval_is_valid">
<description>
Checks if the @interval has a valid initial and final values.


</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterInterval has an initial and
final values, and %FALSE otherwise


</return>
</function>

<function name="clutter_interval_new">
<description>
Creates a new #ClutterInterval holding values of type @gtype.

This function avoids using a #GValue for the initial and final values
of the interval:

|[
interval = clutter_interval_new (G_TYPE_FLOAT, 0.0, 1.0);
interval = clutter_interval_new (G_TYPE_BOOLEAN, FALSE, TRUE);
interval = clutter_interval_new (G_TYPE_INT, 0, 360);
]|


</description>
<parameters>
<parameter name="gtype">
<parameter_description> the type of the values in the interval
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the initial value and the final value of the interval
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterInterval


</return>
</function>

<function name="clutter_interval_new_with_values">
<description>
Creates a new #ClutterInterval of type @gtype, between @initial
and @final.

This function is useful for language bindings.


</description>
<parameters>
<parameter name="gtype">
<parameter_description> the type of the values in the interval
</parameter_description>
</parameter>
<parameter name="initial">
<parameter_description> a #GValue holding the initial value of the interval
</parameter_description>
</parameter>
<parameter name="final">
<parameter_description> a #GValue holding the final value of the interval
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterInterval


</return>
</function>

<function name="clutter_interval_peek_final_value">
<description>
Gets the pointer to the final value of @interval


</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
</parameters>
<return> the final value of the interval.
The value is owned by the #ClutterInterval and it should not be
modified or freed


</return>
</function>

<function name="clutter_interval_peek_initial_value">
<description>
Gets the pointer to the initial value of @interval


</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
</parameters>
<return> the initial value of the interval.
The value is owned by the #ClutterInterval and it should not be
modified or freed


</return>
</function>

<function name="clutter_interval_register_progress_func">
<description>
Sets the progress function for a given @value_type, like:

|[
clutter_interval_register_progress_func (MY_TYPE_FOO,
my_foo_progress);
]|

Whenever a #ClutterInterval instance using the default
#ClutterInterval::compute_value implementation is set as an
interval between two #GValue of type @value_type, it will call
@func to establish the value depending on the given progress,
for instance:

|[
static gboolean
my_int_progress (const GValue *a,
const GValue *b,
gdouble       progress,
GValue       *retval)
{
gint ia = g_value_get_int (a);
gint ib = g_value_get_int (b);
gint res = factor * (ib - ia) + ia;

g_value_set_int (retval, res);

return TRUE;
}

clutter_interval_register_progress_func (G_TYPE_INT, my_int_progress);
]|

To unset a previously set progress function of a #GType, pass %NULL
for @func.



</description>
<parameters>
<parameter name="value_type">
<parameter_description> a #GType
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #ClutterProgressFunc, or %NULL to unset a previously
set progress function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_set_final">
<description>
Variadic arguments version of clutter_interval_set_final_value().

This function is meant as a convenience for the C API.

Language bindings should use clutter_interval_set_final_value() instead.



</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the final value of the interval
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_set_final_value">
<description>
Sets the final value of @interval to @value. The value is
copied inside the #ClutterInterval.


</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_set_initial">
<description>
Variadic arguments version of clutter_interval_set_initial_value().

This function is meant as a convenience for the C API.

Language bindings should use clutter_interval_set_initial_value()
instead.



</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the initial value of the interval.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_set_initial_value">
<description>
Sets the initial value of @interval to @value. The value is copied
inside the #ClutterInterval.


</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_set_interval">
<description>
Variable arguments wrapper for clutter_interval_set_initial_value()
and clutter_interval_set_final_value() that avoids using the
#GValue arguments:

|[
clutter_interval_set_interval (interval, 0, 50);
clutter_interval_set_interval (interval, 1.0, 0.0);
clutter_interval_set_interval (interval, FALSE, TRUE);
]|

This function is meant for the convenience of the C API; bindings
should reimplement this function using the #GValue-based API.



</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the initial and final values of the interval
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_validate">
<description>
Validates the initial and final values of @interval against
a #GParamSpec.


</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> a #GParamSpec
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterInterval is valid, %FALSE otherwise


</return>
</function>

<function name="clutter_keyframe_transition_clear">
<description>
Removes all key frames from @transition.



</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterKeyframeTransition
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_keyframe_transition_get_key_frame">
<description>
Retrieves the details of the key frame at @index_ inside @transition.

The @transition must already have key frames set, and @index_ must be
smaller than the number of key frames.



</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterKeyframeTransition
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the key frame
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> return location for the key, or %NULL
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> return location for the easing mode, or %NULL
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue initialized with the type of
the values
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_keyframe_transition_get_n_key_frames">
<description>
Retrieves the number of key frames inside @transition.


</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterKeyframeTransition
</parameter_description>
</parameter>
</parameters>
<return> the number of key frames


</return>
</function>

<function name="clutter_keyframe_transition_new">
<description>
Creates a new #ClutterKeyframeTransition for @property_name.


</description>
<parameters>
<parameter name="property_name">
<parameter_description> the property to animate
</parameter_description>
</parameter>
</parameters>
<return> the newly allocated
#ClutterKeyframeTransition instance. Use g_object_unref() when
done to free its resources.


</return>
</function>

<function name="clutter_keyframe_transition_set">
<description>
Sets the key frames of the @transition.

This variadic arguments function is a convenience for C developers;
language bindings should use clutter_keyframe_transition_set_key_frames(),
clutter_keyframe_transition_set_modes(), and
clutter_keyframe_transition_set_values() instead.



</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterKeyframeTransition
</parameter_description>
</parameter>
<parameter name="gtype">
<parameter_description> the type of the values to use for the key frames
</parameter_description>
</parameter>
<parameter name="n_key_frames">
<parameter_description> the number of key frames between the initial
and final values
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of tuples, containing the key frame index, the value
at the key frame, and the animation mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_keyframe_transition_set_key_frame">
<description>
Sets the details of the key frame at @index_ inside @transition.

The @transition must already have a key frame at @index_, and @index_
must be smaller than the number of key frames inside @transition.



</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterKeyframeTransition
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the key frame
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key of the key frame
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the easing mode of the key frame
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue containing the value of the key frame
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_keyframe_transition_set_key_frames">
<description>
Sets the keys for each key frame inside @transition.

If @transition does not hold any key frame, @n_key_frames key frames
will be created; if @transition already has key frames, @key_frames must
have at least as many elements as the number of key frames.



</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterKeyframeTransition
</parameter_description>
</parameter>
<parameter name="n_key_frames">
<parameter_description> the number of values
</parameter_description>
</parameter>
<parameter name="key_frames">
<parameter_description> an array of keys between 0.0
and 1.0, one for each key frame
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_keyframe_transition_set_modes">
<description>
Sets the easing modes for each key frame inside @transition.

If @transition does not hold any key frame, @n_modes key frames will
be created; if @transition already has key frames, @modes must have
at least as many elements as the number of key frames.



</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterKeyframeTransition
</parameter_description>
</parameter>
<parameter name="n_modes">
<parameter_description> the number of easing modes
</parameter_description>
</parameter>
<parameter name="modes">
<parameter_description> an array of easing modes, one for
each key frame
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_keyframe_transition_set_values">
<description>
Sets the values for each key frame inside @transition.

If @transition does not hold any key frame, @n_values key frames will
be created; if @transition already has key frames, @values must have
at least as many elements as the number of key frames.



</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterKeyframeTransition
</parameter_description>
</parameter>
<parameter name="n_values">
<parameter_description> the number of values
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> an array of values, one for each
key frame
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_keysym_to_unicode">
<description>
Converts @keyval from a Clutter key symbol to the corresponding
ISO10646 (Unicode) character.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a key symbol
</parameter_description>
</parameter>
</parameters>
<return> a Unicode character, or 0 if there  is no corresponding
character.
</return>
</function>

<function name="clutter_layout_manager_allocate">
<description>
Allocates the children of @container given an area

See also clutter_actor_allocate()



</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> the #ClutterContainer using @manager
</parameter_description>
</parameter>
<parameter name="allocation">
<parameter_description> the #ClutterActorBox containing the allocated area
of @container
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the allocation flags
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_manager_child_get">
<description>
Retrieves the values for a list of properties out of the
#ClutterLayoutMeta created by @manager and attached to the
child of a @container



</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> a #ClutterContainer using @manager
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @container
</parameter_description>
</parameter>
<parameter name="first_property">
<parameter_description> the name of the first property
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of property name and return location for the value pairs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_manager_child_get_property">
<description>
Gets a property on the #ClutterLayoutMeta created by @manager and
attached to a child of @container

The #GValue must already be initialized to the type of the property
and has to be unset with g_value_unset() after extracting the real
value out of it



</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> a #ClutterContainer using @manager
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @container
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to get
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue with the value of the property to get
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_manager_child_set">
<description>
Sets a list of properties and their values on the #ClutterLayoutMeta
associated by @manager to a child of @container

Languages bindings should use clutter_layout_manager_child_set_property()
instead



</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> a #ClutterContainer using @manager
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @container
</parameter_description>
</parameter>
<parameter name="first_property">
<parameter_description> the first property name
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of property name and value pairs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_manager_child_set_property">
<description>
Sets a property on the #ClutterLayoutMeta created by @manager and
attached to a child of @container



</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> a #ClutterContainer using @manager
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @container
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue with the value of the property to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_manager_find_child_property">
<description>
Retrieves the #GParamSpec for the layout property @name inside
the #ClutterLayoutMeta sub-class used by @manager


</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the property
</parameter_description>
</parameter>
</parameters>
<return> a #GParamSpec describing the property,
or %NULL if no property with that name exists. The returned
#GParamSpec is owned by the layout manager and should not be
modified or freed


</return>
</function>

<function name="clutter_layout_manager_get_child_meta">
<description>
Retrieves the #ClutterLayoutMeta that the layout @manager associated
to the @actor child of @container, eventually by creating one if the
#ClutterLayoutManager supports layout properties


</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> a #ClutterContainer using @manager
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @container
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterLayoutMeta, or %NULL if the
#ClutterLayoutManager does not have layout properties. The returned
layout meta instance is owned by the #ClutterLayoutManager and it
should not be unreferenced


</return>
</function>

<function name="clutter_layout_manager_get_preferred_height">
<description>
Computes the minimum and natural heights of the @container according
to @manager.

See also clutter_actor_get_preferred_height()



</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> the #ClutterContainer using @manager
</parameter_description>
</parameter>
<parameter name="for_width">
<parameter_description> the width for which the height should be computed, or -1
</parameter_description>
</parameter>
<parameter name="min_height_p">
<parameter_description> return location for the minimum height
of the layout, or %NULL
</parameter_description>
</parameter>
<parameter name="nat_height_p">
<parameter_description> return location for the natural height
of the layout, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_manager_get_preferred_width">
<description>
Computes the minimum and natural widths of the @container according
to @manager.

See also clutter_actor_get_preferred_width()



</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> the #ClutterContainer using @manager
</parameter_description>
</parameter>
<parameter name="for_height">
<parameter_description> the height for which the width should be computed, or -1
</parameter_description>
</parameter>
<parameter name="min_width_p">
<parameter_description> return location for the minimum width
of the layout, or %NULL
</parameter_description>
</parameter>
<parameter name="nat_width_p">
<parameter_description> return location for the natural width
of the layout, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_manager_layout_changed">
<description>
Emits the #ClutterLayoutManager::layout-changed signal on @manager

This function should only be called by implementations of the
#ClutterLayoutManager class



</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_manager_list_child_properties">
<description>
Retrieves all the #GParamSpec&lt;!-- --&gt;s for the layout properties
stored inside the #ClutterLayoutMeta sub-class used by @manager


</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="n_pspecs">
<parameter_description> return location for the number of returned
#GParamSpec&lt;!-- --&gt;s
</parameter_description>
</parameter>
</parameters>
<return> the newly-allocated,
%NULL-terminated array of #GParamSpec&lt;!-- --&gt;s. Use g_free() to free the
resources allocated for the array


</return>
</function>

<function name="clutter_layout_manager_set_container">
<description>
If the #ClutterLayoutManager sub-class allows it, allow
adding a weak reference of the @container using @manager
from within the layout manager

The layout manager should not increase the reference
count of the @container



</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> a #ClutterContainer using @manager
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_meta_get_manager">
<description>
Retrieves the actor wrapped by @data


</description>
<parameters>
<parameter name="data">
<parameter_description> a #ClutterLayoutMeta
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterLayoutManager


</return>
</function>

<function name="clutter_list_model_new">
<description>
Creates a new default model with @n_columns columns with the types 
and names passed in.

For example:

&lt;informalexample&gt;&lt;programlisting&gt;
model = clutter_list_model_new (3,
G_TYPE_INT,      &quot;Score&quot;,
G_TYPE_STRING,   &quot;Team&quot;,
GDK_TYPE_PIXBUF, &quot;Logo&quot;);
&lt;/programlisting&gt;&lt;/informalexample&gt;

will create a new #ClutterModel with three columns of type int,
string and #GdkPixbuf respectively.

Note that the name of the column can be set to %NULL, in which case
the canonical name of the type held by the column will be used as
the title.


</description>
<parameters>
<parameter name="n_columns">
<parameter_description> number of columns in the model
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> @n_columns number of #GType and string pairs
</parameter_description>
</parameter>
</parameters>
<return> a new #ClutterListModel


</return>
</function>

<function name="clutter_list_model_newv">
<description>
Non-vararg version of clutter_list_model_new(). This function is
useful for language bindings.


</description>
<parameters>
<parameter name="n_columns">
<parameter_description> number of columns in the model
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> an array of #GType types for the columns, from first to last
</parameter_description>
</parameter>
<parameter name="names">
<parameter_description> an array of names for the columns, from first to last
</parameter_description>
</parameter>
</parameters>
<return> a new default #ClutterModel


</return>
</function>

<function name="clutter_main">
<description>
Starts the Clutter mainloop.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_main_level">
<description>
Retrieves the depth of the Clutter mainloop.


</description>
<parameters>
</parameters>
<return> The level of the mainloop.
</return>
</function>

<function name="clutter_main_quit">
<description>
Terminates the Clutter mainloop.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_margin_copy">
<description>
Creates a new #ClutterMargin and copies the contents of @margin_ into
the newly created structure.


</description>
<parameters>
<parameter name="margin_">
<parameter_description> a #ClutterMargin
</parameter_description>
</parameter>
</parameters>
<return> a copy of the #ClutterMargin.


</return>
</function>

<function name="clutter_margin_free">
<description>
Frees the resources allocated by clutter_margin_new() and
clutter_margin_copy().



</description>
<parameters>
<parameter name="margin_">
<parameter_description> a #ClutterMargin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_margin_new">
<description>
Creates a new #ClutterMargin.


</description>
<parameters>
</parameters>
<return> a newly allocated #ClutterMargin. Use
clutter_margin_free() to free the resources associated with it when
done.


</return>
</function>

<function name="clutter_matrix_alloc">
<description>
Allocates enough memory to hold a #ClutterMatrix.


</description>
<parameters>
</parameters>
<return> the newly allocated #ClutterMatrix


</return>
</function>

<function name="clutter_matrix_free">
<description>
Frees the memory allocated by clutter_matrix_alloc().



</description>
<parameters>
<parameter name="matrix">
<parameter_description> a #ClutterMatrix
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_matrix_init_from_array">
<description>
Initializes @matrix with the contents of a C array of floating point
values.


</description>
<parameters>
<parameter name="matrix">
<parameter_description> a #ClutterMatrix
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a C array of 16 floating point values,
representing a 4x4 matrix, with column-major order
</parameter_description>
</parameter>
</parameters>
<return> the initialzed #ClutterMatrix


</return>
</function>

<function name="clutter_matrix_init_from_matrix">
<description>
Initializes the #ClutterMatrix @a with the contents of the
#ClutterMatrix @b.


</description>
<parameters>
<parameter name="a">
<parameter_description> the #ClutterMatrix to initialize
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> the #ClutterMatrix to copy
</parameter_description>
</parameter>
</parameters>
<return> the initialized #ClutterMatrix


</return>
</function>

<function name="clutter_matrix_init_identity">
<description>
Initializes @matrix with the identity matrix, i.e.:

|[
.xx = 1.0, .xy = 0.0, .xz = 0.0, .xw = 0.0
.yx = 0.0, .yy = 1.0, .yz = 0.0, .yw = 0.0
.zx = 0.0, .zy = 0.0, .zz = 1.0, .zw = 0.0
.wx = 0.0, .wy = 0.0, .wz = 0.0, .ww = 1.0
]|


</description>
<parameters>
<parameter name="matrix">
<parameter_description> a #ClutterMatrix
</parameter_description>
</parameter>
</parameters>
<return> the initialized #ClutterMatrix


</return>
</function>

<function name="clutter_model_append">
<description>
Creates and appends a new row to the #ClutterModel, setting the
row values upon creation. For example, to append a new row where
column 0 is type %G_TYPE_INT and column 1 is of type %G_TYPE_STRING:

&lt;informalexample&gt;&lt;programlisting&gt;
ClutterModel *model;
model = clutter_model_default_new (2,
G_TYPE_INT,    &quot;Score&quot;,
G_TYPE_STRING, &quot;Team&quot;);
clutter_model_append (model, 0, 42, 1, &quot;Team #1&quot;, -1);
&lt;/programlisting&gt;&lt;/informalexample&gt;



</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value, terminated with -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_appendv">
<description>
Creates and appends a new row to the #ClutterModel, setting the row
values for the given @columns upon creation.



</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> the number of columns and values
</parameter_description>
</parameter>
<parameter name="columns">
<parameter_description> a vector with the columns to set
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a vector with the values
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_filter_iter">
<description>
Checks whether the row pointer by @iter should be filtered or not using
the filtering function set on @model.

This function should be used only by subclasses of #ClutterModel.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> the row to filter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the row should be displayed,
%FALSE otherwise


</return>
</function>

<function name="clutter_model_filter_row">
<description>
Checks whether @row should be filtered or not using the
filtering function set on @model.

This function should be used only by subclasses of #ClutterModel.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> the row to filter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the row should be displayed,
%FALSE otherwise


</return>
</function>

<function name="clutter_model_foreach">
<description>
Calls @func for each row in the model. 



</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #ClutterModelForeachFunc
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_get_column_name">
<description>
Retrieves the name of the @column


</description>
<parameters>
<parameter name="model">
<parameter_description> #ClutterModel
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column number
</parameter_description>
</parameter>
</parameters>
<return> the name of the column. The model holds the returned
string, and it should not be modified or freed


</return>
</function>

<function name="clutter_model_get_column_type">
<description>
Retrieves the type of the @column.


</description>
<parameters>
<parameter name="model">
<parameter_description> #ClutterModel
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column number
</parameter_description>
</parameter>
</parameters>
<return> the type of the column.


</return>
</function>

<function name="clutter_model_get_filter_set">
<description>
Returns whether the @model has a filter in place, set
using clutter_model_set_filter()


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a filter is set


</return>
</function>

<function name="clutter_model_get_first_iter">
<description>
Retrieves a #ClutterModelIter representing the first non-filtered
row in @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterModelIter.
Call g_object_unref() when done using it


</return>
</function>

<function name="clutter_model_get_iter_at_row">
<description>
Retrieves a #ClutterModelIter representing the row at the given index.

If a filter function has been set using clutter_model_set_filter()
then the @model implementation will return the first non filtered
row.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> position of the row to retrieve
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterModelIter, or %NULL if @row was
out of bounds. When done using the iterator object, call g_object_unref()
to deallocate its resources


</return>
</function>

<function name="clutter_model_get_last_iter">
<description>
Retrieves a #ClutterModelIter representing the last non-filtered
row in @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterModelIter.
Call g_object_unref() when done using it


</return>
</function>

<function name="clutter_model_get_n_columns">
<description>
Retrieves the number of columns inside @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> the number of columns


</return>
</function>

<function name="clutter_model_get_n_rows">
<description>
Retrieves the number of rows inside @model, eventually taking
into account any filtering function set using clutter_model_set_filter().


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> The length of the @model. If there is a filter set, then
the length of the filtered @model is returned.


</return>
</function>

<function name="clutter_model_get_sorting_column">
<description>
Retrieves the number of column used for sorting the @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> a column number, or -1 if the model is not sorted


</return>
</function>

<function name="clutter_model_insert">
<description>
Inserts a new row to the #ClutterModel at @row, setting the row
values upon creation. For example, to insert a new row at index 100,
where column 0 is type %G_TYPE_INT and column 1 is of type
%G_TYPE_STRING:

&lt;informalexample&gt;&lt;programlisting&gt;
ClutterModel *model;
model = clutter_model_default_new (2,
G_TYPE_INT,    &quot;Score&quot;,
G_TYPE_STRING, &quot;Team&quot;);
clutter_model_insert (model, 3, 0, 42, 1, &quot;Team #1&quot;, -1);
&lt;/programlisting&gt;&lt;/informalexample&gt;



</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> the position to insert the new row
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value, terminated with -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_insert_value">
<description>
Sets the data in the cell specified by @iter and @column. The type of 
@value must be convertable to the type of the column. If the row does
not exist then it is created.



</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> position of the row to modify
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> column to modify
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> new value for the cell
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_insertv">
<description>
Inserts data at @row into the #ClutterModel, setting the row
values for the given @columns upon creation.



</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> row index
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> the number of columns and values to set
</parameter_description>
</parameter>
<parameter name="columns">
<parameter_description> a vector containing the columns to set
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a vector containing the values for the cells
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_copy">
<description>
Copies the passed iterator.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> a copy of the iterator, or %NULL


</return>
</function>

<function name="clutter_model_iter_get">
<description>
Gets the value of one or more cells in the row referenced by @iter. The
variable argument list should contain integer column numbers, each column
column number followed by a place to store the value being retrieved. The
list is terminated by a -1.

For example, to get a value from column 0 with type %G_TYPE_STRING use:
&lt;informalexample&gt;&lt;programlisting&gt;
clutter_model_iter_get (iter, 0, &amp;place_string_here, -1);
&lt;/programlisting&gt;&lt;/informalexample&gt;

where place_string_here is a gchar* to be filled with the string. If
appropriate, the returned values have to be freed or unreferenced.



</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of column/return location pairs, terminated by -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_get_model">
<description>
Retrieves a pointer to the #ClutterModel that this iter is part of.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a #ClutterModel.


</return>
</function>

<function name="clutter_model_iter_get_row">
<description>
Retrieves the position of the row that the @iter points to.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> the position of the @iter in the model


</return>
</function>

<function name="clutter_model_iter_get_valist">
<description>
See clutter_model_iter_get(). This version takes a va_list for language
bindings.



</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> a list of column/return location pairs, terminated by -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_get_value">
<description>
Sets an initializes @value to that at @column. When done with @value, 
g_value_unset() needs to be called to free any allocated memory.



</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> column number to retrieve the value from
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> an empty #GValue to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_is_first">
<description>
Gets whether the current iterator is at the beginning of the model
to which it belongs.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if @iter is the first iter in the filtered model


</return>
</function>

<function name="clutter_model_iter_is_last">
<description>
Gets whether the iterator is at the end of the model to which it
belongs.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if @iter is the last iter in the filtered model.


</return>
</function>

<function name="clutter_model_iter_next">
<description>
Updates the @iter to point at the next position in the model.
The model implementation should take into account the presence of
a filter function.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> The passed iterator, updated to point at the next
row in the model.


</return>
</function>

<function name="clutter_model_iter_prev">
<description>
Sets the @iter to point at the previous position in the model.
The model implementation should take into account the presence of
a filter function.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> The passed iterator, updated to point at the previous
row in the model.


</return>
</function>

<function name="clutter_model_iter_set">
<description>
Sets the value of one or more cells in the row referenced by @iter. The
variable argument list should contain integer column numbers, each column
column number followed by the value to be set. The  list is terminated by a
-1.

For example, to set column 0 with type %G_TYPE_STRING, use:
&lt;informalexample&gt;&lt;programlisting&gt;
clutter_model_iter_set (iter, 0, &quot;foo&quot;, -1);
&lt;/programlisting&gt;&lt;/informalexample&gt;



</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of column/return location pairs, terminated by -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_set_valist">
<description>
See clutter_model_iter_set(); this version takes a va_list for language
bindings.



</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of column/value pairs, terminiated by -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_set_value">
<description>
Sets the data in the cell specified by @iter and @column. The type of
@value must be convertable to the type of the column.



</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> column number to retrieve the value from
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> new value for the cell
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_prepend">
<description>
Creates and prepends a new row to the #ClutterModel, setting the row
values upon creation. For example, to prepend a new row where column 0
is type %G_TYPE_INT and column 1 is of type %G_TYPE_STRING:

&lt;informalexample&gt;&lt;programlisting&gt;
ClutterModel *model;
model = clutter_model_default_new (2,
G_TYPE_INT,    &quot;Score&quot;,
G_TYPE_STRING, &quot;Team&quot;);
clutter_model_prepend (model, 0, 42, 1, &quot;Team #1&quot;, -1);
&lt;/programlisting&gt;&lt;/informalexample&gt;



</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value, terminated with -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_prependv">
<description>
Creates and prepends a new row to the #ClutterModel, setting the row
values for the given @columns upon creation.



</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> the number of columns and values to set
</parameter_description>
</parameter>
<parameter name="columns">
<parameter_description> a vector containing the columns to set
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a vector containing the values for the cells
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_remove">
<description>
Removes the row at the given position from the model.



</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> position of row to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_resort">
<description>
Force a resort on the @model. This function should only be
used by subclasses of #ClutterModel.



</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_set_filter">
<description>
Filters the @model using the given filtering function.



</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #ClutterModelFilterFunc, or #NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @func, or #NULL
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> destroy notifier of @user_data, or #NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_set_names">
<description>
Assigns a name to the columns of a #ClutterModel.

This function is meant primarily for #GObjects that inherit from
#ClutterModel, and should only be used when contructing a #ClutterModel.
It will not work after the initial creation of the #ClutterModel.



</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> the number of column names
</parameter_description>
</parameter>
<parameter name="names">
<parameter_description> an array of strings
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_set_sort">
<description>
Sorts @model using the given sorting function.



</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column to sort on
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #ClutterModelSortFunc, or #NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @func, or #NULL
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> destroy notifier of @user_data, or #NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_set_sorting_column">
<description>
Sets the model to sort by @column. If @column is a negative value
the sorting column will be unset.



</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column of the @model to sort, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_set_types">
<description>
Sets the types of the columns inside a #ClutterModel.

This function is meant primarily for #GObjects that inherit from
#ClutterModel, and should only be used when contructing a #ClutterModel.
It will not work after the initial creation of the #ClutterModel.



</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> number of columns for the model
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> an array of #GType types
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_offscreen_effect_create_texture">
<description>
Calls the create_texture() virtual function of the @effect


</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterOffscreenEffect
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the minimum width of the target texture
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the minimum height of the target texture
</parameter_description>
</parameter>
</parameters>
<return> a handle to a Cogl texture, or
%COGL_INVALID_HANDLE. The returned handle has its reference
count increased.


</return>
</function>

<function name="clutter_offscreen_effect_get_target">
<description>
Retrieves the material used as a render target for the offscreen
buffer created by @effect

You should only use the returned #CoglMaterial when painting. The
returned material might change between different frames.


</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterOffscreenEffect
</parameter_description>
</parameter>
</parameters>
<return> a #CoglMaterial or %NULL. The
returned material is owned by Clutter and it should not be
modified or freed


</return>
</function>

<function name="clutter_offscreen_effect_get_target_rect">
<description>
Retrieves the origin and size of the offscreen buffer used by @effect to
paint the actor to which it has been applied.

This function should only be called by #ClutterOffscreenEffect
implementations, from within the &lt;function&gt;paint_target()&lt;/function&gt;
virtual function.


</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterOffscreenEffect
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> return location for the target area
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the offscreen buffer has a valid rectangle,
and %FALSE otherwise
</return>
</function>

<function name="clutter_offscreen_effect_get_target_size">
<description>
Retrieves the size of the offscreen buffer used by @effect to
paint the actor to which it has been applied.

This function should only be called by #ClutterOffscreenEffect
implementations, from within the &lt;function&gt;paint_target()&lt;/function&gt;
virtual function.


</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterOffscreenEffect
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the target width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the target height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the offscreen buffer has a valid size,
and %FALSE otherwise
</return>
</function>

<function name="clutter_offscreen_effect_get_texture">
<description>
Retrieves the texture used as a render target for the offscreen
buffer created by @effect

You should only use the returned texture when painting. The texture
may change after ClutterEffect::pre_paint is called so the effect
implementation should update any references to the texture after
chaining-up to the parent's pre_paint implementation. This can be
used instead of clutter_offscreen_effect_get_target() when the
effect subclass wants to paint using its own material.


</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterOffscreenEffect
</parameter_description>
</parameter>
</parameters>
<return> a #CoglHandle or %COGL_INVALID_HANDLE. The
returned texture is owned by Clutter and it should not be
modified or freed


</return>
</function>

<function name="clutter_offscreen_effect_paint_target">
<description>
Calls the paint_target() virtual function of the @effect



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterOffscreenEffect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_page_turn_effect_get_angle">
<description>
Retrieves the value set using clutter_page_turn_effect_get_angle()


</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterPageTurnEffect:
</parameter_description>
</parameter>
</parameters>
<return> the angle of the page curling


</return>
</function>

<function name="clutter_page_turn_effect_get_period">
<description>
Retrieves the value set using clutter_page_turn_effect_get_period()


</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterPageTurnEffect
</parameter_description>
</parameter>
</parameters>
<return> the period of the page curling


</return>
</function>

<function name="clutter_page_turn_effect_get_radius">
<description>
Retrieves the value set using clutter_page_turn_effect_set_radius()


</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterPageTurnEffect
</parameter_description>
</parameter>
</parameters>
<return> the radius of the page curling


</return>
</function>

<function name="clutter_page_turn_effect_new">
<description>
Creates a new #ClutterPageTurnEffect instance with the given parameters


</description>
<parameters>
<parameter name="period">
<parameter_description> the period of the page curl, between 0.0 and 1.0
</parameter_description>
</parameter>
<parameter name="angle">
<parameter_description> the angle of the page curl, between 0.0 and 360.0
</parameter_description>
</parameter>
<parameter name="radius">
<parameter_description> the radius of the page curl, in pixels
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterPageTurnEffect


</return>
</function>

<function name="clutter_page_turn_effect_set_angle">
<description>
Sets the angle of the page curling, in degrees



</description>
<parameters>
<parameter name="effect">
<parameter_description> #ClutterPageTurnEffect
</parameter_description>
</parameter>
<parameter name="angle">
<parameter_description> the angle of the page curl, in degrees
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_page_turn_effect_set_period">
<description>
Sets the period of the page curling, between 0.0 (no curling)
and 1.0 (fully curled)



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterPageTurnEffect
</parameter_description>
</parameter>
<parameter name="period">
<parameter_description> the period of the page curl, between 0.0 and 1.0
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_page_turn_effect_set_radius">
<description>
Sets the radius of the page curling



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterPageTurnEffect:
</parameter_description>
</parameter>
<parameter name="radius">
<parameter_description> the radius of the page curling, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_node_add_child">
<description>
Adds @child to the list of children of @node.

This function will acquire a reference on @child.



</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child #ClutterPaintNode to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_node_add_path">
<description>
Adds a region described as a path to the @node.

This function acquires a reference on the passed @path, so it
is safe to call cogl_object_unref() when it returns.


Stability: unstable

</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a Cogl path
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_node_add_primitive">
<description>
Adds a region described by a Cogl primitive to the @node.

This function acquires a reference on @primitive, so it is safe
to call cogl_object_unref() when it returns.



</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
<parameter name="primitive">
<parameter_description> a Cogl primitive
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_node_add_rectangle">
<description>
Adds a rectangle region to the @node, as described by the
passed @rect.



</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_node_add_texture_rectangle">
<description>
Adds a rectangle region to the @node, with texture coordinates.



</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="x_1">
<parameter_description> the left X coordinate of the texture
</parameter_description>
</parameter>
<parameter name="y_1">
<parameter_description> the top Y coordinate of the texture
</parameter_description>
</parameter>
<parameter name="x_2">
<parameter_description> the right X coordinate of the texture
</parameter_description>
</parameter>
<parameter name="y_2">
<parameter_description> the bottom Y coordinate of the texture
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_node_get_first_child">
<description>
Retrieves the first child of the @node.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the first child of
the #ClutterPaintNode.


</return>
</function>

<function name="clutter_paint_node_get_last_child">
<description>
Retrieves the last child of @node.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the last child
of a #ClutterPaintNode


</return>
</function>

<function name="clutter_paint_node_get_n_children">
<description>
Retrieves the number of children of @node.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
</parameters>
<return> the number of children of a #ClutterPaintNode


</return>
</function>

<function name="clutter_paint_node_get_next_sibling">
<description>
Retrieves the next sibling of @node.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the next sibling
of a #ClutterPaintNode


</return>
</function>

<function name="clutter_paint_node_get_parent">
<description>
Retrieves the parent of @node.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the parent of
a #ClutterPaintNode


</return>
</function>

<function name="clutter_paint_node_get_previous_sibling">
<description>
Retrieves the previous sibling of @node.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the previous sibling
of the #ClutterPaintNode.


</return>
</function>

<function name="clutter_paint_node_ref">
<description>
Acquires a reference on @node.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterPaintNode


</return>
</function>

<function name="clutter_paint_node_remove_all">
<description>
Removes all children of @node.

This function releases the reference acquired by @node on its
children.



</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_node_remove_child">
<description>
Removes @child from the list of children of @node.

This function will release the reference on @child acquired by
using clutter_paint_node_add_child().



</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #ClutterPaintNode to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_node_replace_child">
<description>
Atomically replaces @old_child with @new_child in the list of
children of @node.

This function will release the reference on @old_child acquired
by @node, and will acquire a new reference on @new_child.



</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
<parameter name="old_child">
<parameter_description> the child replaced by @new_child
</parameter_description>
</parameter>
<parameter name="new_child">
<parameter_description> the child that replaces @old_child
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_node_set_name">
<description>
Sets a user-readable @name for @node.

The @name will be used for debugging purposes.

The @node will copy the passed string.



</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> a string annotating the @node
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_node_unref">
<description>
Releases a reference on @node.



</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPaintNode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_volume_copy">
<description>
Copies @pv into a new #ClutterPaintVolume


</description>
<parameters>
<parameter name="pv">
<parameter_description> a #ClutterPaintVolume
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated copy of a #ClutterPaintVolume


</return>
</function>

<function name="clutter_paint_volume_free">
<description>
Frees the resources allocated by @pv



</description>
<parameters>
<parameter name="pv">
<parameter_description> a #ClutterPaintVolume
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_volume_get_depth">
<description>
Retrieves the depth of the volume's, axis aligned, bounding box.

In other words; this takes into account what actor's coordinate
space @pv belongs too and conceptually fits an axis aligned box
around the volume. It returns the size of that bounding box as
measured along the z-axis.

&lt;note&gt;&lt;para&gt;If, for example, clutter_actor_get_transformed_paint_volume()
is used to transform a 2D child actor that is 100px wide, 100px
high and 0px deep into container coordinates then the depth might
not simply be 0px if the child actor has a 3D rotation applied to
it.&lt;/para&gt;
&lt;para&gt;Remember; after clutter_actor_get_transformed_paint_volume() is
used then the transformed volume will be defined relative to the
container actor and in container coordinates a 2D child actor
can have a 3D bounding volume.&lt;/para&gt;&lt;/note&gt;

&lt;note&gt;There are no accuracy guarantees for the reported depth,
except that it must always be &gt;= to the true depth. This is
because actors may report simple, loose fitting paint-volumes
for efficiency.&lt;/note&gt;


</description>
<parameters>
<parameter name="pv">
<parameter_description> a #ClutterPaintVolume
</parameter_description>
</parameter>
</parameters>
<return> the depth, in units of @pv's local coordinate system.


</return>
</function>

<function name="clutter_paint_volume_get_height">
<description>
Retrieves the height of the volume's, axis aligned, bounding box.

In other words; this takes into account what actor's coordinate
space @pv belongs too and conceptually fits an axis aligned box
around the volume. It returns the size of that bounding box as
measured along the y-axis.

&lt;note&gt;&lt;para&gt;If, for example, clutter_actor_get_transformed_paint_volume()
is used to transform a 2D child actor that is 100px wide, 100px
high and 0px deep into container coordinates then the height might
not simply be 100px if the child actor has a 3D rotation applied to
it.&lt;/para&gt;
&lt;para&gt;Remember; after clutter_actor_get_transformed_paint_volume() is
used then a transformed child volume will be defined relative to the
ancestor container actor and so a 2D child actor
can have a 3D bounding volume.&lt;/para&gt;&lt;/note&gt;

&lt;note&gt;There are no accuracy guarantees for the reported height,
except that it must always be &gt;= to the true height. This is
because actors may report simple, loose fitting paint-volumes
for efficiency&lt;/note&gt;


</description>
<parameters>
<parameter name="pv">
<parameter_description> a #ClutterPaintVolume
</parameter_description>
</parameter>
</parameters>
<return> the height, in units of @pv's local coordinate system.


</return>
</function>

<function name="clutter_paint_volume_get_origin">
<description>
Retrieves the origin of the #ClutterPaintVolume.



</description>
<parameters>
<parameter name="pv">
<parameter_description> a #ClutterPaintVolume
</parameter_description>
</parameter>
<parameter name="vertex">
<parameter_description> the return location for a #ClutterVertex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_volume_get_width">
<description>
Retrieves the width of the volume's, axis aligned, bounding box.

In other words; this takes into account what actor's coordinate
space @pv belongs too and conceptually fits an axis aligned box
around the volume. It returns the size of that bounding box as
measured along the x-axis.

&lt;note&gt;&lt;para&gt;If, for example, clutter_actor_get_transformed_paint_volume()
is used to transform a 2D child actor that is 100px wide, 100px
high and 0px deep into container coordinates then the width might
not simply be 100px if the child actor has a 3D rotation applied to
it.&lt;/para&gt;
&lt;para&gt;Remember; after clutter_actor_get_transformed_paint_volume() is
used then a transformed child volume will be defined relative to the
ancestor container actor and so a 2D child actor
can have a 3D bounding volume.&lt;/para&gt;&lt;/note&gt;

&lt;note&gt;There are no accuracy guarantees for the reported width,
except that it must always be &gt;= to the true width. This is
because actors may report simple, loose fitting paint-volumes
for efficiency&lt;/note&gt;


</description>
<parameters>
<parameter name="pv">
<parameter_description> a #ClutterPaintVolume
</parameter_description>
</parameter>
</parameters>
<return> the width, in units of @pv's local coordinate system.


</return>
</function>

<function name="clutter_paint_volume_set_depth">
<description>
Sets the depth of the paint volume. The depth is measured along
the z axis in the actor coordinates that @pv is associated with.



</description>
<parameters>
<parameter name="pv">
<parameter_description> a #ClutterPaintVolume
</parameter_description>
</parameter>
<parameter name="depth">
<parameter_description> the depth of the paint volume, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_volume_set_from_allocation">
<description>
Sets the #ClutterPaintVolume from the allocation of @actor.

This function should be used when overriding the
#ClutterActorClass.get_paint_volume() by #ClutterActor sub-classes
that do not paint outside their allocation.

A typical example is:

|[
static gboolean
my_actor_get_paint_volume (ClutterActor       *self,
ClutterPaintVolume *volume)
{
return clutter_paint_volume_set_from_allocation (volume, self);
}
]|


</description>
<parameters>
<parameter name="pv">
<parameter_description> a #ClutterPaintVolume
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the paint volume was successfully set, and %FALSE
otherwise


</return>
</function>

<function name="clutter_paint_volume_set_height">
<description>
Sets the height of the paint volume. The height is measured along
the y axis in the actor coordinates that @pv is associated with.



</description>
<parameters>
<parameter name="pv">
<parameter_description> a #ClutterPaintVolume
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the paint volume, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_volume_set_origin">
<description>
Sets the origin of the paint volume.

The origin is defined as the X, Y and Z coordinates of the top-left
corner of an actor's paint volume, in actor coordinates.

The default is origin is assumed at: (0, 0, 0)



</description>
<parameters>
<parameter name="pv">
<parameter_description> a #ClutterPaintVolume
</parameter_description>
</parameter>
<parameter name="origin">
<parameter_description> a #ClutterVertex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_volume_set_width">
<description>
Sets the width of the paint volume. The width is measured along
the x axis in the actor coordinates that @pv is associated with.



</description>
<parameters>
<parameter name="pv">
<parameter_description> a #ClutterPaintVolume
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the paint volume, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_volume_union">
<description>
Updates the geometry of @pv to encompass @pv and @another_pv.

&lt;note&gt;There are no guarantees about how precisely the two volumes
will be encompassed.&lt;/note&gt;



</description>
<parameters>
<parameter name="pv">
<parameter_description> The first #ClutterPaintVolume and destination for resulting
union
</parameter_description>
</parameter>
<parameter name="another_pv">
<parameter_description> A second #ClutterPaintVolume to union with @pv
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_paint_volume_union_box">
<description>
Unions the 2D region represented by @box to a #ClutterPaintVolume.

This function is similar to clutter_paint_volume_union(), but it is
specific for 2D regions.



</description>
<parameters>
<parameter name="pv">
<parameter_description> a #ClutterPaintVolume
</parameter_description>
</parameter>
<parameter name="box">
<parameter_description> a #ClutterActorBox to union to @pv
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_pan_action_get_acceleration_factor">
<description>
Retrieves the initial acceleration factor for interpolated ::pan events.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterPanAction
</parameter_description>
</parameter>
</parameters>
<return> The initial acceleration factor for interpolated events.
</return>
</function>

<function name="clutter_pan_action_get_deceleration">
<description>
Retrieves the deceleration rate of interpolated ::pan events.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterPanAction
</parameter_description>
</parameter>
</parameters>
<return> The deceleration rate of the interpolated events.
</return>
</function>

<function name="clutter_pan_action_get_interpolate">
<description>
Checks if the action should emit ::pan events even after releasing
the pointer during a panning gesture, to emulate some kind of
kinetic inertia.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterPanAction
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if interpolated events emission is active.
</return>
</function>

<function name="clutter_pan_action_get_interpolated_coords">
<description>
Retrieves the coordinates, in stage space, of the latest interpolated
event, analogous to clutter_gesture_action_get_motion_coords().

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterPanAction
</parameter_description>
</parameter>
<parameter name="interpolated_x">
<parameter_description> return location for the latest
interpolated event's X coordinate
</parameter_description>
</parameter>
<parameter name="interpolated_y">
<parameter_description> return location for the latest
interpolated event's Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_pan_action_get_interpolated_delta">
<description>
Retrieves the delta, in stage space, since the latest interpolated
event, analogous to clutter_gesture_action_get_motion_delta().


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterPanAction
</parameter_description>
</parameter>
<parameter name="delta_x">
<parameter_description> return location for the X delta since
the latest interpolated event
</parameter_description>
</parameter>
<parameter name="delta_y">
<parameter_description> return location for the Y delta since
the latest interpolated event
</parameter_description>
</parameter>
</parameters>
<return> the distance since the latest interpolated event
</return>
</function>

<function name="clutter_pan_action_get_motion_coords">
<description>
Retrieves the coordinates, in stage space, dependent on the current state
of the #ClutterPanAction. If it is inactive, both fields will be
set to 0. If it is panning by user action, the values will be equivalent
to those returned by clutter_gesture_action_get_motion_coords().
If it is interpolating with some form of kinetic scrolling, the values
will be equivalent to those returned by
clutter_pan_action_get_interpolated_coords(). This is a convenience
method designed to be used in replacement &quot;pan&quot; signal handlers.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterPanAction
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> the touch point index, with 0 being the first touch
point received by the action
</parameter_description>
</parameter>
<parameter name="motion_x">
<parameter_description> return location for the X coordinate
</parameter_description>
</parameter>
<parameter name="motion_y">
<parameter_description> return location for the Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_pan_action_get_motion_delta">
<description>
Retrieves the delta, in stage space, dependent on the current state
of the #ClutterPanAction. If it is inactive, both fields will be
set to 0. If it is panning by user action, the values will be equivalent
to those returned by clutter_gesture_action_get_motion_delta().
If it is interpolating with some form of kinetic scrolling, the values
will be equivalent to those returned by
clutter_pan_action_get_interpolated_delta(). This is a convenience
method designed to be used in replacement &quot;pan&quot; signal handlers.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterPanAction
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> the touch point index, with 0 being the first touch
point received by the action
</parameter_description>
</parameter>
<parameter name="delta_x">
<parameter_description> return location for the X delta
</parameter_description>
</parameter>
<parameter name="delta_y">
<parameter_description> return location for the Y delta
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_pan_action_get_pan_axis">
<description>
Retrieves the axis constraint set by clutter_pan_action_set_pan_axis()


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterPanAction
</parameter_description>
</parameter>
</parameters>
<return> the axis constraint
</return>
</function>

<function name="clutter_pan_action_new">
<description>
Creates a new #ClutterPanAction instance


</description>
<parameters>
</parameters>
<return> the newly created #ClutterPanAction
</return>
</function>

<function name="clutter_pan_action_set_acceleration_factor">
<description>
Factor applied to the momentum velocity at the time of releasing the
pointer when generating interpolated ::pan events.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterPanAction
</parameter_description>
</parameter>
<parameter name="factor">
<parameter_description> The acceleration factor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_pan_action_set_deceleration">
<description>
Sets the deceleration rate of the interpolated ::pan events generated
after a pan gesture. This is approximately the value that the momentum
at the time of releasing the pointer is divided by every 60th of a second.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterPanAction
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> The deceleration rate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_pan_action_set_interpolate">
<description>
Sets whether the action should emit interpolated ::pan events
after the drag has ended, to emulate the gesture kinetic inertia.

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterPanAction
</parameter_description>
</parameter>
<parameter name="should_interpolate">
<parameter_description> whether to enable interpolated pan events
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_pan_action_set_pan_axis">
<description>
Restricts the panning action to a specific axis

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterPanAction
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the axis to constraint the panning to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_param_spec_color">
<description>
Creates a #GParamSpec for properties using #ClutterColor.


</description>
<parameters>
<parameter name="name">
<parameter_description> name of the property
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> short name
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description (can be translatable)
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the param spec
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GParamSpec


</return>
</function>

<function name="clutter_param_spec_units">
<description>
Creates a #GParamSpec for properties using #ClutterUnits.


</description>
<parameters>
<parameter name="name">
<parameter_description> name of the property
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> short name
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description (can be translatable)
</parameter_description>
</parameter>
<parameter name="default_type">
<parameter_description> the default type for the #ClutterUnits
</parameter_description>
</parameter>
<parameter name="minimum">
<parameter_description> lower boundary
</parameter_description>
</parameter>
<parameter name="maximum">
<parameter_description> higher boundary
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the param spec
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GParamSpec


</return>
</function>

<function name="clutter_path_add_cairo_path">
<description>
Add the nodes of the Cairo path to the end of @path.



</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="cpath">
<parameter_description> a Cairo path
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_add_close">
<description>
Adds a %CLUTTER_PATH_CLOSE type node to the path. This creates a
straight line from the last node to the last %CLUTTER_PATH_MOVE_TO
type node.



</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_add_curve_to">
<description>
Adds a %CLUTTER_PATH_CURVE_TO type node to the path. This causes
the actor to follow a bezier from the last node to (@x_3, @y_3) using
(@x_1, @y_1) and (@x_2,@y_2) as control points.



</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="x_1">
<parameter_description> the x coordinate of the first control point
</parameter_description>
</parameter>
<parameter name="y_1">
<parameter_description> the y coordinate of the first control point
</parameter_description>
</parameter>
<parameter name="x_2">
<parameter_description> the x coordinate of the second control point
</parameter_description>
</parameter>
<parameter name="y_2">
<parameter_description> the y coordinate of the second control point
</parameter_description>
</parameter>
<parameter name="x_3">
<parameter_description> the x coordinate of the third control point
</parameter_description>
</parameter>
<parameter name="y_3">
<parameter_description> the y coordinate of the third control point
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_add_line_to">
<description>
Adds a %CLUTTER_PATH_LINE_TO type node to the path. This causes the
actor to move to the new coordinates in a straight line.



</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_add_move_to">
<description>
Adds a %CLUTTER_PATH_MOVE_TO type node to the path. This is usually
used as the first node in a path. It can also be used in the middle
of the path to cause the actor to jump to the new coordinate.



</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_add_node">
<description>
Adds @node to the end of the path.



</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> a #ClutterPathNode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_add_rel_curve_to">
<description>
Same as clutter_path_add_curve_to() except the coordinates are
relative to the previous node.



</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="x_1">
<parameter_description> the x coordinate of the first control point
</parameter_description>
</parameter>
<parameter name="y_1">
<parameter_description> the y coordinate of the first control point
</parameter_description>
</parameter>
<parameter name="x_2">
<parameter_description> the x coordinate of the second control point
</parameter_description>
</parameter>
<parameter name="y_2">
<parameter_description> the y coordinate of the second control point
</parameter_description>
</parameter>
<parameter name="x_3">
<parameter_description> the x coordinate of the third control point
</parameter_description>
</parameter>
<parameter name="y_3">
<parameter_description> the y coordinate of the third control point
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_add_rel_line_to">
<description>
Same as clutter_path_add_line_to() except the coordinates are
relative to the previous node.



</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_add_rel_move_to">
<description>
Same as clutter_path_add_move_to() except the coordinates are
relative to the previous node.



</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_add_string">
<description>
Adds new nodes to the end of the path as described in @str. The
format is a subset of the SVG path format. Each node is represented
by a letter and is followed by zero, one or three pairs of
coordinates. The coordinates can be separated by spaces or a
comma. The types are:

&lt;variablelist&gt;
&lt;varlistentry&gt;&lt;term&gt;M&lt;/term&gt;
&lt;listitem&gt;&lt;para&gt;
Adds a %CLUTTER_PATH_MOVE_TO node. Takes one pair of coordinates.
&lt;/para&gt;&lt;/listitem&gt;&lt;/varlistentry&gt;
&lt;varlistentry&gt;&lt;term&gt;L&lt;/term&gt;
&lt;listitem&gt;&lt;para&gt;
Adds a %CLUTTER_PATH_LINE_TO node. Takes one pair of coordinates.
&lt;/para&gt;&lt;/listitem&gt;&lt;/varlistentry&gt;
&lt;varlistentry&gt;&lt;term&gt;C&lt;/term&gt;
&lt;listitem&gt;&lt;para&gt;
Adds a %CLUTTER_PATH_CURVE_TO node. Takes three pairs of coordinates.
&lt;/para&gt;&lt;/listitem&gt;&lt;/varlistentry&gt;
&lt;varlistentry&gt;&lt;term&gt;z&lt;/term&gt;
&lt;listitem&gt;&lt;para&gt;
Adds a %CLUTTER_PATH_CLOSE node. No coordinates are needed.
&lt;/para&gt;&lt;/listitem&gt;&lt;/varlistentry&gt;
&lt;/variablelist&gt;

The M, L and C commands can also be specified in lower case which
means the coordinates are relative to the previous node.

For example, to move an actor in a 100 by 100 pixel square centered
on the point 300,300 you could use the following path:

&lt;informalexample&gt;
&lt;programlisting&gt;
M 250,350 l 0 -100 L 350,250 l 0 100 z
&lt;/programlisting&gt;
&lt;/informalexample&gt;

If the path description isn't valid %FALSE will be returned and no
nodes will be added.


</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string describing the new nodes
</parameter_description>
</parameter>
</parameters>
<return> %TRUE is the path description was valid or %FALSE
otherwise.


</return>
</function>

<function name="clutter_path_clear">
<description>
Removes all nodes from the path.



</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_constraint_get_offset">
<description>
Retrieves the offset along the #ClutterPath used by @constraint.


</description>
<parameters>
<parameter name="constraint">
<parameter_description> a #ClutterPathConstraint
</parameter_description>
</parameter>
</parameters>
<return> the offset


</return>
</function>

<function name="clutter_path_constraint_get_path">
<description>
Retrieves a pointer to the #ClutterPath used by @constraint.


</description>
<parameters>
<parameter name="constraint">
<parameter_description> a #ClutterPathConstraint
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterPath used by the
#ClutterPathConstraint, or %NULL. The returned #ClutterPath is owned
by the constraint and it should not be unreferenced


</return>
</function>

<function name="clutter_path_constraint_new">
<description>
Creates a new #ClutterPathConstraint with the given @path and @offset


</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath, or %NULL
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset along the #ClutterPath
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterPathConstraint


</return>
</function>

<function name="clutter_path_constraint_set_offset">
<description>
Sets the offset along the #ClutterPath used by @constraint.



</description>
<parameters>
<parameter name="constraint">
<parameter_description> a #ClutterPathConstraint
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset along the path
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_constraint_set_path">
<description>
Sets the @path to be followed by the #ClutterPathConstraint.

The @constraint will take ownership of the #ClutterPath passed to this
function.



</description>
<parameters>
<parameter name="constraint">
<parameter_description> a #ClutterPathConstraint
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_foreach">
<description>
Calls a function for each node of the path.



</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the function to call with each node
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_get_description">
<description>
Returns a newly allocated string describing the path in the same
format as used by clutter_path_add_string().


</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
</parameters>
<return> a string description of the path. Free with g_free().


</return>
</function>

<function name="clutter_path_get_length">
<description>
Retrieves an approximation of the total length of the path.


</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
</parameters>
<return> the length of the path.


</return>
</function>

<function name="clutter_path_get_n_nodes">
<description>
Retrieves the number of nodes in the path.


</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
</parameters>
<return> the number of nodes.


</return>
</function>

<function name="clutter_path_get_node">
<description>
Retrieves the node of the path indexed by @index.



</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the node number to retrieve
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> a location to store a copy of the node
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_get_nodes">
<description>
Returns a #GSList of #ClutterPathNode&lt;!-- --&gt;s. The list should be
freed with g_slist_free(). The nodes are owned by the path and
should not be freed. Altering the path may cause the nodes in the
list to become invalid so you should copy them if you want to keep
the list.


</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
</parameters>
<return> a
list of nodes in the path.


</return>
</function>

<function name="clutter_path_get_position">
<description>
The value in @progress represents a position along the path where
0.0 is the beginning and 1.0 is the end of the path. An
interpolated position is then stored in @position.


</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="progress">
<parameter_description> a position along the path as a fraction of its length
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> location to store the position
</parameter_description>
</parameter>
</parameters>
<return> index of the node used to calculate the position.


</return>
</function>

<function name="clutter_path_insert_node">
<description>
Inserts @node into the path before the node at the given offset. If
@index_ is negative it will append the node to the end of the path.



</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> offset of where to insert the node
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> the node to insert
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_new">
<description>
Creates a new #ClutterPath instance with no nodes.

The object has a floating reference so if you add it to a
#ClutterBehaviourPath then you do not need to unref it.


</description>
<parameters>
</parameters>
<return> the newly created #ClutterPath


</return>
</function>

<function name="clutter_path_new_with_description">
<description>
Creates a new #ClutterPath instance with the nodes described in
@desc. See clutter_path_add_string() for details of the format of
the string.

The object has a floating reference so if you add it to a
#ClutterBehaviourPath then you do not need to unref it.


</description>
<parameters>
<parameter name="desc">
<parameter_description> a string describing the path
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterPath


</return>
</function>

<function name="clutter_path_node_copy">
<description>
Makes an allocated copy of a node.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPathNode
</parameter_description>
</parameter>
</parameters>
<return> the copied node.


</return>
</function>

<function name="clutter_path_node_equal">
<description>
Compares two nodes and checks if they are the same type with the
same coordinates.


</description>
<parameters>
<parameter name="node_a">
<parameter_description> First node
</parameter_description>
</parameter>
<parameter name="node_b">
<parameter_description> Second node
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the nodes are the same.


</return>
</function>

<function name="clutter_path_node_free">
<description>
Frees the memory of an allocated node.



</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPathNode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_remove_node">
<description>
Removes the node at the given offset from the path.



</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> index of the node to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_replace_node">
<description>
Replaces the node at offset @index_ with @node.



</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> index to the existing node
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> the replacement node
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_set_description">
<description>
Replaces all of the nodes in the path with nodes described by
@str. See clutter_path_add_string() for details of the format.

If the string is invalid then %FALSE is returned and the path is
unaltered.


</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string describing the path
</parameter_description>
</parameter>
</parameters>
<return> %TRUE is the path was valid, %FALSE otherwise.


</return>
</function>

<function name="clutter_path_to_cairo_path">
<description>
Add the nodes of the ClutterPath to the path in the Cairo context.



</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="cr">
<parameter_description> a Cairo context
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_pipeline_node_new">
<description>
Creates a new #ClutterPaintNode that will use the @pipeline to
paint its contents.

This function will acquire a reference on the passed @pipeline,
so it is safe to call cogl_object_unref() when it returns.


</description>
<parameters>
<parameter name="pipeline">
<parameter_description> a Cogl pipeline state object, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterPaintNode.
Use clutter_paint_node_unref() when done.


</return>
</function>

<function name="clutter_point_alloc">
<description>
Allocates a new #ClutterPoint.


</description>
<parameters>
</parameters>
<return> the newly allocated #ClutterPoint.
Use clutter_point_free() to free its resources.


</return>
</function>

<function name="clutter_point_copy">
<description>
Creates a new #ClutterPoint with the same coordinates of @point.


</description>
<parameters>
<parameter name="point">
<parameter_description> a #ClutterPoint
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #ClutterPoint.
Use clutter_point_free() to free its resources.


</return>
</function>

<function name="clutter_point_distance">
<description>
Computes the distance between two #ClutterPoint.


</description>
<parameters>
<parameter name="a">
<parameter_description> a #ClutterPoint
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> a #ClutterPoint
</parameter_description>
</parameter>
<parameter name="x_distance">
<parameter_description> return location for the horizontal
distance between the points
</parameter_description>
</parameter>
<parameter name="y_distance">
<parameter_description> return location for the vertical
distance between the points
</parameter_description>
</parameter>
</parameters>
<return> the distance between the points.


</return>
</function>

<function name="clutter_point_equals">
<description>
Compares two #ClutterPoint for equality.


</description>
<parameters>
<parameter name="a">
<parameter_description> the first #ClutterPoint to compare
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> the second #ClutterPoint to compare
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterPoints are equal


</return>
</function>

<function name="clutter_point_free">
<description>
Frees the resources allocated for @point.



</description>
<parameters>
<parameter name="point">
<parameter_description> a #ClutterPoint
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_point_init">
<description>
Initializes @point with the given coordinates.


</description>
<parameters>
<parameter name="point">
<parameter_description> a #ClutterPoint
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the X coordinate of the point
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the Y coordinate of the point
</parameter_description>
</parameter>
</parameters>
<return> the initialized #ClutterPoint


</return>
</function>

<function name="clutter_point_zero">
<description>
A point centered at (0, 0).

The returned value can be used as a guard.


</description>
<parameters>
</parameters>
<return> a point centered in (0, 0); the returned #ClutterPoint
is owned by Clutter and it should not be modified or freed.


</return>
</function>

<function name="clutter_property_transition_get_property_name">
<description>
Retrieves the value of the #ClutterPropertyTransition:property-name
property.


</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterPropertyTransition
</parameter_description>
</parameter>
</parameters>
<return> the name of the property being animated, or %NULL if
none is set. The returned string is owned by the @transition and
it should not be freed.


</return>
</function>

<function name="clutter_property_transition_new">
<description>
Creates a new #ClutterPropertyTransition.


</description>
<parameters>
<parameter name="property_name">
<parameter_description> a property of @animatable, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterPropertyTransition.
Use g_object_unref() when done


</return>
</function>

<function name="clutter_property_transition_set_property_name">
<description>
Sets the #ClutterPropertyTransition:property-name property of @transition.



</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterPropertyTransition
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> a property name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rect_alloc">
<description>
Creates a new, empty #ClutterRect.

You can use clutter_rect_init() to initialize the returned rectangle,
for instance:

|[
rect = clutter_rect_init (clutter_rect_alloc (), x, y, width, height);
]|


</description>
<parameters>
</parameters>
<return> the newly allocated #ClutterRect.
Use clutter_rect_free() to free its resources


</return>
</function>

<function name="clutter_rect_clamp_to_pixel">
<description>
Rounds the origin of @rect downwards to the nearest integer, and rounds
the size of @rect upwards to the nearest integer, so that @rect is
updated to the smallest rectangle capable of fully containing the
original, fractional rectangle.



</description>
<parameters>
<parameter name="rect">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rect_contains_point">
<description>
Checks whether @point is contained by @rect, after normalizing the
rectangle.


</description>
<parameters>
<parameter name="rect">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> the point to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @point is contained by @rect.


</return>
</function>

<function name="clutter_rect_contains_rect">
<description>
Checks whether @a contains @b.

The first rectangle contains the second if the union of the
two #ClutterRect is equal to the first rectangle.


</description>
<parameters>
<parameter name="a">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the first rectangle contains the second.


</return>
</function>

<function name="clutter_rect_copy">
<description>
Copies @rect into a new #ClutterRect instance.


</description>
<parameters>
<parameter name="rect">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
</parameters>
<return> the newly allocate copy of @rect.
Use clutter_rect_free() to free the associated resources


</return>
</function>

<function name="clutter_rect_equals">
<description>
Checks whether @a and @b are equals.

This function will normalize both @a and @b before comparing
their origin and size.


</description>
<parameters>
<parameter name="a">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the rectangles match in origin and size.


</return>
</function>

<function name="clutter_rect_free">
<description>
Frees the resources allocated by @rect.



</description>
<parameters>
<parameter name="rect">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rect_get_center">
<description>
Retrieves the center of @rect, after normalizing the rectangle,
and updates @center with the correct coordinates.



</description>
<parameters>
<parameter name="rect">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
<parameter name="center">
<parameter_description> a #ClutterPoint
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rect_get_height">
<description>
Retrieves the height of @rect.


</description>
<parameters>
<parameter name="rect">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
</parameters>
<return> the height of the rectangle


</return>
</function>

<function name="clutter_rect_get_width">
<description>
Retrieves the width of @rect.


</description>
<parameters>
<parameter name="rect">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
</parameters>
<return> the width of the rectangle


</return>
</function>

<function name="clutter_rect_get_x">
<description>
Retrieves the X coordinate of the origin of @rect.


</description>
<parameters>
<parameter name="rect">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
</parameters>
<return> the X coordinate of the origin of the rectangle


</return>
</function>

<function name="clutter_rect_get_y">
<description>
Retrieves the Y coordinate of the origin of @rect.


</description>
<parameters>
<parameter name="rect">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
</parameters>
<return> the Y coordinate of the origin of the rectangle


</return>
</function>

<function name="clutter_rect_init">
<description>
Initializes a #ClutterRect with the given origin and size.


</description>
<parameters>
<parameter name="rect">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of the origin
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of the origin
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the rectangle
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the rectangle
</parameter_description>
</parameter>
</parameters>
<return> the updated rectangle


</return>
</function>

<function name="clutter_rect_inset">
<description>
Normalizes the @rect and offsets its origin by the @d_x and @d_y values;
the size is adjusted by (2 * @d_x, 2 * @d_y).

If @d_x and @d_y are positive the size of the rectangle is decreased; if
the values are negative, the size of the rectangle is increased.

If the resulting rectangle has a negative width or height, the size is
set to 0.



</description>
<parameters>
<parameter name="rect">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
<parameter name="d_x">
<parameter_description> an horizontal value; a positive @d_x will create an inset rectangle,
and a negative value will create a larger rectangle
</parameter_description>
</parameter>
<parameter name="d_y">
<parameter_description> a vertical value; a positive @d_x will create an inset rectangle,
and a negative value will create a larger rectangle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rect_intersection">
<description>
Computes the intersection of @a and @b, and places it in @res, if @res
is not %NULL.

This function will normalize both @a and @b prior to computing their
intersection.

This function can be used to simply check if the intersection of @a and @b
is not empty, by using %NULL for @res.


</description>
<parameters>
<parameter name="a">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #ClutterRect, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the intersection of @a and @b is not empty


</return>
</function>

<function name="clutter_rect_normalize">
<description>
Normalizes a #ClutterRect.

A #ClutterRect is defined by the area covered by its size; this means
that a #ClutterRect with #ClutterRect.origin in [ 0, 0 ] and a
#ClutterRect.size of [ 10, 10 ] is equivalent to a #ClutterRect with
#ClutterRect.origin in [ 10, 10 ] and a #ClutterRect.size of [ -10, -10 ].

This function is useful to ensure that a rectangle has positive width
and height; it will modify the passed @rect and normalize its size.



</description>
<parameters>
<parameter name="rect">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rect_offset">
<description>
Offsets the origin of @rect by the given values, after normalizing
the rectangle.



</description>
<parameters>
<parameter name="rect">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
<parameter name="d_x">
<parameter_description> the horizontal offset value
</parameter_description>
</parameter>
<parameter name="d_y">
<parameter_description> the vertical offset value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rect_union">
<description>
Computes the smallest possible rectangle capable of fully containing
both @a and @b, and places it into @res.

This function will normalize both @a and @b prior to computing their
union.



</description>
<parameters>
<parameter name="a">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rect_zero">
<description>
A #ClutterRect with #ClutterRect.origin set at (0, 0) and a size
of 0.

The returned value can be used as a guard.


</description>
<parameters>
</parameters>
<return> a rectangle with origin in (0, 0) and a size of 0.
The returned #ClutterRect is owned by Clutter and it should not
be modified or freed.


</return>
</function>

<function name="clutter_rotate_action_new">
<description>
Creates a new #ClutterRotateAction instance


</description>
<parameters>
</parameters>
<return> the newly created #ClutterRotateAction


</return>
</function>

<function name="clutter_script_add_search_paths">
<description>
Adds @paths to the list of search paths held by @script.

The search paths are used by clutter_script_lookup_filename(), which
can be used to define search paths for the textures source file name
or other custom, file-based properties.



</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="paths">
<parameter_description> an array of strings containing
different search paths
</parameter_description>
</parameter>
<parameter name="n_paths">
<parameter_description> the length of the passed array
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_connect_signals">
<description>
Connects all the signals defined into a UI definition file to their
handlers.

This method invokes clutter_script_connect_signals_full() internally
and uses  #GModule's introspective features (by opening the current
module's scope) to look at the application's symbol table.

Note that this function will not work if #GModule is not supported by
the platform Clutter is running on.



</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to be passed to the signal handlers, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_connect_signals_full">
<description>
Connects all the signals defined into a UI definition file to their
handlers.

This function allows to control how the signal handlers are
going to be connected to their respective signals. It is meant
primarily for language bindings to allow resolving the function
names using the native API, but it can also be used on platforms
that do not support GModule.

Applications should use clutter_script_connect_signals().



</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> signal connection function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to be passed to the signal handlers, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_ensure_objects">
<description>
Ensure that every object defined inside @script is correctly
constructed. You should rarely need to use this function.



</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_get_object">
<description>
Retrieves the object bound to @name. This function does not increment
the reference count of the returned object.


</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the object to retrieve
</parameter_description>
</parameter>
</parameters>
<return> the named object, or %NULL if no object
with the given name was available


</return>
</function>

<function name="clutter_script_get_objects">
<description>
Retrieves a list of objects for the given names. After @script, object
names/return location pairs should be listed, with a %NULL pointer
ending the list, like:

&lt;informalexample&gt;&lt;programlisting&gt;
GObject *my_label, *a_button, *main_timeline;

clutter_script_get_objects (script,
&quot;my-label&quot;, &amp;my_label,
&quot;a-button&quot;, &amp;a_button,
&quot;main-timeline&quot;, &amp;main_timeline,
NULL);
&lt;/programlisting&gt;&lt;/informalexample&gt;

Note: This function does not increment the reference count of the
returned objects.


</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="first_name">
<parameter_description> the name of the first object to retrieve
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> return location for a #GObject, then additional names, ending
with %NULL
</parameter_description>
</parameter>
</parameters>
<return> the number of objects returned.


</return>
</function>

<function name="clutter_script_get_translation_domain">
<description>
Retrieves the translation domain set using
clutter_script_set_translation_domain().


</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
</parameters>
<return> the translation domain, if any is set,
or %NULL


</return>
</function>

<function name="clutter_script_get_type_from_name">
<description>
Looks up a type by name, using the virtual function that 
#ClutterScript has for that purpose. This function should
rarely be used.


</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="type_name">
<parameter_description> name of the type to look up
</parameter_description>
</parameter>
</parameters>
<return> the type for the requested type name, or
%G_TYPE_INVALID if not corresponding type was found.


</return>
</function>

<function name="clutter_script_list_objects">
<description>
Retrieves all the objects created by @script.

Note: this function does not increment the reference count of the
objects it returns.


</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
</parameters>
<return> a list
of #GObject&lt;!-- --&gt;s, or %NULL. The objects are owned by the
#ClutterScript instance. Use g_list_free() on the returned list when
done.


</return>
</function>

<function name="clutter_script_load_from_data">
<description>
Loads the definitions from @data into @script and merges with
the currently loaded ones, if any.


</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a buffer containing the definitions
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of the buffer, or -1 if @data is a NUL-terminated
buffer
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> on error, zero is returned and @error is set
accordingly. On success, the merge id for the UI definitions is
returned. You can use the merge id with clutter_script_unmerge_objects().


</return>
</function>

<function name="clutter_script_load_from_file">
<description>
Loads the definitions from @filename into @script and merges with
the currently loaded ones, if any.


</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the full path to the definition file
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> on error, zero is returned and @error is set
accordingly. On success, the merge id for the UI definitions is
returned. You can use the merge id with clutter_script_unmerge_objects().


</return>
</function>

<function name="clutter_script_load_from_resource">
<description>
Loads the definitions from a resource file into @script and merges with
the currently loaded ones, if any.


</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="resource_path">
<parameter_description> the resource path of the file to parse
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> on error, zero is returned and @error is set
accordingly. On success, the merge id for the UI definitions is
returned. You can use the merge id with clutter_script_unmerge_objects().


</return>
</function>

<function name="clutter_script_lookup_filename">
<description>
Looks up @filename inside the search paths of @script. If @filename
is found, its full path will be returned .


</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the name of the file to lookup
</parameter_description>
</parameter>
</parameters>
<return> the full path of @filename or %NULL if no path was
found.


</return>
</function>

<function name="clutter_script_new">
<description>
Creates a new #ClutterScript instance. #ClutterScript can be used
to load objects definitions for scenegraph elements, like actors,
or behavioural elements, like behaviours and timelines. The
definitions must be encoded using the JavaScript Object Notation (JSON)
language.


</description>
<parameters>
</parameters>
<return> the newly created #ClutterScript instance. Use
g_object_unref() when done.


</return>
</function>

<function name="clutter_script_set_translation_domain">
<description>
Sets the translation domain for @script.



</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> the translation domain, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_unmerge_objects">
<description>
Unmerges the objects identified by @merge_id.



</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="merge_id">
<parameter_description> merge id returned when loading a UI definition
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_scriptable_get_id">
<description>
Retrieves the id of @scriptable set using clutter_scriptable_set_id().


</description>
<parameters>
<parameter name="scriptable">
<parameter_description> a #ClutterScriptable
</parameter_description>
</parameter>
</parameters>
<return> the id of the object. The returned string is owned by
the scriptable object and should never be modified of freed


</return>
</function>

<function name="clutter_scriptable_parse_custom_node">
<description>
Parses the passed JSON node. The implementation must set the type
of the passed #GValue pointer using g_value_init().


</description>
<parameters>
<parameter name="scriptable">
<parameter_description> a #ClutterScriptable
</parameter_description>
</parameter>
<parameter name="script">
<parameter_description> the #ClutterScript creating the scriptable instance
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the generic value to be set
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the node
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> the JSON node to be parsed
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the node was successfully parsed, %FALSE otherwise.


</return>
</function>

<function name="clutter_scriptable_set_custom_property">
<description>
Overrides the common properties setting. The underlying virtual
function should be used when implementing custom properties.



</description>
<parameters>
<parameter name="scriptable">
<parameter_description> a #ClutterScriptable
</parameter_description>
</parameter>
<parameter name="script">
<parameter_description> the #ClutterScript creating the scriptable instance
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the property
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the property
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_scriptable_set_id">
<description>
Sets @id_ as the unique Clutter script it for this instance of
#ClutterScriptableIface.

This name can be used by user interface designer applications to
define a unique name for an object constructable using the UI
definition language parsed by #ClutterScript.



</description>
<parameters>
<parameter name="scriptable">
<parameter_description> a #ClutterScriptable
</parameter_description>
</parameter>
<parameter name="id_">
<parameter_description> the #ClutterScript id of the object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_scroll_actor_get_scroll_mode">
<description>
Retrieves the #ClutterScrollActor:scroll-mode property


</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterScrollActor
</parameter_description>
</parameter>
</parameters>
<return> the scrolling mode


</return>
</function>

<function name="clutter_scroll_actor_new">
<description>
Creates a new #ClutterScrollActor.


</description>
<parameters>
</parameters>
<return> The newly created #ClutterScrollActor
instance.


</return>
</function>

<function name="clutter_scroll_actor_scroll_to_point">
<description>
Scrolls the contents of @actor so that @point is the new origin
of the visible area.

The coordinates of @point must be relative to the @actor.

This function will use the currently set easing state of the @actor
to transition from the current scroll origin to the new one.



</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterScrollActor
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> a #ClutterPoint
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_scroll_actor_scroll_to_rect">
<description>
Scrolls @actor so that @rect is in the visible portion.



</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterScrollActor
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> a #ClutterRect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_scroll_actor_set_scroll_mode">
<description>
Sets the #ClutterScrollActor:scroll-mode property.



</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterScrollActor
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> a #ClutterScrollMode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_settings_get_default">
<description>
Retrieves the singleton instance of #ClutterSettings


</description>
<parameters>
</parameters>
<return> the instance of #ClutterSettings. The
returned object is owned by Clutter and it should not be unreferenced
directly


</return>
</function>

<function name="clutter_shader_effect_get_program">
<description>
Retrieves a pointer to the program's handle


</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterShaderEffect
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the program's handle,
or %COGL_INVALID_HANDLE


</return>
</function>

<function name="clutter_shader_effect_get_shader">
<description>
Retrieves a pointer to the shader's handle


</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterShaderEffect
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the shader's handle,
or %COGL_INVALID_HANDLE


</return>
</function>

<function name="clutter_shader_effect_new">
<description>
Creates a new #ClutterShaderEffect, to be applied to an actor using
clutter_actor_add_effect().

The effect will be empty until clutter_shader_effect_set_shader_source()
is called.


</description>
<parameters>
<parameter name="shader_type">
<parameter_description> the type of the shader, either %CLUTTER_FRAGMENT_SHADER,
or %CLUTTER_VERTEX_SHADER
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterShaderEffect.
Use g_object_unref() when done.


</return>
</function>

<function name="clutter_shader_effect_set_shader_source">
<description>
Sets the source of the GLSL shader used by @effect

This function should only be called by implementations of
the #ClutterShaderEffect class, and not by application code.

This function can only be called once; subsequent calls will
yield no result.


</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterShaderEffect
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> the source of a GLSL shader
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the source was set


</return>
</function>

<function name="clutter_shader_effect_set_uniform">
<description>
Sets a list of values as the payload for the uniform @name inside
the shader effect

The @gtype must be one of: %G_TYPE_INT, for 1 or more integer values;
%G_TYPE_FLOAT, for 1 or more floating point values;
%CLUTTER_TYPE_SHADER_INT, for a pointer to an array of integer values;
%CLUTTER_TYPE_SHADER_FLOAT, for a pointer to an array of floating point
values; and %CLUTTER_TYPE_SHADER_MATRIX, for a pointer to an array of
floating point values mapping a matrix

The number of values interepreted is defined by the @n_value
argument, and by the @gtype argument. For instance, a uniform named
&quot;sampler0&quot; and containing a single integer value is set using:

|[
clutter_shader_effect_set_uniform (effect, &quot;sampler0&quot;,
G_TYPE_INT, 1,
0);
]|

While a uniform named &quot;components&quot; and containing a 3-elements vector
of floating point values (a &quot;vec3&quot;) can be set using:

|[
gfloat component_r, component_g, component_b;

clutter_shader_effect_set_uniform (effect, &quot;components&quot;,
G_TYPE_FLOAT, 3,
component_r,
component_g,
component_b);
]|

or can be set using:

|[
gfloat component_vec[3];

clutter_shader_effect_set_uniform (effect, &quot;components&quot;,
CLUTTER_TYPE_SHADER_FLOAT, 3,
component_vec);
]|

Finally, a uniform named &quot;map&quot; and containing a matrix can be set using:

|[
clutter_shader_effect_set_uniform (effect, &quot;map&quot;,
CLUTTER_TYPE_SHADER_MATRIX, 1,
cogl_matrix_get_array (&amp;matrix));
]|



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterShaderEffect
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the uniform to set
</parameter_description>
</parameter>
<parameter name="gtype">
<parameter_description> the type of the uniform to set
</parameter_description>
</parameter>
<parameter name="n_values">
<parameter_description> the number of values
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of values
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_shader_effect_set_uniform_value">
<description>
Sets @value as the payload for the uniform @name inside the shader
effect

The #GType of the @value must be one of: %G_TYPE_INT, for a single
integer value; %G_TYPE_FLOAT, for a single floating point value;
%CLUTTER_TYPE_SHADER_INT, for an array of integer values;
%CLUTTER_TYPE_SHADER_FLOAT, for an array of floating point values;
and %CLUTTER_TYPE_SHADER_MATRIX, for a matrix of floating point
values. It also accepts %G_TYPE_DOUBLE for compatibility with other
languages than C.



</description>
<parameters>
<parameter name="effect">
<parameter_description> a #ClutterShaderEffect
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the uniform to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue with the value of the uniform to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_size_alloc">
<description>
Allocates a new #ClutterSize.


</description>
<parameters>
</parameters>
<return> the newly allocated #ClutterSize.
Use clutter_size_free() to free its resources.


</return>
</function>

<function name="clutter_size_copy">
<description>
Creates a new #ClutterSize and duplicates @size.


</description>
<parameters>
<parameter name="size">
<parameter_description> a #ClutterSize
</parameter_description>
</parameter>
</parameters>
<return> the newly allocated #ClutterSize.
Use clutter_size_free() to free its resources.


</return>
</function>

<function name="clutter_size_equals">
<description>
Compares two #ClutterSize for equality.


</description>
<parameters>
<parameter name="a">
<parameter_description> a #ClutterSize to compare
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> a #ClutterSize to compare
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two #ClutterSize are equal


</return>
</function>

<function name="clutter_size_free">
<description>
Frees the resources allocated for @size.



</description>
<parameters>
<parameter name="size">
<parameter_description> a #ClutterSize
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_size_init">
<description>
Initializes a #ClutterSize with the given dimensions.


</description>
<parameters>
<parameter name="size">
<parameter_description> a #ClutterSize
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height
</parameter_description>
</parameter>
</parameters>
<return> the initialized #ClutterSize


</return>
</function>

<function name="clutter_snap_constraint_get_edges">
<description>
Retrieves the edges used by the @constraint



</description>
<parameters>
<parameter name="constraint">
<parameter_description> a #ClutterSnapConstraint
</parameter_description>
</parameter>
<parameter name="from_edge">
<parameter_description> return location for the actor's edge, or %NULL
</parameter_description>
</parameter>
<parameter name="to_edge">
<parameter_description> return location for the source's edge, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_snap_constraint_get_offset">
<description>
Retrieves the offset set using clutter_snap_constraint_set_offset()


</description>
<parameters>
<parameter name="constraint">
<parameter_description> a #ClutterSnapConstraint
</parameter_description>
</parameter>
</parameters>
<return> the offset, in pixels


</return>
</function>

<function name="clutter_snap_constraint_get_source">
<description>
Retrieves the #ClutterActor set using clutter_snap_constraint_set_source()


</description>
<parameters>
<parameter name="constraint">
<parameter_description> a #ClutterSnapConstraint
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the source actor


</return>
</function>

<function name="clutter_snap_constraint_new">
<description>
Creates a new #ClutterSnapConstraint that will snap a #ClutterActor
to the @edge of @source, with the given @offset.


</description>
<parameters>
<parameter name="source">
<parameter_description> the #ClutterActor to use as the source of
the constraint, or %NULL
</parameter_description>
</parameter>
<parameter name="from_edge">
<parameter_description> the edge of the actor to use in the constraint
</parameter_description>
</parameter>
<parameter name="to_edge">
<parameter_description> the edge of @source to use in the constraint
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset to apply to the constraint, in pixels
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterSnapConstraint


</return>
</function>

<function name="clutter_snap_constraint_set_edges">
<description>
Sets the edges to be used by the @constraint

The @from_edge is the edge on the #ClutterActor to which @constraint
has been added. The @to_edge is the edge of the #ClutterActor inside
the #ClutterSnapConstraint:source property.



</description>
<parameters>
<parameter name="constraint">
<parameter_description> a #ClutterSnapConstraint
</parameter_description>
</parameter>
<parameter name="from_edge">
<parameter_description> the edge on the actor
</parameter_description>
</parameter>
<parameter name="to_edge">
<parameter_description> the edge on the source
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_snap_constraint_set_offset">
<description>
Sets the offset to be applied to the constraint



</description>
<parameters>
<parameter name="constraint">
<parameter_description> a #ClutterSnapConstraint
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset to apply, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_snap_constraint_set_source">
<description>
Sets the source #ClutterActor for the constraint



</description>
<parameters>
<parameter name="constraint">
<parameter_description> a #ClutterSnapConstraint
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a #ClutterActor, or %NULL to unset the source
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_ensure_current">
<description>
This function essentially makes sure the right GL context is
current for the passed stage. It is not intended to
be used by applications.



</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_ensure_redraw">
<description>
Ensures that @stage is redrawn

This function should not be called by applications: it is
used when embedding a #ClutterStage into a toolkit with
another windowing system, like GTK+.



</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_ensure_viewport">
<description>
Ensures that the GL viewport is updated with the current
stage window size.

This function will queue a redraw of @stage.

This function should not be called by applications; it is used
when embedding a #ClutterStage into a toolkit with another
windowing system, like GTK+.



</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_event">
<description>
This function is used to emit an event on the main stage.

You should rarely need to use this function, except for
synthetised events.


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the return value from the signal emission


</return>
</function>

<function name="clutter_stage_get_accept_focus">
<description>
Retrieves the value set with clutter_stage_set_accept_focus().


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterStage should accept focus, and %FALSE
otherwise


</return>
</function>

<function name="clutter_stage_get_actor_at_pos">
<description>
Checks the scene at the coordinates @x and @y and returns a pointer
to the #ClutterActor at those coordinates.

By using @pick_mode it is possible to control which actors will be
painted and thus available.


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="pick_mode">
<parameter_description> how the scene graph should be painted
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate to check
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate to check
</parameter_description>
</parameter>
</parameters>
<return> the actor at the specified coordinates,
if any
</return>
</function>

<function name="clutter_stage_get_fullscreen">
<description>
Retrieves whether the stage is full screen or not


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stage is full screen


</return>
</function>

<function name="clutter_stage_get_key_focus">
<description>
Retrieves the actor that is currently under key focus.


</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> the actor with key focus, or the stage


</return>
</function>

<function name="clutter_stage_get_minimum_size">
<description>
Retrieves the minimum size for a stage window as set using
clutter_stage_set_minimum_size().

The returned size may not correspond to the actual minimum size and
it is specific to the #ClutterStage implementation inside the
Clutter backend



</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the minimum width, in pixels,
or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the minimum height, in pixels,
or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_get_motion_events_enabled">
<description>
Retrieves the value set using clutter_stage_set_motion_events_enabled().


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the per-actor motion event delivery is enabled
and %FALSE otherwise


</return>
</function>

<function name="clutter_stage_get_no_clear_hint">
<description>
Retrieves the hint set with clutter_stage_set_no_clear_hint()


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stage should not clear itself on every paint
cycle, and %FALSE otherwise


</return>
</function>

<function name="clutter_stage_get_perspective">
<description>
Retrieves the stage perspective.

</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="perspective">
<parameter_description> return location for a
#ClutterPerspective
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_get_redraw_clip_bounds">
<description>
Gets the bounds of the current redraw for @stage in stage pixel
coordinates. E.g., if only a single actor has queued a redraw then
Clutter may redraw the stage with a clip so that it doesn't have to
paint every pixel in the stage. This function would then return the
bounds of that clip. An application can use this information to
avoid some extra work if it knows that some regions of the stage
aren't going to be painted. This should only be called while the
stage is being painted. If there is no current redraw clip then
this function will set @clip to the full extents of the stage.



</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="clip">
<parameter_description> Return location for the clip bounds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_get_throttle_motion_events">
<description>
Retrieves the value set with clutter_stage_set_throttle_motion_events()


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the motion events are being throttled,
and %FALSE otherwise


</return>
</function>

<function name="clutter_stage_get_title">
<description>
Gets the stage title.


</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> pointer to the title string for the stage. The
returned string is owned by the actor and should not
be modified or freed.


</return>
</function>

<function name="clutter_stage_get_use_alpha">
<description>
Retrieves the value set using clutter_stage_set_use_alpha()


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stage should honour the opacity and the
alpha channel of the stage color


</return>
</function>

<function name="clutter_stage_get_user_resizable">
<description>
Retrieves the value set with clutter_stage_set_user_resizable().


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stage is resizable by the user.


</return>
</function>

<function name="clutter_stage_hide_cursor">
<description>
Makes the cursor invisible on the stage window



</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_manager_get_default">
<description>
Returns the default #ClutterStageManager.


</description>
<parameters>
</parameters>
<return> the default stage manager instance. The returned
object is owned by Clutter and you should not reference or unreference it.


</return>
</function>

<function name="clutter_stage_manager_get_default_stage">
<description>
Returns the default #ClutterStage.


</description>
<parameters>
<parameter name="stage_manager">
<parameter_description> a #ClutterStageManager
</parameter_description>
</parameter>
</parameters>
<return> the default stage. The returned object
is owned by Clutter and you should never reference or unreference it


</return>
</function>

<function name="clutter_stage_manager_list_stages">
<description>
Lists all currently used stages.


</description>
<parameters>
<parameter name="stage_manager">
<parameter_description> a #ClutterStageManager
</parameter_description>
</parameter>
</parameters>
<return> a newly
allocated list of #ClutterStage objects. Use g_slist_free() to
deallocate it when done.


</return>
</function>

<function name="clutter_stage_manager_peek_stages">
<description>
Lists all currently used stages.


</description>
<parameters>
<parameter name="stage_manager">
<parameter_description> a #ClutterStageManager
</parameter_description>
</parameter>
</parameters>
<return> a pointer
to the internal list of #ClutterStage objects. The returned list
is owned by the #ClutterStageManager and should never be modified
or freed


</return>
</function>

<function name="clutter_stage_new">
<description>
Creates a new, non-default stage. A non-default stage is a new
top-level actor which can be used as another container. It works
exactly like the default stage, but while clutter_stage_get_default()
will always return the same instance, you will have to keep a pointer
to any #ClutterStage returned by clutter_stage_new().

The ability to support multiple stages depends on the current
backend. Use clutter_feature_available() and
%CLUTTER_FEATURE_STAGE_MULTIPLE to check at runtime whether a
backend supports multiple stages.


</description>
<parameters>
</parameters>
<return> a new stage, or %NULL if the default backend does
not support multiple stages. Use clutter_actor_destroy() to
programmatically close the returned stage.


</return>
</function>

<function name="clutter_stage_read_pixels">
<description>
Makes a screenshot of the stage in RGBA 8bit data, returns a
linear buffer with @width * 4 as rowstride.

The alpha data contained in the returned buffer is driver-dependent,
and not guaranteed to hold any sensible value.


</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate of the first pixel that is read from stage
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate of the first pixel that is read from stage
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width dimention of pixels to be read, or -1 for the
entire stage width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height dimention of pixels to be read, or -1 for the
entire stage height
</parameter_description>
</parameter>
</parameters>
<return> a pointer to newly allocated memory with the buffer
or %NULL if the read failed. Use g_free() on the returned data
to release the resources it has allocated.
</return>
</function>

<function name="clutter_stage_set_accept_focus">
<description>
Sets whether the @stage should accept the key focus when shown.

This function should be called before showing @stage using
clutter_actor_show().



</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="accept_focus">
<parameter_description> %TRUE to accept focus on show
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_fullscreen">
<description>
Asks to place the stage window in the fullscreen or unfullscreen
states.

 ( Note that you shouldn't assume the window is definitely full screen
afterward, because other entities (e.g. the user or window manager)
could unfullscreen it again, and not all window managers honor
requests to fullscreen windows.

If you want to receive notification of the fullscreen state you
should either use the #ClutterStage::fullscreen and
#ClutterStage::unfullscreen signals, or use the notify signal
for the #ClutterStage:fullscreen-set property



</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="fullscreen">
<parameter_description> %TRUE to to set the stage fullscreen
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_key_focus">
<description>
Sets the key focus on @actor. An actor with key focus will receive
all the key events. If @actor is %NULL, the stage will receive
focus.



</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the actor to set key focus to, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_minimum_size">
<description>
Sets the minimum size for a stage window, if the default backend
uses #ClutterStage inside a window

This is a convenience function, and it is equivalent to setting the
#ClutterActor:min-width and #ClutterActor:min-height on @stage

If the current size of @stage is smaller than the minimum size, the
@stage will be resized to the new @width and @height

This function has no effect if @stage is fullscreen



</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width, in pixels
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_motion_events_enabled">
<description>
Sets whether per-actor motion events (and relative crossing
events) should be disabled or not.

The default is %TRUE.

If @enable is %FALSE the following events will not be delivered
to the actors children of @stage.

&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;#ClutterActor::motion-event&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;#ClutterActor::enter-event&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;#ClutterActor::leave-event&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

The events will still be delivered to the #ClutterStage.

The main side effect of this function is that disabling the motion
events will disable picking to detect the #ClutterActor underneath
the pointer for each motion event. This is useful, for instance,
when dragging a #ClutterActor across the @stage: the actor underneath
the pointer is not going to change, so it's meaningless to perform
a pick.



</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> %TRUE to enable the motion events delivery, and %FALSE
otherwise
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_no_clear_hint">
<description>
Sets whether the @stage should clear itself at the beginning
of each paint cycle or not.

Clearing the #ClutterStage can be a costly operation, especially
if the stage is always covered - for instance, in a full-screen
video player or in a game with a background texture.

&lt;note&gt;&lt;para&gt;This setting is a hint; Clutter might discard this
hint depending on its internal state.&lt;/para&gt;&lt;/note&gt;

&lt;warning&gt;&lt;para&gt;If parts of the stage are visible and you disable
clearing you might end up with visual artifacts while painting the
contents of the stage.&lt;/para&gt;&lt;/warning&gt;



</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="no_clear">
<parameter_description> %TRUE if the @stage should not clear itself on every
repaint cycle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_perspective">
<description>
Sets the stage perspective. Using this function is not recommended
because it will disable Clutter's attempts to generate an
appropriate perspective based on the size of the stage.

</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="perspective">
<parameter_description> A #ClutterPerspective
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_sync_delay">
<description>
This function enables an alternate behavior where Clutter draws at
a fixed point in time after the frame presentation time (also known
as the VBlank time). This is most useful when the application
wants to show incoming data with predictable latency. (The primary
example of this would be a window system compositor.) By synchronizing
to provide new data before Clutter redraws, an external source of
updates (in the compositor, an application) can get a reliable latency.

The appropriate value of @sync_delay depends on the complexity of
drawing the stage's scene graph - in general a value of between 0
and 8 ms (up to one-half of a typical 60hz frame rate) is appropriate.
using a larger value will reduce latency but risks skipping a frame if
drawing the stage takes too long.

Stability: unstable

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="sync_delay">
<parameter_description> number of milliseconds after frame presentation to wait
before painting the next frame. If less than zero, restores the
default behavior where redraw is throttled to the refresh rate but
not synchronized to it.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_throttle_motion_events">
<description>
Sets whether motion events received between redraws should
be throttled or not. If motion events are throttled, those
events received by the windowing system between redraws will
be compressed so that only the last event will be propagated
to the @stage and its actors.

This function should only be used if you want to have all
the motion events delivered to your application code.



</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="throttle">
<parameter_description> %TRUE to throttle motion events
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_title">
<description>
Sets the stage title.



</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> A utf8 string for the stage windows title.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_use_alpha">
<description>
Sets whether the @stage should honour the #ClutterActor:opacity and
the alpha channel of the #ClutterStage:color



</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="use_alpha">
<parameter_description> whether the stage should honour the opacity or the
alpha channel of the stage color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_user_resizable">
<description>
Sets if the stage is resizable by user interaction (e.g. via
window manager controls)



</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="resizable">
<parameter_description> whether the stage should be user resizable.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_show_cursor">
<description>
Shows the cursor on the stage window

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_skip_sync_delay">
<description>
Causes the next frame for the stage to be drawn as quickly as
possible, ignoring any delay that clutter_stage_set_sync_delay()
would normally cause.

Stability: unstable

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_swipe_action_new">
<description>
Creates a new #ClutterSwipeAction instance


</description>
<parameters>
</parameters>
<return> the newly created #ClutterSwipeAction


</return>
</function>

<function name="clutter_table_layout_get_column_count">
<description>
Retrieve the current number of columns in @layout


</description>
<parameters>
<parameter name="layout">
<parameter_description> A #ClutterTableLayout
</parameter_description>
</parameter>
</parameters>
<return> the number of columns


</return>
</function>

<function name="clutter_table_layout_get_column_spacing">
<description>
Retrieves the spacing set using clutter_table_layout_set_column_spacing()


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterTableLayout
</parameter_description>
</parameter>
</parameters>
<return> the spacing between columns of the #ClutterTableLayout


</return>
</function>

<function name="clutter_table_layout_get_row_count">
<description>
Retrieve the current number rows in the @layout


</description>
<parameters>
<parameter name="layout">
<parameter_description> A #ClutterTableLayout
</parameter_description>
</parameter>
</parameters>
<return> the number of rows


</return>
</function>

<function name="clutter_table_layout_get_row_spacing">
<description>
Retrieves the spacing set using clutter_table_layout_set_row_spacing()


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterTableLayout
</parameter_description>
</parameter>
</parameters>
<return> the spacing between rows of the #ClutterTableLayout


</return>
</function>

<function name="clutter_table_layout_get_span">
<description>
Retrieves the row and column span for @actor as set using
clutter_table_layout_pack() or clutter_table_layout_set_span()



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterTableLayout
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @layout
</parameter_description>
</parameter>
<parameter name="column_span">
<parameter_description> return location for the col span
</parameter_description>
</parameter>
<parameter name="row_span">
<parameter_description> return location for the row span
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_table_layout_new">
<description>
Creates a new #ClutterTableLayout layout manager


</description>
<parameters>
</parameters>
<return> the newly created #ClutterTableLayout


</return>
</function>

<function name="clutter_table_layout_pack">
<description>
Packs @actor inside the #ClutterContainer associated to @layout
at the given row and column.



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterTableLayout
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column the @actor should be put, or -1 to append
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> the row the @actor should be put, or -1 to append
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_table_layout_set_column_spacing">
<description>
Sets the spacing between columns of @layout



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterTableLayout
</parameter_description>
</parameter>
<parameter name="spacing">
<parameter_description> the spacing between columns of the layout, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_table_layout_set_row_spacing">
<description>
Sets the spacing between rows of @layout



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterTableLayout
</parameter_description>
</parameter>
<parameter name="spacing">
<parameter_description> the spacing between rows of the layout, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_table_layout_set_span">
<description>
Sets the row and column span for @actor
inside @layout



</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterTableLayout
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @layout
</parameter_description>
</parameter>
<parameter name="column_span">
<parameter_description> Column span for @actor
</parameter_description>
</parameter>
<parameter name="row_span">
<parameter_description> Row span for @actor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_tap_action_new">
<description>
Creates a new #ClutterTapAction instance


</description>
<parameters>
</parameters>
<return> the newly created #ClutterTapAction
</return>
</function>

<function name="clutter_text_activate">
<description>
Emits the #ClutterText::activate signal, if @self has been set
as activatable using clutter_text_set_activatable().

This function can be used to emit the ::activate signal inside
a #ClutterActor::captured-event or #ClutterActor::key-press-event
signal handlers before the default signal handler for the
#ClutterText is invoked.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the ::activate signal has been emitted,
and %FALSE otherwise


</return>
</function>

<function name="clutter_text_buffer_delete_text">
<description>
Deletes a sequence of characters from the buffer. @n_chars characters are
deleted starting at @position. If @n_chars is negative, then all characters
until the end of the text are deleted.

If @position or @n_chars are out of bounds, then they are coerced to sane
values.

Note that the positions are specified in characters, not bytes.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #ClutterTextBuffer
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> position at which to delete text
</parameter_description>
</parameter>
<parameter name="n_chars">
<parameter_description> number of characters to delete
</parameter_description>
</parameter>
</parameters>
<return> The number of characters deleted.


</return>
</function>

<function name="clutter_text_buffer_emit_deleted_text">
<description>
Emits the #ClutterTextBuffer::deleted-text signal on @buffer.

Used when subclassing #ClutterTextBuffer



</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #ClutterTextBuffer
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> position at which text was deleted
</parameter_description>
</parameter>
<parameter name="n_chars">
<parameter_description> number of characters deleted
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_buffer_emit_inserted_text">
<description>
Emits the #ClutterTextBuffer::inserted-text signal on @buffer.

Used when subclassing #ClutterTextBuffer



</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #ClutterTextBuffer
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> position at which text was inserted
</parameter_description>
</parameter>
<parameter name="chars">
<parameter_description> text that was inserted
</parameter_description>
</parameter>
<parameter name="n_chars">
<parameter_description> number of characters inserted
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_buffer_get_bytes">
<description>
Retrieves the length in bytes of the buffer.
See clutter_text_buffer_get_length().


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #ClutterTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> The byte length of the buffer.


</return>
</function>

<function name="clutter_text_buffer_get_length">
<description>
Retrieves the length in characters of the buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #ClutterTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> The number of characters in the buffer.


</return>
</function>

<function name="clutter_text_buffer_get_max_length">
<description>
Retrieves the maximum allowed length of the text in
@buffer. See clutter_text_buffer_set_max_length().


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #ClutterTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> the maximum allowed number of characters
in #ClutterTextBuffer, or 0 if there is no maximum.


</return>
</function>

<function name="clutter_text_buffer_get_text">
<description>
Retrieves the contents of the buffer.

The memory pointer returned by this call will not change
unless this object emits a signal, or is finalized.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #ClutterTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the contents of the widget as a
string. This string points to internally allocated
storage in the buffer and must not be freed, modified or
stored.


</return>
</function>

<function name="clutter_text_buffer_insert_text">
<description>
Inserts @n_chars characters of @chars into the contents of the
buffer, at position @position.

If @n_chars is negative, then characters from chars will be inserted
until a null-terminator is found. If @position or @n_chars are out of
bounds, or the maximum buffer text length is exceeded, then they are
coerced to sane values.

Note that the position and length are in characters, not in bytes.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #ClutterTextBuffer
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position at which to insert text.
</parameter_description>
</parameter>
<parameter name="chars">
<parameter_description> the text to insert into the buffer.
</parameter_description>
</parameter>
<parameter name="n_chars">
<parameter_description> the length of the text in characters, or -1
</parameter_description>
</parameter>
</parameters>
<return> The number of characters actually inserted.


</return>
</function>

<function name="clutter_text_buffer_new">
<description>
Create a new ClutterTextBuffer object.


</description>
<parameters>
</parameters>
<return> A new ClutterTextBuffer object.


</return>
</function>

<function name="clutter_text_buffer_new_with_text">
<description>
Create a new ClutterTextBuffer object with some text.


</description>
<parameters>
<parameter name="text">
<parameter_description> initial buffer text
</parameter_description>
</parameter>
<parameter name="text_len">
<parameter_description> initial buffer text length, or -1 for null-terminated.
</parameter_description>
</parameter>
</parameters>
<return> A new ClutterTextBuffer object.


</return>
</function>

<function name="clutter_text_buffer_set_max_length">
<description>
Sets the maximum allowed length of the contents of the buffer. If
the current contents are longer than the given length, then they
will be truncated to fit.



</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #ClutterTextBuffer
</parameter_description>
</parameter>
<parameter name="max_length">
<parameter_description> the maximum length of the entry buffer, or 0 for no maximum.
(other than the maximum length of entries.) The value passed in will
be clamped to the range [ 0, %CLUTTER_TEXT_BUFFER_MAX_SIZE ].
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_buffer_set_text">
<description>
Sets the text in the buffer.

This is roughly equivalent to calling clutter_text_buffer_delete_text()
and clutter_text_buffer_insert_text().

Note that @n_chars is in characters, not in bytes.



</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #ClutterTextBuffer
</parameter_description>
</parameter>
<parameter name="chars">
<parameter_description> the new text
</parameter_description>
</parameter>
<parameter name="n_chars">
<parameter_description> the number of characters in @text, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_coords_to_position">
<description>
Retrieves the position of the character at the given coordinates.

Return: the position of the character



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the X coordinate, relative to the actor
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the Y coordinate, relative to the actor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_delete_chars">
<description>
Deletes @n_chars inside a #ClutterText actor, starting from the
current cursor position.

Somewhat awkwardly, the cursor position is decremented by the same
number of characters you've deleted.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="n_chars">
<parameter_description> the number of characters to delete
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_delete_selection">
<description>
Deletes the currently selected text

This function is only useful in subclasses of #ClutterText


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if text was deleted or if the text actor
is empty, and %FALSE otherwise


</return>
</function>

<function name="clutter_text_delete_text">
<description>
Deletes the text inside a #ClutterText actor between @start_pos
and @end_pos.

The starting and ending positions are expressed in characters,
not in bytes.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="start_pos">
<parameter_description> starting position
</parameter_description>
</parameter>
<parameter name="end_pos">
<parameter_description> ending position
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_activatable">
<description>
Retrieves whether a #ClutterText is activatable or not.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is activatable


</return>
</function>

<function name="clutter_text_get_attributes">
<description>
Gets the attribute list that was set on the #ClutterText actor
clutter_text_set_attributes(), if any.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> the attribute list, or %NULL if none was set. The
returned value is owned by the #ClutterText and should not be unreferenced.


</return>
</function>

<function name="clutter_text_get_buffer">
<description>
Get the #ClutterTextBuffer object which holds the text for
this widget.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> A #GtkEntryBuffer object.


</return>
</function>

<function name="clutter_text_get_chars">
<description>
Retrieves the contents of the #ClutterText actor between
@start_pos and @end_pos, but not including @end_pos.

The positions are specified in characters, not in bytes.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="start_pos">
<parameter_description> start of text, in characters
</parameter_description>
</parameter>
<parameter name="end_pos">
<parameter_description> end of text, in characters
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string with the contents of
the text actor between the specified positions. Use g_free()
to free the resources when done


</return>
</function>

<function name="clutter_text_get_color">
<description>
Retrieves the text color as set by clutter_text_set_color().



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_cursor_color">
<description>
Retrieves the color of the cursor of a #ClutterText actor.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_cursor_position">
<description>
Retrieves the cursor position.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> the cursor position, in characters


</return>
</function>

<function name="clutter_text_get_cursor_rect">
<description>
Retrieves the rectangle that contains the cursor.

The coordinates of the rectangle's origin are in actor-relative
coordinates.

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> return location of a #ClutterRect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_cursor_size">
<description>
Retrieves the size of the cursor of a #ClutterText actor.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> the size of the cursor, in pixels


</return>
</function>

<function name="clutter_text_get_cursor_visible">
<description>
Retrieves whether the cursor of a #ClutterText actor is visible.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the cursor is visible


</return>
</function>

<function name="clutter_text_get_editable">
<description>
Retrieves whether a #ClutterText is editable or not.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is editable


</return>
</function>

<function name="clutter_text_get_ellipsize">
<description>
Returns the ellipsizing position of a #ClutterText actor, as
set by clutter_text_set_ellipsize().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> #PangoEllipsizeMode


</return>
</function>

<function name="clutter_text_get_font_description">
<description>
Retrieves the #PangoFontDescription used by @self


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> a #PangoFontDescription. The returned value is owned
by the #ClutterText actor and it should not be modified or freed


</return>
</function>

<function name="clutter_text_get_font_name">
<description>
Retrieves the font name as set by clutter_text_set_font_name().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> a string containing the font name. The returned
string is owned by the #ClutterText actor and should not be
modified or freed


</return>
</function>

<function name="clutter_text_get_justify">
<description>
Retrieves whether the #ClutterText actor should justify its contents
on both margins.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the text should be justified


</return>
</function>

<function name="clutter_text_get_layout">
<description>
Retrieves the current #PangoLayout used by a #ClutterText actor.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> a #PangoLayout. The returned object is owned by
the #ClutterText actor and should not be modified or freed


</return>
</function>

<function name="clutter_text_get_layout_offsets">
<description>
Obtains the coordinates where the #ClutterText will draw the #PangoLayout
representing the text.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> location to store X offset of layout, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> location to store Y offset of layout, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_line_alignment">
<description>
Retrieves the alignment of a #ClutterText, as set by
clutter_text_set_line_alignment().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> a #PangoAlignment


</return>
</function>

<function name="clutter_text_get_line_wrap">
<description>
Retrieves the value set using clutter_text_set_line_wrap().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterText actor should wrap
its contents


</return>
</function>

<function name="clutter_text_get_line_wrap_mode">
<description>
Retrieves the line wrap mode used by the #ClutterText actor.

See clutter_text_set_line_wrap_mode ().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> the wrap mode used by the #ClutterText


</return>
</function>

<function name="clutter_text_get_max_length">
<description>
Gets the maximum length of text that can be set into a text actor.

See clutter_text_set_max_length().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> the maximum number of characters.


</return>
</function>

<function name="clutter_text_get_password_char">
<description>
Retrieves the character to use in place of the actual text
as set by clutter_text_set_password_char().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> a Unicode character or 0 if the password
character is not set


</return>
</function>

<function name="clutter_text_get_selectable">
<description>
Retrieves whether a #ClutterText is selectable or not.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is selectable


</return>
</function>

<function name="clutter_text_get_selected_text_color">
<description>
Retrieves the color of selected text of a #ClutterText actor.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_selection">
<description>
Retrieves the currently selected text.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the currently
selected text, or %NULL. Use g_free() to free the returned
string.


</return>
</function>

<function name="clutter_text_get_selection_bound">
<description>
Retrieves the other end of the selection of a #ClutterText actor,
in characters from the current cursor position.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> the position of the other end of the selection


</return>
</function>

<function name="clutter_text_get_selection_color">
<description>
Retrieves the color of the selection of a #ClutterText actor.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_single_line_mode">
<description>
Retrieves whether the #ClutterText actor is in single line mode.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterText actor is in single line mode


</return>
</function>

<function name="clutter_text_get_text">
<description>
Retrieves a pointer to the current contents of a #ClutterText
actor.

If you need a copy of the contents for manipulating, either
use g_strdup() on the returned string, or use:

|[
copy = clutter_text_get_chars (text, 0, -1);
]|

Which will return a newly allocated string.

If the #ClutterText actor is empty, this function will return
an empty string, and not %NULL.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> the contents of the actor. The returned
string is owned by the #ClutterText actor and should never be modified
or freed


</return>
</function>

<function name="clutter_text_get_use_markup">
<description>
Retrieves whether the contents of the #ClutterText actor should be
parsed for the Pango text markup.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the contents will be parsed for markup


</return>
</function>

<function name="clutter_text_insert_text">
<description>
Inserts @text into a #ClutterActor at the given position.

If @position is a negative number, the text will be appended
at the end of the current contents of the #ClutterText.

The position is expressed in characters, not in bytes.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to be inserted
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position of the insertion, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_insert_unichar">
<description>
Inserts @wc at the current cursor position of a
#ClutterText actor.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="wc">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_new">
<description>
Creates a new #ClutterText actor. This actor can be used to
display and edit text.


</description>
<parameters>
</parameters>
<return> the newly created #ClutterText actor


</return>
</function>

<function name="clutter_text_new_full">
<description>
Creates a new #ClutterText actor, using @font_name as the font
description; @text will be used to set the contents of the actor;
and @color will be used as the color to render @text.

This function is equivalent to calling clutter_text_new(),
clutter_text_set_font_name(), clutter_text_set_text() and
clutter_text_set_color().


</description>
<parameters>
<parameter name="font_name">
<parameter_description> a string with a font description
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the contents of the actor
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to be used to render @text
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterText actor


</return>
</function>

<function name="clutter_text_new_with_buffer">
<description>
Creates a new entry with the specified text buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> The buffer to use for the new #ClutterText.
</parameter_description>
</parameter>
</parameters>
<return> a new #ClutterText


</return>
</function>

<function name="clutter_text_new_with_text">
<description>
Creates a new #ClutterText actor, using @font_name as the font
description; @text will be used to set the contents of the actor.

This function is equivalent to calling clutter_text_new(),
clutter_text_set_font_name(), and clutter_text_set_text().


</description>
<parameters>
<parameter name="font_name">
<parameter_description> a string with a font description
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the contents of the actor
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterText actor


</return>
</function>

<function name="clutter_text_node_new">
<description>
Creates a new #ClutterPaintNode that will paint a #PangoLayout
with the given color.

This function takes a reference on the passed @layout, so it
is safe to call g_object_unref() after it returns.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #PangoLayout, or %NULL
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color used to paint the layout,
or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterPaintNode.
Use clutter_paint_node_unref() when done


</return>
</function>

<function name="clutter_text_position_to_coords">
<description>
Retrieves the coordinates of the given @position.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> position in characters
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="line_height">
<parameter_description> return location for the line height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the conversion was successful


</return>
</function>

<function name="clutter_text_set_activatable">
<description>
Sets whether a #ClutterText actor should be activatable.

An activatable #ClutterText actor will emit the #ClutterText::activate
signal whenever the 'Enter' (or 'Return') key is pressed; if it is not
activatable, a new line will be appended to the current content.

An activatable #ClutterText must also be set as editable using
clutter_text_set_editable().



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="activatable">
<parameter_description> whether the #ClutterText actor should be activatable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_attributes">
<description>
Sets the attributes list that are going to be applied to the
#ClutterText contents.

The #ClutterText actor will take a reference on the #PangoAttrList
passed to this function.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="attrs">
<parameter_description> a #PangoAttrList or %NULL to unset the attributes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_buffer">
<description>
Set the #ClutterTextBuffer object which holds the text for
this widget.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #ClutterTextBuffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_color">
<description>
Sets the color of the contents of a #ClutterText actor.

The overall opacity of the #ClutterText actor will be the
result of the alpha value of @color and the composited
opacity of the actor itself on the scenegraph, as returned
by clutter_actor_get_paint_opacity().



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_cursor_color">
<description>
Sets the color of the cursor of a #ClutterText actor.

If @color is %NULL, the cursor color will be the same as the
text color.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color of the cursor, or %NULL to unset it
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_cursor_position">
<description>
Sets the cursor of a #ClutterText actor at @position.

The position is expressed in characters, not in bytes.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the new cursor position, in characters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_cursor_size">
<description>
Sets the size of the cursor of a #ClutterText. The cursor
will only be visible if the #ClutterText:cursor-visible property
is set to %TRUE.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the cursor, in pixels, or -1 to use the
default value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_cursor_visible">
<description>
Sets whether the cursor of a #ClutterText actor should be
visible or not.

The color of the cursor will be the same as the text color
unless clutter_text_set_cursor_color() has been called.

The size of the cursor can be set using clutter_text_set_cursor_size().

The position of the cursor can be changed programmatically using
clutter_text_set_cursor_position().



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="cursor_visible">
<parameter_description> whether the cursor should be visible
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_editable">
<description>
Sets whether the #ClutterText actor should be editable.

An editable #ClutterText with key focus set using
clutter_actor_grab_key_focus() or clutter_stage_set_key_focus()
will receive key events and will update its contents accordingly.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="editable">
<parameter_description> whether the #ClutterText should be editable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_ellipsize">
<description>
Sets the mode used to ellipsize (add an ellipsis: &quot;...&quot;) to the
text if there is not enough space to render the entire contents
of a #ClutterText actor



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> a #PangoEllipsizeMode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_font_description">
<description>
Sets @font_desc as the font description for a #ClutterText

The #PangoFontDescription is copied by the #ClutterText actor
so you can safely call pango_font_description_free() on it after
calling this function.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="font_desc">
<parameter_description> a #PangoFontDescription
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_font_name">
<description>
Sets the font used by a #ClutterText. The @font_name string
must either be %NULL, which means that the font name from the
default #ClutterBackend will be used; or be something that can
be parsed by the pango_font_description_from_string() function,
like:

|[
clutter_text_set_font_name (text, &quot;Sans 10pt&quot;);
clutter_text_set_font_name (text, &quot;Serif 16px&quot;);
clutter_text_set_font_name (text, &quot;Helvetica 10&quot;);
]|



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="font_name">
<parameter_description> a font name, or %NULL to set the default font name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_justify">
<description>
Sets whether the text of the #ClutterText actor should be justified
on both margins. This setting is ignored if Clutter is compiled
against Pango &lt; 1.18.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="justify">
<parameter_description> whether the text should be justified
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_line_alignment">
<description>
Sets the way that the lines of a wrapped label are aligned with
respect to each other. This does not affect the overall alignment
of the label within its allocated or specified width.

To align a #ClutterText actor you should add it to a container
that supports alignment, or use the anchor point.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="alignment">
<parameter_description> A #PangoAlignment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_line_wrap">
<description>
Sets whether the contents of a #ClutterText actor should wrap,
if they don't fit the size assigned to the actor.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="line_wrap">
<parameter_description> whether the contents should wrap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_line_wrap_mode">
<description>
If line wrapping is enabled (see clutter_text_set_line_wrap()) this
function controls how the line wrapping is performed. The default is
%PANGO_WRAP_WORD which means wrap on word boundaries.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="wrap_mode">
<parameter_description> the line wrapping mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_markup">
<description>
Sets @markup as the contents of a #ClutterText.

This is a convenience function for setting a string containing
Pango markup, and it is logically equivalent to:

|[
/ * the order is important * /
clutter_text_set_text (CLUTTER_TEXT (actor), markup);
clutter_text_set_use_markup (CLUTTER_TEXT (actor), TRUE);
]|



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="markup">
<parameter_description> a string containing Pango markup.
Passing %NULL is the same as passing &quot;&quot; (the empty string)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_max_length">
<description>
Sets the maximum allowed length of the contents of the actor. If the
current contents are longer than the given length, then they will be
truncated to fit.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> the maximum number of characters allowed in the text actor; 0
to disable or -1 to set the length of the current string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_password_char">
<description>
Sets the character to use in place of the actual text in a
password text actor.

If @wc is 0 the text will be displayed as it is entered in the
#ClutterText actor.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="wc">
<parameter_description> a Unicode character, or 0 to unset the password character
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_preedit_string">
<description>
Sets, or unsets, the pre-edit string. This function is useful
for input methods to display a string (with eventual specific
Pango attributes) before it is entered inside the #ClutterText
buffer.

The preedit string and attributes are ignored if the #ClutterText
actor is not editable.

This function should not be used by applications



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="preedit_str">
<parameter_description> the pre-edit string, or %NULL to unset it
</parameter_description>
</parameter>
<parameter name="preedit_attrs">
<parameter_description> the pre-edit string attributes
</parameter_description>
</parameter>
<parameter name="cursor_pos">
<parameter_description> the cursor position for the pre-edit string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_selectable">
<description>
Sets whether a #ClutterText actor should be selectable.

A selectable #ClutterText will allow selecting its contents using
the pointer or the keyboard.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="selectable">
<parameter_description> whether the #ClutterText actor should be selectable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_selected_text_color">
<description>
Sets the selected text color of a #ClutterText actor.

If @color is %NULL, the selected text color will be the same as the
selection color, which then falls back to cursor, and then text color.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the selected text color, or %NULL to unset it
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_selection">
<description>
Selects the region of text between @start_pos and @end_pos.

This function changes the position of the cursor to match
@start_pos and the selection bound to match @end_pos.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="start_pos">
<parameter_description> start of the selection, in characters
</parameter_description>
</parameter>
<parameter name="end_pos">
<parameter_description> end of the selection, in characters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_selection_bound">
<description>
Sets the other end of the selection, starting from the current
cursor position.

If @selection_bound is -1, the selection unset.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="selection_bound">
<parameter_description> the position of the end of the selection, in characters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_selection_color">
<description>
Sets the color of the selection of a #ClutterText actor.

If @color is %NULL, the selection color will be the same as the
cursor color, or if no cursor color is set either then it will be
the same as the text color.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color of the selection, or %NULL to unset it
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_single_line_mode">
<description>
Sets whether a #ClutterText actor should be in single line mode
or not. Only editable #ClutterText&lt;!-- --&gt;s can be in single line
mode.

A text actor in single line mode will not wrap text and will clip
the visible area to the predefined size. The contents of the
text actor will scroll to display the end of the text if its length
is bigger than the allocated width.

When setting the single line mode the #ClutterText:activatable
property is also set as a side effect. Instead of entering a new
line character, the text actor will emit the #ClutterText::activate
signal.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="single_line">
<parameter_description> whether to enable single line mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_text">
<description>
Sets the contents of a #ClutterText actor.

If the #ClutterText:use-markup property was set to %TRUE it
will be reset to %FALSE as a side effect. If you want to
maintain the #ClutterText:use-markup you should use the
clutter_text_set_markup() function instead



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to set. Passing %NULL is the same
as passing &quot;&quot; (the empty string)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_use_markup">
<description>
Sets whether the contents of the #ClutterText actor contains markup
in &lt;link linkend=&quot;PangoMarkupFormat&quot;&gt;Pango's text markup language&lt;/link&gt;.

Setting #ClutterText:use-markup on an editable #ClutterText will
not have any effect except hiding the markup.

See also #ClutterText:use-markup.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE if the text should be parsed for markup.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_node_new">
<description>
Creates a new #ClutterPaintNode that will paint the passed @texture.

This function will take a reference on @texture, so it is safe to
call cogl_object_unref() on @texture when it returns.


</description>
<parameters>
<parameter name="texture">
<parameter_description> a #CoglTexture
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="min_filter">
<parameter_description> the minification filter for the texture
</parameter_description>
</parameter>
<parameter name="mag_filter">
<parameter_description> the magnification filter for the texture
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterPaintNode.
Use clutter_paint_node_unref() when done


</return>
</function>

<function name="clutter_threads_add_idle">
<description>
Simple wrapper around clutter_threads_add_idle_full() using the
default priority.


</description>
<parameters>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.


</return>
</function>

<function name="clutter_threads_add_idle_full">
<description>
Adds a function to be called whenever there are no higher priority
events pending. If the function returns %FALSE it is automatically
removed from the list of event sources and will not be called again.

This function can be considered a thread-safe variant of g_idle_add_full():
it will call @function while holding the Clutter lock. It is logically
equivalent to the following implementation:

|[
static gboolean
idle_safe_callback (gpointer data)
{
SafeClosure *closure = data;
gboolean res = FALSE;

/ * mark the critical section * /

clutter_threads_enter();

/ * the callback does not need to acquire the Clutter
* lock itself, as it is held by the this proxy handler
* /
res = closure-&gt;callback (closure-&gt;data);

clutter_threads_leave();

return res;
}
static gulong
add_safe_idle (GSourceFunc callback,
gpointer    data)
{
SafeClosure *closure = g_new0 (SafeClosure, 1);

closure-&gt;callback = callback;
closure-&gt;data = data;

return g_idle_add_full (G_PRIORITY_DEFAULT_IDLE,
idle_safe_callback,
closure,
g_free)
}
]|

This function should be used by threaded applications to make sure
that @func is emitted under the Clutter threads lock and invoked
from the same thread that started the Clutter main loop. For instance,
it can be used to update the UI using the results from a worker
thread:

|[
static gboolean
update_ui (gpointer data)
{
SomeClosure *closure = data;

/ * it is safe to call Clutter API from this function because
* it is invoked from the same thread that started the main
* loop and under the Clutter thread lock
* /
clutter_label_set_text (CLUTTER_LABEL (closure-&gt;label),
closure-&gt;text);

g_object_unref (closure-&gt;label);
g_free (closure);

return FALSE;
}

/ * within another thread * /
closure = g_new0 (SomeClosure, 1);
/ * always take a reference on GObject instances * /
closure-&gt;label = g_object_ref (my_application-&gt;label);
closure-&gt;text = g_strdup (processed_text_to_update_the_label);

clutter_threads_add_idle_full (G_PRIORITY_HIGH_IDLE,
update_ui,
closure,
NULL);
]|


</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the timeout source. Typically this will be in the
range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> functio to call when the idle source is removed
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.


</return>
</function>

<function name="clutter_threads_add_repaint_func">
<description>
Adds a function to be called whenever Clutter is processing a new
frame.

If the function returns %FALSE it is automatically removed from the
list of repaint functions and will not be called again.

This function is guaranteed to be called from within the same thread
that called clutter_main(), and while the Clutter lock is being held;
the function will be called within the main loop, so it is imperative
that it does not block, otherwise the frame time budget may be lost.

A repaint function is useful to ensure that an update of the scenegraph
is performed before the scenegraph is repainted; for instance, uploading
a frame from a video into a #ClutterTexture. By default, a repaint
function added using this function will be invoked prior to the frame
being processed.

Adding a repaint function does not automatically ensure that a new
frame will be queued.

When the repaint function is removed (either because it returned %FALSE
or because clutter_threads_remove_repaint_func() has been called) the
@notify function will be called, if any is set.

See also: clutter_threads_add_repaint_func_full()


</description>
<parameters>
<parameter name="func">
<parameter_description> the function to be called within the paint cycle
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to be passed to the function, or %NULL
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to be called when removing the repaint
function, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the repaint function. You
can use the returned integer to remove the repaint function by
calling clutter_threads_remove_repaint_func().


</return>
</function>

<function name="clutter_threads_add_repaint_func_full">
<description>
Adds a function to be called whenever Clutter is processing a new
frame.

If the function returns %FALSE it is automatically removed from the
list of repaint functions and will not be called again.

This function is guaranteed to be called from within the same thread
that called clutter_main(), and while the Clutter lock is being held;
the function will be called within the main loop, so it is imperative
that it does not block, otherwise the frame time budget may be lost.

A repaint function is useful to ensure that an update of the scenegraph
is performed before the scenegraph is repainted; for instance, uploading
a frame from a video into a #ClutterTexture. The @flags passed to this
function will determine the section of the frame processing that will
result in @func being called.

Adding a repaint function does not automatically ensure that a new
frame will be queued.

When the repaint function is removed (either because it returned %FALSE
or because clutter_threads_remove_repaint_func() has been called) the
@notify function will be called, if any is set.


</description>
<parameters>
<parameter name="flags">
<parameter_description> flags for the repaint function
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to be called within the paint cycle
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to be passed to the function, or %NULL
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to be called when removing the repaint
function, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the repaint function. You
can use the returned integer to remove the repaint function by
calling clutter_threads_remove_repaint_func().


</return>
</function>

<function name="clutter_threads_add_timeout">
<description>
Simple wrapper around clutter_threads_add_timeout_full().


</description>
<parameters>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.


</return>
</function>

<function name="clutter_threads_add_timeout_full">
<description>
Sets a function to be called at regular intervals holding the Clutter
threads lock, with the given priority. The function is called repeatedly
until it returns %FALSE, at which point the timeout is automatically
removed and the function will not be called again. The @notify function
is called when the timeout is removed.

The first call to the function will be at the end of the first @interval.

It is important to note that, due to how the Clutter main loop is
implemented, the timing will not be accurate and it will not try to
&quot;keep up&quot; with the interval.

See also clutter_threads_add_idle_full().


</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the timeout source. Typically this will be in the
range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH.
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the timeout source is removed
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.


</return>
</function>

<function name="clutter_threads_remove_repaint_func">
<description>
Removes the repaint function with @handle_id as its id



</description>
<parameters>
<parameter name="handle_id">
<parameter_description> an unsigned integer greater than zero
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_threads_set_lock_functions">
<description>
Allows the application to replace the standard method that
Clutter uses to protect its data structures. Normally, Clutter
creates a single #GMutex that is locked by clutter_threads_enter(),
and released by clutter_threads_leave(); using this function an
application provides, instead, a function @enter_fn that is
called by clutter_threads_enter() and a function @leave_fn that is
called by clutter_threads_leave().

The functions must provide at least same locking functionality
as the default implementation, but can also do extra application
specific processing.

As an example, consider an application that has its own recursive
lock that when held, holds the Clutter lock as well. When Clutter
unlocks the Clutter lock when entering a recursive main loop, the
application must temporarily release its lock as well.

Most threaded Clutter apps won't need to use this method.

This method must be called before clutter_init(), and cannot
be called multiple times.



</description>
<parameters>
<parameter name="enter_fn">
<parameter_description> function called when aquiring the Clutter main lock
</parameter_description>
</parameter>
<parameter name="leave_fn">
<parameter_description> function called when releasing the Clutter main lock
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_add_marker">
<description>
Adds a named marker that will be hit when the timeline has reached
the specified @progress.

Markers are unique string identifiers for a given position on the
timeline. Once @timeline reaches the given @progress of its duration,
if will emit a ::marker-reached signal for each marker attached to
that particular point.

A marker can be removed with clutter_timeline_remove_marker(). The
timeline can be advanced to a marker using
clutter_timeline_advance_to_marker().

See also: clutter_timeline_add_marker_at_time()

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the unique name for this marker
</parameter_description>
</parameter>
<parameter name="progress">
<parameter_description> the normalized value of the position of the martke
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_add_marker_at_time">
<description>
Adds a named marker that will be hit when the timeline has been
running for @msecs milliseconds.

Markers are unique string identifiers for a given position on the
timeline. Once @timeline reaches the given @msecs, it will emit
a ::marker-reached signal for each marker attached to that position.

A marker can be removed with clutter_timeline_remove_marker(). The
timeline can be advanced to a marker using
clutter_timeline_advance_to_marker().

See also: clutter_timeline_add_marker()

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the unique name for this marker
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> position of the marker in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_advance">
<description>
Advance timeline to the requested point. The point is given as a
time in milliseconds since the timeline started.

&lt;note&gt;&lt;para&gt;The @timeline will not emit the #ClutterTimeline::new-frame
signal for the given time. The first ::new-frame signal after the call to
clutter_timeline_advance() will be emit the skipped markers.
&lt;/para&gt;&lt;/note&gt;

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> Time to advance to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_advance_to_marker">
<description>
Advances @timeline to the time of the given @marker_name.

&lt;note&gt;&lt;para&gt;Like clutter_timeline_advance(), this function will not
emit the #ClutterTimeline::new-frame for the time where @marker_name
is set, nor it will emit #ClutterTimeline::marker-reached for
@marker_name.&lt;/para&gt;&lt;/note&gt;



</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the name of the marker
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_get_auto_reverse">
<description>
Retrieves the value set by clutter_timeline_set_auto_reverse().


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the timeline should automatically reverse, and
%FALSE otherwise


</return>
</function>

<function name="clutter_timeline_get_cubic_bezier_progress">
<description>
Retrieves the control points for the cubic bezier progress mode.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="c_1">
<parameter_description> return location for the first control
point of the cubic bezier, or %NULL
</parameter_description>
</parameter>
<parameter name="c_2">
<parameter_description> return location for the second control
point of the cubic bezier, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @timeline is using a cubic bezier progress
more, and %FALSE otherwise


</return>
</function>

<function name="clutter_timeline_get_current_repeat">
<description>
Retrieves the current repeat for a timeline.

Repeats start at 0.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the current repeat


</return>
</function>

<function name="clutter_timeline_get_delay">
<description>
Retrieves the delay set using clutter_timeline_set_delay().


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the delay in milliseconds.


</return>
</function>

<function name="clutter_timeline_get_delta">
<description>
Retrieves the amount of time elapsed since the last
ClutterTimeline::new-frame signal.

This function is only useful inside handlers for the ::new-frame
signal, and its behaviour is undefined if the timeline is not
playing.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the amount of time in milliseconds elapsed since the
last frame


</return>
</function>

<function name="clutter_timeline_get_direction">
<description>
Retrieves the direction of the timeline set with
clutter_timeline_set_direction().


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the direction of the timeline


</return>
</function>

<function name="clutter_timeline_get_duration">
<description>
Retrieves the duration of a #ClutterTimeline in milliseconds.
See clutter_timeline_set_duration().


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the duration of the timeline, in milliseconds.


</return>
</function>

<function name="clutter_timeline_get_duration_hint">
<description>
Retrieves the full duration of the @timeline, taking into account the
current value of the #ClutterTimeline:repeat-count property.

If the #ClutterTimeline:repeat-count property is set to -1, this function
will return %G_MAXINT64.

The returned value is to be considered a hint, and it's only valid
as long as the @timeline hasn't been changed.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the full duration of the #ClutterTimeline


</return>
</function>

<function name="clutter_timeline_get_elapsed_time">
<description>
Request the current time position of the timeline.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> current elapsed time in milliseconds.
</return>
</function>

<function name="clutter_timeline_get_progress">
<description>
The position of the timeline in a normalized [-1, 2] interval.

The return value of this function is determined by the progress
mode set using clutter_timeline_set_progress_mode(), or by the
progress function set using clutter_timeline_set_progress_func().


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the normalized current position in the timeline.


</return>
</function>

<function name="clutter_timeline_get_progress_mode">
<description>
Retrieves the progress mode set using clutter_timeline_set_progress_mode()
or clutter_timeline_set_progress_func().


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterAnimationMode


</return>
</function>

<function name="clutter_timeline_get_repeat_count">
<description>
Retrieves the number set using clutter_timeline_set_repeat_count().


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the number of repeats


</return>
</function>

<function name="clutter_timeline_get_step_progress">
<description>
Retrieves the parameters of the step progress mode used by @timeline.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="n_steps">
<parameter_description> return location for the number of steps, or %NULL
</parameter_description>
</parameter>
<parameter name="step_mode">
<parameter_description> return location for the value change policy,
or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @timeline is using a step progress
mode, and %FALSE otherwise


</return>
</function>

<function name="clutter_timeline_has_marker">
<description>
Checks whether @timeline has a marker set with the given name.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the name of the marker
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the marker was found


</return>
</function>

<function name="clutter_timeline_is_playing">
<description>
Queries state of a #ClutterTimeline.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if timeline is currently playing
</return>
</function>

<function name="clutter_timeline_list_markers">
<description>
Retrieves the list of markers at time @msecs. If @msecs is a
negative integer, all the markers attached to @timeline will be
returned.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> the time to check, or -1
</parameter_description>
</parameter>
<parameter name="n_markers">
<parameter_description> the number of markers returned
</parameter_description>
</parameter>
</parameters>
<return>
a newly allocated, %NULL terminated string array containing the names
of the markers. Use g_strfreev() when done.


</return>
</function>

<function name="clutter_timeline_new">
<description>
Creates a new #ClutterTimeline with a duration of @msecs.


</description>
<parameters>
<parameter name="msecs">
<parameter_description> Duration of the timeline in milliseconds
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterTimeline instance. Use
g_object_unref() when done using it


</return>
</function>

<function name="clutter_timeline_pause">
<description>
Pauses the #ClutterTimeline on current frame

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_remove_marker">
<description>
Removes @marker_name, if found, from @timeline.



</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the name of the marker to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_rewind">
<description>
Rewinds #ClutterTimeline to the first frame if its direction is
%CLUTTER_TIMELINE_FORWARD and the last frame if it is
%CLUTTER_TIMELINE_BACKWARD.

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_set_auto_reverse">
<description>
Sets whether @timeline should reverse the direction after the
emission of the #ClutterTimeline::completed signal.

Setting the #ClutterTimeline:auto-reverse property to %TRUE is the
equivalent of connecting a callback to the #ClutterTimeline::completed
signal and changing the direction of the timeline from that callback;
for instance, this code:

|[
static void
reverse_timeline (ClutterTimeline *timeline)
{
ClutterTimelineDirection dir = clutter_timeline_get_direction (timeline);

if (dir == CLUTTER_TIMELINE_FORWARD)
dir = CLUTTER_TIMELINE_BACKWARD;
else
dir = CLUTTER_TIMELINE_FORWARD;

clutter_timeline_set_direction (timeline, dir);
}
...
timeline = clutter_timeline_new (1000);
clutter_timeline_set_repeat_count (timeline, -1);
g_signal_connect (timeline, &quot;completed&quot;,
G_CALLBACK (reverse_timeline),
NULL);
]|

can be effectively replaced by:

|[
timeline = clutter_timeline_new (1000);
clutter_timeline_set_repeat_count (timeline, -1);
clutter_timeline_set_auto_reverse (timeline);
]|



</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="reverse">
<parameter_description> %TRUE if the @timeline should reverse the direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_set_cubic_bezier_progress">
<description>
Sets the #ClutterTimeline:progress-mode of @timeline
to %CLUTTER_CUBIC_BEZIER, and sets the two control
points for the cubic bezier.

The cubic bezier curve is between (0, 0) and (1, 1). The X coordinate
of the two control points must be in the [ 0, 1 ] range, while the
Y coordinate of the two control points can exceed this range.



</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="c_1">
<parameter_description> the first control point for the cubic bezier
</parameter_description>
</parameter>
<parameter name="c_2">
<parameter_description> the second control point for the cubic bezier
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_set_delay">
<description>
Sets the delay, in milliseconds, before @timeline should start.



</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> delay in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_set_direction">
<description>
Sets the direction of @timeline, either %CLUTTER_TIMELINE_FORWARD or
%CLUTTER_TIMELINE_BACKWARD.



</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the direction of the timeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_set_duration">
<description>
Sets the duration of the timeline, in milliseconds. The speed
of the timeline depends on the ClutterTimeline:fps setting.



</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> duration of the timeline in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_set_progress_func">
<description>
Sets a custom progress function for @timeline. The progress function will
be called by clutter_timeline_get_progress() and will be used to compute
the progress value based on the elapsed time and the total duration of the
timeline.

If @func is not %NULL, the #ClutterTimeline:progress-mode property will
be set to %CLUTTER_CUSTOM_MODE.

If @func is %NULL, any previously set progress function will be unset, and
the #ClutterTimeline:progress-mode property will be set to %CLUTTER_LINEAR.



</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a progress function, or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @func
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a function to be called when the progress function is removed
or the timeline is disposed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_set_progress_mode">
<description>
Sets the progress function using a value from the #ClutterAnimationMode
enumeration. The @mode cannot be %CLUTTER_CUSTOM_MODE or bigger than
%CLUTTER_ANIMATION_LAST.



</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the progress mode, as a #ClutterAnimationMode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_set_repeat_count">
<description>
Sets the number of times the @timeline should repeat.

If @count is 0, the timeline never repeats.

If @count is -1, the timeline will always repeat until
it's stopped.



</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of times the timeline should repeat
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_set_step_progress">
<description>
Sets the #ClutterTimeline:progress-mode of the @timeline to %CLUTTER_STEPS
and provides the parameters of the step function.



</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="n_steps">
<parameter_description> the number of steps
</parameter_description>
</parameter>
<parameter name="step_mode">
<parameter_description> whether the change should happen at the start
or at the end of the step
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_skip">
<description>
Advance timeline by the requested time in milliseconds

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> Amount of time to skip
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_start">
<description>
Starts the #ClutterTimeline playing.

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_stop">
<description>
Stops the #ClutterTimeline and moves to frame 0

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_transition_get_animatable">
<description>
Retrieves the #ClutterAnimatable set using clutter_transition_set_animatable().


</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterTransition
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterAnimatable, or %NULL; the returned
animatable is owned by the #ClutterTransition, and it should not be freed
directly.


</return>
</function>

<function name="clutter_transition_get_interval">
<description>
Retrieves the interval set using clutter_transition_set_interval()


</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterTransition
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterInterval, or %NULL; the returned
interval is owned by the #ClutterTransition and it should not be freed
directly


</return>
</function>

<function name="clutter_transition_get_remove_on_complete">
<description>
Retrieves the value of the #ClutterTransition:remove-on-complete property.


</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterTransition
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @transition should be detached when complete,
and %FALSE otherwise


</return>
</function>

<function name="clutter_transition_group_add_transition">
<description>
Adds @transition to @group.

This function acquires a reference on @transition that will be released
when calling clutter_transition_group_remove_transition().



</description>
<parameters>
<parameter name="group">
<parameter_description> a #ClutterTransitionGroup
</parameter_description>
</parameter>
<parameter name="transition">
<parameter_description> a #ClutterTransition
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_transition_group_new">
<description>
Creates a new #ClutterTransitionGroup instance.


</description>
<parameters>
</parameters>
<return> the newly created #ClutterTransitionGroup. Use
g_object_unref() when done to deallocate the resources it
uses


</return>
</function>

<function name="clutter_transition_group_remove_all">
<description>
Removes all transitions from @group.

This function releases the reference acquired when calling
clutter_transition_group_add_transition().



</description>
<parameters>
<parameter name="group">
<parameter_description> a #ClutterTransitionGroup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_transition_group_remove_transition">
<description>
Removes @transition from @group.

This function releases the reference acquired on @transition when
calling clutter_transition_group_add_transition().



</description>
<parameters>
<parameter name="group">
<parameter_description> a #ClutterTransitionGroup
</parameter_description>
</parameter>
<parameter name="transition">
<parameter_description> a #ClutterTransition
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_transition_set_animatable">
<description>
Sets the #ClutterTransition:animatable property.

The @transition will acquire a reference to the @animatable instance,
and will call the #ClutterTransitionClass.attached() virtual function.

If an existing #ClutterAnimatable is attached to @transition, the
reference will be released, and the #ClutterTransitionClass.detached()
virtual function will be called.



</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterTransition
</parameter_description>
</parameter>
<parameter name="animatable">
<parameter_description> a #ClutterAnimatable, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_transition_set_from">
<description>
Sets the initial value of the transition.

This is a convenience function that will either create the
#ClutterInterval used by @transition, or will update it if
the #ClutterTransition:interval is already set.

If @transition already has a #ClutterTransition:interval set,
then @value must hold the same type, or a transformable type,
as the interval's #ClutterInterval:value-type property.

This is a convenience function for the C API; language bindings
should use clutter_transition_set_from_value() instead.



</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterTransition
</parameter_description>
</parameter>
<parameter name="value_type">
<parameter_description> the type of the value to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the initial value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_transition_set_from_value">
<description>
Sets the initial value of the transition.

This is a convenience function that will either create the
#ClutterInterval used by @transition, or will update it if
the #ClutterTransition:interval is already set.

This function will copy the contents of @value, so it is
safe to call g_value_unset() after it returns.

If @transition already has a #ClutterTransition:interval set,
then @value must hold the same type, or a transformable type,
as the interval's #ClutterInterval:value-type property.

This function is meant to be used by language bindings.


</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterTransition
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue with the initial value of the transition
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_transition_set_interval">
<description>
Sets the #ClutterTransition:interval property using @interval.

The @transition will acquire a reference on the @interval, sinking
the floating flag on it if necessary.



</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterTransition
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> a #ClutterInterval, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_transition_set_remove_on_complete">
<description>
Sets whether @transition should be detached from the #ClutterAnimatable
set using clutter_transition_set_animatable() when the
#ClutterTimeline::completed signal is emitted.



</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterTransition
</parameter_description>
</parameter>
<parameter name="remove_complete">
<parameter_description> whether to detach @transition when complete
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_transition_set_to">
<description>
Sets the final value of the transition.

This is a convenience function that will either create the
#ClutterInterval used by @transition, or will update it if
the #ClutterTransition:interval is already set.

If @transition already has a #ClutterTransition:interval set,
then @value must hold the same type, or a transformable type,
as the interval's #ClutterInterval:value-type property.

This is a convenience function for the C API; language bindings
should use clutter_transition_set_to_value() instead.



</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterTransition
</parameter_description>
</parameter>
<parameter name="value_type">
<parameter_description> the type of the value to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the final value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_transition_set_to_value">
<description>
Sets the final value of the transition.

This is a convenience function that will either create the
#ClutterInterval used by @transition, or will update it if
the #ClutterTransition:interval is already set.

This function will copy the contents of @value, so it is
safe to call g_value_unset() after it returns.

If @transition already has a #ClutterTransition:interval set,
then @value must hold the same type, or a transformable type,
as the interval's #ClutterInterval:value-type property.

This function is meant to be used by language bindings.


</description>
<parameters>
<parameter name="transition">
<parameter_description> a #ClutterTransition
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue with the final value of the transition
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_ungrab_keyboard">
<description>
Removes an existing grab of the keyboard.



</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_ungrab_pointer">
<description>
Removes an existing grab of the pointer.



</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_unicode_to_keysym">
<description>
Convert from a ISO10646 character to a key symbol.


</description>
<parameters>
<parameter name="wc">
<parameter_description> a ISO10646 encoded character
</parameter_description>
</parameter>
</parameters>
<return> the corresponding Clutter key symbol, if one exists.
or, if there is no corresponding symbol, wc | 0x01000000


</return>
</function>

<function name="clutter_units_copy">
<description>
Copies @units


</description>
<parameters>
<parameter name="units">
<parameter_description> the #ClutterUnits to copy
</parameter_description>
</parameter>
</parameters>
<return> the newly created copy of a
#ClutterUnits structure. Use clutter_units_free() to free
the allocated resources


</return>
</function>

<function name="clutter_units_free">
<description>
Frees the resources allocated by @units

You should only call this function on a #ClutterUnits
created using clutter_units_copy()



</description>
<parameters>
<parameter name="units">
<parameter_description> the #ClutterUnits to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_units_from_cm">
<description>
Stores a value in centimeters inside @units



</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
<parameter name="cm">
<parameter_description> centimeters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_units_from_em">
<description>
Stores a value in em inside @units, using the default font
name as returned by clutter_backend_get_font_name()



</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
<parameter name="em">
<parameter_description> em
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_units_from_em_for_font">
<description>
Stores a value in em inside @units using @font_name



</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
<parameter name="font_name">
<parameter_description> the font name and size
</parameter_description>
</parameter>
<parameter name="em">
<parameter_description> em
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_units_from_mm">
<description>
Stores a value in millimiters inside @units



</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
<parameter name="mm">
<parameter_description> millimeters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_units_from_pixels">
<description>
Stores a value in pixels inside @units



</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
<parameter name="px">
<parameter_description> pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_units_from_pt">
<description>
Stores a value in typographic points inside @units



</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
<parameter name="pt">
<parameter_description> typographic points
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_units_from_string">
<description>
Parses a value and updates @units with it

A #ClutterUnits expressed in string should match:

|[
units: wsp* unit-value wsp* unit-name? wsp*
unit-value: number
unit-name: 'px' | 'pt' | 'mm' | 'em' | 'cm'
number: digit+
| digit* sep digit+
sep: '.' | ','
digit: '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
wsp: (#0x20 | #0x9 | #0xA | #0xB | #0xC | #0xD)+
]|

For instance, these are valid strings:

|[
10 px
5.1 em
24 pt
12.6 mm
.3 cm
]|

While these are not:

|[
42 cats
omg!1!ponies
]|

&lt;note&gt;&lt;para&gt;If no unit is specified, pixels are assumed.&lt;/para&gt;&lt;/note&gt;


</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> the string to convert
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the string was successfully parsed,
and %FALSE otherwise


</return>
</function>

<function name="clutter_units_get_unit_type">
<description>
Retrieves the unit type of the value stored inside @units


</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
</parameters>
<return> a unit type


</return>
</function>

<function name="clutter_units_get_unit_value">
<description>
Retrieves the value stored inside @units


</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
</parameters>
<return> the value stored inside a #ClutterUnits


</return>
</function>

<function name="clutter_units_to_pixels">
<description>
Converts a value in #ClutterUnits to pixels


</description>
<parameters>
<parameter name="units">
<parameter_description> units to convert
</parameter_description>
</parameter>
</parameters>
<return> the value in pixels


</return>
</function>

<function name="clutter_units_to_string">
<description>
Converts @units into a string

See clutter_units_from_string() for the units syntax and for
examples of output

&lt;note&gt;Fractional values are truncated to the second decimal
position for em, mm and cm, and to the first decimal position for
typographic points. Pixels are integers.&lt;/note&gt;


</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the encoded
#ClutterUnits value. Use g_free() to free the string


</return>
</function>

<function name="clutter_value_dup_paint_node">
<description>
Retrieves a pointer to the #ClutterPaintNode contained inside
the passed #GValue, and if not %NULL it will increase the
reference count.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized with %CLUTTER_TYPE_PAINT_NODE
</parameter_description>
</parameter>
</parameters>
<return> a pointer
to the #ClutterPaintNode, with its reference count increased,
or %NULL


</return>
</function>

<function name="clutter_value_get_color">
<description>
Gets the #ClutterColor contained in @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized to #CLUTTER_TYPE_COLOR
</parameter_description>
</parameter>
</parameters>
<return> the color inside the passed #GValue


</return>
</function>

<function name="clutter_value_get_paint_node">
<description>
Retrieves a pointer to the #ClutterPaintNode contained inside
the passed #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized with %CLUTTER_TYPE_PAINT_NODE
</parameter_description>
</parameter>
</parameters>
<return> a pointer to
a #ClutterPaintNode, or %NULL


</return>
</function>

<function name="clutter_value_get_shader_float">
<description>
Retrieves the list of floating point values stored inside
the passed #GValue. @value must have been initialized with
%CLUTTER_TYPE_SHADER_FLOAT.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the number of returned floating
point values, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the pointer to a list of
floating point values.  The returned value is owned by the
#GValue and should never be modified or freed.


</return>
</function>

<function name="clutter_value_get_shader_int">
<description>
Retrieves the list of integer values stored inside the passed
#GValue. @value must have been initialized with
%CLUTTER_TYPE_SHADER_INT.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the number of returned integer
values, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the pointer to a list of
integer values.  The returned value is owned by the #GValue and
should never be modified or freed.


</return>
</function>

<function name="clutter_value_get_shader_matrix">
<description>
Retrieves a matrix of floating point values stored inside
the passed #GValue. @value must have been initialized with
%CLUTTER_TYPE_SHADER_MATRIX.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the number of returned floating
point values, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the pointer to a matrix
of floating point values. The returned value is owned by the #GValue and
should never be modified or freed.


</return>
</function>

<function name="clutter_value_get_units">
<description>
Gets the #ClutterUnits contained in @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized to %CLUTTER_TYPE_UNITS
</parameter_description>
</parameter>
</parameters>
<return> the units inside the passed #GValue


</return>
</function>

<function name="clutter_value_set_color">
<description>
Sets @value to @color.



</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized to #CLUTTER_TYPE_COLOR
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_value_set_paint_node">
<description>
Sets the contents of a #GValue initialized with %CLUTTER_TYPE_PAINT_NODE.

This function increased the reference count of @node; if you do not wish
to increase the reference count, use clutter_value_take_paint_node()
instead. The reference count will be released by g_value_unset().



</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized with %CLUTTER_TYPE_PAINT_NODE
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> a #ClutterPaintNode, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_value_set_shader_float">
<description>
Sets @floats as the contents of @value. The passed #GValue
must have been initialized using %CLUTTER_TYPE_SHADER_FLOAT.



</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> number of floating point values in @floats
</parameter_description>
</parameter>
<parameter name="floats">
<parameter_description> an array of floating point values
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_value_set_shader_int">
<description>
Sets @ints as the contents of @value. The passed #GValue
must have been initialized using %CLUTTER_TYPE_SHADER_INT.



</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> number of integer values in @ints
</parameter_description>
</parameter>
<parameter name="ints">
<parameter_description> an array of integer values
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_value_set_shader_matrix">
<description>
Sets @matrix as the contents of @value. The passed #GValue
must have been initialized using %CLUTTER_TYPE_SHADER_MATRIX.



</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> number of floating point values in @floats
</parameter_description>
</parameter>
<parameter name="matrix">
<parameter_description> a matrix of floating point values
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_value_set_units">
<description>
Sets @value to @units



</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized to %CLUTTER_TYPE_UNITS
</parameter_description>
</parameter>
<parameter name="units">
<parameter_description> the units to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_value_take_paint_node">
<description>
Sets the contents of a #GValue initialized with %CLUTTER_TYPE_PAINT_NODE.

Unlike clutter_value_set_paint_node(), this function will not take a
reference on the passed @node: instead, it will take ownership of the
current reference count.



</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue, initialized with %CLUTTER_TYPE_PAINT_NODE
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> a #ClutterPaintNode, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_vertex_alloc">
<description>
Allocates a new, empty #ClutterVertex.


</description>
<parameters>
</parameters>
<return> the newly allocated #ClutterVertex.
Use clutter_vertex_free() to free its resources


</return>
</function>

<function name="clutter_vertex_copy">
<description>
Copies @vertex


</description>
<parameters>
<parameter name="vertex">
<parameter_description> a #ClutterVertex
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated copy of #ClutterVertex.
Use clutter_vertex_free() to free the allocated resources


</return>
</function>

<function name="clutter_vertex_equal">
<description>
Compares @vertex_a and @vertex_b for equality


</description>
<parameters>
<parameter name="vertex_a">
<parameter_description> a #ClutterVertex
</parameter_description>
</parameter>
<parameter name="vertex_b">
<parameter_description> a #ClutterVertex
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the passed #ClutterVertex are equal


</return>
</function>

<function name="clutter_vertex_free">
<description>
Frees a #ClutterVertex allocated using clutter_vertex_alloc() or
clutter_vertex_copy().



</description>
<parameters>
<parameter name="vertex">
<parameter_description> a #ClutterVertex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_vertex_init">
<description>
Initializes @vertex with the given coordinates.


</description>
<parameters>
<parameter name="vertex">
<parameter_description> a #ClutterVertex
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate
</parameter_description>
</parameter>
<parameter name="z">
<parameter_description> Z coordinate
</parameter_description>
</parameter>
</parameters>
<return> the initialized #ClutterVertex


</return>
</function>

<function name="clutter_vertex_new">
<description>
Creates a new #ClutterVertex for the point in 3D space
identified by the 3 coordinates @x, @y, @z.

This function is the logical equivalent of:

|[
clutter_vertex_init (clutter_vertex_alloc (), x, y, z);
]|


</description>
<parameters>
<parameter name="x">
<parameter_description> X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate
</parameter_description>
</parameter>
<parameter name="z">
<parameter_description> Z coordinate
</parameter_description>
</parameter>
</parameters>
<return> the newly allocated #ClutterVertex.
Use clutter_vertex_free() to free the resources


</return>
</function>

<function name="clutter_wayland_disable_event_retrieval">
<description>
Disables the dispatch of the events in the main loop.

This is useful for integrating Clutter with another library that will do the
event dispatch; in general only a single source should be acting on changes
on the Wayland file descriptor.

&lt;warning&gt;This function can only be called before calling
clutter_init().&lt;/warning&gt;

This function should not be normally used by applications.

Since: 1.16

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_wayland_input_device_get_wl_seat">
<description>
Access the underlying data structure representing the Wayland device that is
backing this #ClutterInputDevice.

Note: this function can only be called when running on the Wayland platform.
Calling this function at any other time will return %NULL.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return> the Wayland input device associated with the
@device


</return>
</function>

<function name="clutter_wayland_set_compositor_display">
<description>
This informs Clutter of your compositor side Wayland display
object. This must be called before calling clutter_init().


Stability: unstable

</description>
<parameters>
<parameter name="display">
<parameter_description> A compositor side struct wl_display pointer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_wayland_set_display">
<description>
Sets the display connection Clutter should use; must be called
before clutter_init(), clutter_init_with_args() or other functions
pertaining Clutter's initialization process.

If you are parsing the command line arguments by retrieving Clutter's
#GOptionGroup with clutter_get_option_group() and calling
g_option_context_parse() yourself, you should also call
clutter_wayland_set_display() before g_option_context_parse().

Since: 1.16

</description>
<parameters>
<parameter name="display">
<parameter_description> pointer to a wayland display
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_wayland_stage_get_wl_shell_surface">
<description>
Access the underlying data structure representing the shell surface that is
backing the #ClutterStage

Note: this function can only be called when running on the Wayland
platform. Calling this function at any other time will return %NULL.


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> the Wayland shell surface associated with
@stage


</return>
</function>

<function name="clutter_wayland_stage_get_wl_surface">
<description>
Access the underlying data structure representing the surface that is
backing the #ClutterStage

Note: this function can only be called when running on the Wayland
platform. Calling this function at any other time will return %NULL.

Since: 1.10

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> the Wayland surface associated with @stage

</return>
</function>

<function name="clutter_wayland_stage_set_wl_surface">
<description>
Allows you to explicitly provide an existing Wayland surface to associate
with @stage, preventing Cogl from allocating a surface and shell surface for
the stage automatically.

This function must be called before @stage is shown.

Note: this function can only be called when running on the Wayland
platform. Calling this function at any other time has no effect.

Since: 1.16

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="surface">
<parameter_description> A Wayland surface to associate with the @stage.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_wayland_surface_attach_buffer">
<description>
This associates a client's buffer with the #ClutterWaylandSurface
actor @self. This will automatically result in @self being re-drawn
with the new buffer contents.


Stability: unstable

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterWaylandSurface actor
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> A compositor side struct wl_buffer pointer
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> A #GError
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_wayland_surface_damage_buffer">
<description>
This marks a region of the given @buffer has having been changed by
the client. This will automatically result in the corresponding damaged
region of the actor @self being redrawn.

If multiple regions are changed then this should be called multiple
times with different damage rectangles.


Stability: unstable

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterWaylandSurface actor
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> A compositor side struct wl_buffer pointer
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> The x coordinate of the damaged rectangle
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> The y coordinate of the damaged rectangle
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> The width of the damaged rectangle
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> The height of the damaged rectangle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_wayland_surface_get_cogl_texture">
<description>
Retrieves the Cogl texture with the contents of the Wayland surface.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterWaylandSurface
</parameter_description>
</parameter>
</parameters>
<return> a Cogl texture, or %NULL


</return>
</function>

<function name="clutter_wayland_surface_get_surface">
<description>
Retrieves a point to the Wayland surface used by the actor.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterWaylandSurface
</parameter_description>
</parameter>
</parameters>
<return> a wl_surface pointer, or %NULL


</return>
</function>

<function name="clutter_wayland_surface_new">
<description>
Creates a new #ClutterWaylandSurface for @surface


</description>
<parameters>
<parameter name="surface">
<parameter_description> the Wayland surface this actor should represent
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterWaylandSurface representing @surface


Stability: unstable
</return>
</function>

<function name="clutter_wayland_surface_set_surface">
<description>
Sets the Wayland surface to be used by the actor.



</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterWaylandSurface
</parameter_description>
</parameter>
<parameter name="surface">
<parameter_description> a Wayland wl_surface pointer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_win32_disable_event_retrieval">
<description>
Disables retrieval of Windows messages in the main loop. Use to
create event-less canvas.

This function can only be called before calling clutter_init().



</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_win32_get_stage_from_window">
<description>
Gets the stage for a particular window.


</description>
<parameters>
<parameter name="hwnd">
<parameter_description> a window handle
</parameter_description>
</parameter>
</parameters>
<return> The stage or NULL if a stage does not exist for the
window.


</return>
</function>

<function name="clutter_win32_get_stage_window">
<description>
Gets the stage's window handle


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> An HWND for the stage window.


</return>
</function>

<function name="clutter_win32_handle_event">
<description>
This function processes a single Win32 message. It can be used to
hook into external windows message processing (for example, a GDK
filter function).

If clutter_win32_disable_event_retrieval() has been called, you must
let this function process events to update Clutter's internal state.


</description>
<parameters>
<parameter name="msg">
<parameter_description> A pointer to a structure describing a Win32 message.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the message was handled entirely by Clutter
and no further processing (such as calling the default window
procedure) should take place. %FALSE is returned if is the message
was not handled at all or if Clutter expects processing to take
place.


</return>
</function>

<function name="clutter_win32_set_stage_foreign">
<description>
Target the #ClutterStage to use an existing external window handle.


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="hwnd">
<parameter_description> an existing window handle
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if foreign window is valid


</return>
</function>

<function name="clutter_x11_add_filter">
<description>
Adds an event filter function.



</description>
<parameters>
<parameter name="func">
<parameter_description> a filter function
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to be passed to the filter function, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_disable_event_retrieval">
<description>
Disables the internal polling of X11 events in the main loop.

Libraries or applications calling this function will be responsible of
polling all X11 events.

You also must call clutter_x11_handle_event() to let Clutter process
events and maintain its internal state.

&lt;warning&gt;This function can only be called before calling
clutter_init().&lt;/warning&gt;

&lt;note&gt;Even with event handling disabled, Clutter will still select
all the events required to maintain its internal state on the stage
Window; compositors using Clutter and input regions to pass events
through to application windows should not rely on an empty input
region, and should instead clear it themselves explicitly using the
XFixes extension.&lt;/note&gt;

This function should not be normally used by applications.



</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_x11_enable_xinput">
<description>
Enables the use of the XInput extension if present on connected
XServer and support built into Clutter. XInput allows for multiple
pointing devices to be used.

This function must be called before clutter_init().

Since XInput might not be supported by the X server, you might
want to use clutter_x11_has_xinput() to see if support was enabled.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_x11_event_get_key_group">
<description>
Retrieves the group for the modifiers set in @event


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_KEY_PRESS or %CLUTTER_KEY_RELEASE
</parameter_description>
</parameter>
</parameters>
<return> the group id


</return>
</function>

<function name="clutter_x11_event_sequence_get_touch_detail">
<description>
Retrieves the touch detail froma #ClutterEventSequence.


</description>
<parameters>
<parameter name="sequence">
<parameter_description> a #ClutterEventSequence
</parameter_description>
</parameter>
</parameters>
<return> the touch detail
</return>
</function>

<function name="clutter_x11_get_current_event_time">
<description>
Retrieves the timestamp of the last X11 event processed by
Clutter. This might be different from the timestamp returned
by clutter_get_current_event_time(), as Clutter may synthesize
or throttle events.


</description>
<parameters>
</parameters>
<return> a timestamp, in milliseconds


</return>
</function>

<function name="clutter_x11_get_default_display">
<description>
Retrieves the pointer to the default display.


</description>
<parameters>
</parameters>
<return> the default display


</return>
</function>

<function name="clutter_x11_get_default_screen">
<description>
Gets the number of the default X Screen object.


</description>
<parameters>
</parameters>
<return> the number of the default screen


</return>
</function>

<function name="clutter_x11_get_root_window">
<description>
Retrieves the root window.


</description>
<parameters>
</parameters>
<return> the id of the root window


</return>
</function>

<function name="clutter_x11_get_stage_from_window">
<description>
Gets the stage for a particular X window.


</description>
<parameters>
<parameter name="win">
<parameter_description> an X Window ID
</parameter_description>
</parameter>
</parameters>
<return> A #ClutterStage, or% NULL if a stage
does not exist for the window


</return>
</function>

<function name="clutter_x11_get_stage_window">
<description>
Gets the stages X Window.


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> An XID for the stage window.


</return>
</function>

<function name="clutter_x11_get_use_argb_visual">
<description>
Retrieves whether the Clutter X11 backend is using ARGB visuals by default


</description>
<parameters>
</parameters>
<return> %TRUE if ARGB visuals are queried by default


</return>
</function>

<function name="clutter_x11_get_visual_info">
<description>
Retrieves the &lt;structname&gt;XVisualInfo&lt;/structname&gt; used by the Clutter X11
backend.


</description>
<parameters>
</parameters>
<return> a &lt;structname&gt;XVisualInfo&lt;/structname&gt;, or
&lt;varname&gt;None&lt;/varname&gt;. The returned value should be freed using XFree()
when done


</return>
</function>

<function name="clutter_x11_handle_event">
<description>
This function processes a single X event; it can be used to hook
into external X11 event processing (for example, a GDK filter
function).

If clutter_x11_disable_event_retrieval() has been called, you must
let this function process events to update Clutter's internal state.


</description>
<parameters>
<parameter name="xevent">
<parameter_description> pointer to XEvent structure
</parameter_description>
</parameter>
</parameters>
<return> #ClutterX11FilterReturn. %CLUTTER_X11_FILTER_REMOVE
indicates that Clutter has internally handled the event and the
caller should do no further processing. %CLUTTER_X11_FILTER_CONTINUE
indicates that Clutter is either not interested in the event,
or has used the event to update internal state without taking
any exclusive action. %CLUTTER_X11_FILTER_TRANSLATE will not
occur.


</return>
</function>

<function name="clutter_x11_has_composite_extension">
<description>
Retrieves whether Clutter is running on an X11 server with the
XComposite extension


</description>
<parameters>
</parameters>
<return> %TRUE if the XComposite extension is available
</return>
</function>

<function name="clutter_x11_has_event_retrieval">
<description>
Queries the X11 backend to check if event collection has been disabled.


</description>
<parameters>
</parameters>
<return> TRUE if event retrival has been disabled. FALSE otherwise.


</return>
</function>

<function name="clutter_x11_has_xinput">
<description>
Gets whether Clutter has XInput support.


</description>
<parameters>
</parameters>
<return> %TRUE if Clutter was compiled with XInput support
and XInput support is available at run time.
</return>
</function>

<function name="clutter_x11_remove_filter">
<description>
Removes the given filter function.



</description>
<parameters>
<parameter name="func">
<parameter_description> a filter function
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to be passed to the filter function, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_set_display">
<description>
Sets the display connection Clutter should use; must be called
before clutter_init(), clutter_init_with_args() or other functions
pertaining Clutter's initialization process.

If you are parsing the command line arguments by retrieving Clutter's
#GOptionGroup with clutter_get_option_group() and calling
g_option_context_parse() yourself, you should also call
clutter_x11_set_display() before g_option_context_parse().



</description>
<parameters>
<parameter name="xdpy">
<parameter_description> pointer to a X display connection.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_set_stage_foreign">
<description>
Target the #ClutterStage to use an existing external X Window


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="xwindow">
<parameter_description> an existing X Window id
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if foreign window is valid


</return>
</function>

<function name="clutter_x11_set_use_argb_visual">
<description>
Sets whether the Clutter X11 backend should request ARGB visuals by default
or not.

By default, Clutter requests RGB visuals.

&lt;note&gt;If no ARGB visuals are found, the X11 backend will fall back to
requesting a RGB visual instead.&lt;/note&gt;

ARGB visuals are required for the #ClutterStage:use-alpha property to work.

&lt;note&gt;This function can only be called once, and before clutter_init() is
called.&lt;/note&gt;



</description>
<parameters>
<parameter name="use_argb">
<parameter_description> %TRUE if ARGB visuals should be requested by default
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_texture_pixmap_new">
<description>
Creates a new #ClutterX11TexturePixmap which can be used to display the
contents of an X11 Pixmap inside a Clutter scene graph


</description>
<parameters>
</parameters>
<return> A new #ClutterX11TexturePixmap


</return>
</function>

<function name="clutter_x11_texture_pixmap_new_with_pixmap">
<description>
Creates a new #ClutterX11TexturePixmap for @pixmap


</description>
<parameters>
<parameter name="pixmap">
<parameter_description> the X Pixmap to which this texture should be bound
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterX11TexturePixmap bound to the given X Pixmap


</return>
</function>

<function name="clutter_x11_texture_pixmap_new_with_window">
<description>
Creates a new #ClutterX11TexturePixmap for @window


</description>
<parameters>
<parameter name="window">
<parameter_description> the X window to which this texture should be bound
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterX11TexturePixmap bound to the given X window.


</return>
</function>

<function name="clutter_x11_texture_pixmap_set_automatic">
<description>
Enables or disables the automatic updates ot @texture in case the backing
pixmap or window is damaged



</description>
<parameters>
<parameter name="texture">
<parameter_description> a #ClutterX11TexturePixmap
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to enable automatic updates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_texture_pixmap_set_pixmap">
<description>
Sets the X Pixmap to which the texture should be bound.



</description>
<parameters>
<parameter name="texture">
<parameter_description> the texture to bind
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> the X Pixmap to which the texture should be bound
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_texture_pixmap_set_window">
<description>
Sets up a suitable pixmap for the window, using the composite and damage
extensions if possible, and then calls
clutter_x11_texture_pixmap_set_pixmap().

If you want to display a window in a #ClutterTexture, you probably want
this function, or its older sister, clutter_glx_texture_pixmap_set_window().

This function has no effect unless the XComposite extension is available.



</description>
<parameters>
<parameter name="texture">
<parameter_description> the texture to bind
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> the X window to which the texture should be bound
</parameter_description>
</parameter>
<parameter name="automatic">
<parameter_description> %TRUE for automatic window updates, %FALSE for manual.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_texture_pixmap_sync_window">
<description>
Resets the texture's pixmap from its window, perhaps in response to the
pixmap's invalidation as the window changed size.



</description>
<parameters>
<parameter name="texture">
<parameter_description> the texture to bind
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_texture_pixmap_update_area">
<description>
Performs the actual binding of texture to the current content of
the pixmap. Can be called to update the texture if the pixmap
content has changed.



</description>
<parameters>
<parameter name="texture">
<parameter_description> The texture whose content shall be updated.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the X coordinate of the area to update
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the Y coordinate of the area to update
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the area to update
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the area to update
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_trap_x_errors">
<description>
Traps every X error until clutter_x11_untrap_x_errors() is called.



</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_x11_untrap_x_errors">
<description>
Removes the X error trap and returns the current status.


</description>
<parameters>
</parameters>
<return> the trapped error code, or 0 for success


</return>
</function>

<function name="clutter_zoom_action_get_focal_point">
<description>
Retrieves the focal point of the current zoom



</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterZoomAction
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> a #ClutterPoint
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_zoom_action_get_transformed_focal_point">
<description>
Retrieves the focal point relative to the actor's coordinates of
the current zoom



</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterZoomAction
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> a #ClutterPoint
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_zoom_action_get_zoom_axis">
<description>
Retrieves the axis constraint set by clutter_zoom_action_set_zoom_axis()


</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterZoomAction
</parameter_description>
</parameter>
</parameters>
<return> the axis constraint


</return>
</function>

<function name="clutter_zoom_action_new">
<description>
Creates a new #ClutterZoomAction instance


</description>
<parameters>
</parameters>
<return> the newly created #ClutterZoomAction


</return>
</function>

<function name="clutter_zoom_action_set_zoom_axis">
<description>
Restricts the zooming action to a specific axis



</description>
<parameters>
<parameter name="action">
<parameter_description> a #ClutterZoomAction
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the axis to constraint the zooming to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

</root>
