<root>
<function name="clutter_do_event">
<description>
Processes an event. This function should never be called by applications.

Since: 0.4

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_alpha_register_func">
<description>
Registers a global alpha function and returns its logical id
to be used by clutter_alpha_set_mode() or by #ClutterAnimation.

The logical id is always greater than %CLUTTER_ANIMATION_LAST.

Since: 1.0

</description>
<parameters>
<parameter name="func">
<parameter_description> a #ClutterAlphaFunc
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to @func, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the logical id of the alpha function

</return>
</function>

<function name="cogl_pango_font_map_create_context">
<description>
Creates a new #PangoContext from the passed font map.

Since: 1.0

</description>
<parameters>
<parameter name="fm">
<parameter_description> a #CoglPangoFontMap
</parameter_description>
</parameter>
</parameters>
<return> the newly created #PangoContext

</return>
</function>

<function name="clutter_knot_free">
<description>
Frees the memory of an allocated knot.

Since: 0.2

</description>
<parameters>
<parameter name="knot">
<parameter_description> a #ClutterKnot
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_animate_with_timeline">
<description>
Animates the given list of properties of @actor between the current
value for each property and a new final value. The animation has a
definite duration given by @timeline and a speed given by the @mode.

See clutter_actor_animate() for further details.

This function is useful if you want to use an existing timeline
to animate @actor.

Since: 1.0

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> an animation mode logical id
</parameter_description>
</parameter>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of a property
</parameter_description>
</parameter>
<parameter name="VarArgs">
<parameter_description> a %NULL terminated list of property names and
property values
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterAnimation object. The object is
owned by the #ClutterActor and should not be unreferenced with
g_object_unref()

</return>
</function>

<function name="clutter_event_get">
<description>
Pops an event off the event queue. Applications should not need to call 
this.

Since: 0.4

</description>
<parameters>
</parameters>
<return> A #ClutterEvent or NULL if queue empty

</return>
</function>

<function name="clutter_score_append">
<description>
Appends a timeline to another one existing in the score; the newly
appended timeline will be started when @parent is complete.

If @parent is %NULL, the new #ClutterTimeline will be started when
clutter_score_start() is called.

#ClutterScore will take a reference on @timeline.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> a #ClutterTimeline in the score, or %NULL
</parameter_description>
</parameter>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the id of the #ClutterTimeline inside the score, or
0 on failure. The returned id can be used with clutter_score_remove()
or clutter_score_get_timeline().

</return>
</function>

<function name="clutter_actor_get_shader">
<description>
Queries the currently set #ClutterShader on @self.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> The currently set #ClutterShader
or %NULL if no shader is set.

</return>
</function>

<function name="clutter_animator_new">
<description>
Creates a new #ClutterAnimator instance

Since: 1.2

</description>
<parameters>
</parameters>
<return> a new #ClutterAnimator.

</return>
</function>

<function name="clutter_animator_key_get_mode">
<description>
Retrieves the mode of a #ClutterAnimator key, for the first key of a
property for an object this represents the whether the animation is
open ended and or curved for the remainding keys for the property it
represents the easing mode.

Since: 1.2

</description>
<parameters>
<parameter name="key">
<parameter_description> a #ClutterAnimatorKey
</parameter_description>
</parameter>
</parameters>
<return> the mode of a #ClutterAnimatorKey

</return>
</function>

<function name="clutter_path_to_cairo_path">
<description>
Add the nodes of the ClutterPath to the path in the Cairo context.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="cr">
<parameter_description> a Cairo context
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_units_from_mm">
<description>
Stores a value in millimiters inside @units

Since: 1.0

</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
<parameter name="mm">
<parameter_description> millimeters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_value_set_shader_matrix">
<description>
Sets @matrix as the contents of @value. The passed #GValue
must have been initialized using %CLUTTER_TYPE_SHADER_MATRIX.

Since: 0.8

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> number of floating point values in @floats
</parameter_description>
</parameter>
<parameter name="matrix">
<parameter_description> a matrix of floating point values
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeout_pool_remove">
<description>
Removes a timeout function with @id from the timeout pool. The id
is the same returned when adding a function to the timeout pool with
clutter_timeout_pool_add().

Since: 0.4

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterTimeoutPool
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the id of the timeout to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_remove_marker">
<description>
Removes @marker_name, if found, from @timeline.

Since: 0.8

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the name of the marker to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_scale_gravity">
<description>
Retrieves the scale center as a compass direction. If the scale
center was specified in pixels or units this will return
%CLUTTER_GRAVITY_NONE.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the scale gravity

</return>
</function>

<function name="clutter_glx_texture_pixmap_new_with_window">
<description>
Creates a new #ClutterGLXTexturePixmap for @window

Since: 0.8

</description>
<parameters>
<parameter name="window">
<parameter_description> the X window to which this texture should be bound
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterGLXTexturePixmap bound to the given X window

</return>
</function>

<function name="clutter_box_layout_set_easing_duration">
<description>
Sets the duration of the animations used by @layout when animating changes
in the layout properties

Use clutter_box_layout_set_use_animations() to enable and disable the
animations

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> the duration of the animations, in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="cogl_pango_font_map_clear_glyph_cache">
<description>
Clears the glyph cache for @fm.

Since: 1.0

</description>
<parameters>
<parameter name="fm">
<parameter_description> a #CoglPangoFontMap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animator_property_get_ease_in">
<description>
Checks if a property value is to be eased into the animation.

Since: 1.2

</description>
<parameters>
<parameter name="animator">
<parameter_description> a #ClutterAnimatorKey
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of a property on object
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the property is eased in

</return>
</function>

<function name="clutter_animator_key_get_value">
<description>
Retrieves a copy of the value for a #ClutterAnimatorKey.

The passed in #GValue needs to be already initialized for the value
type of the key or to a type that allow transformation from the value
type of the key.

Use g_value_unset() when done.

Since: 1.2

</description>
<parameters>
<parameter name="key">
<parameter_description> a #ClutterAnimatorKey
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue initialized with the correct type for the animator key
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the passed #GValue was successfully set, and
%FALSE otherwise

</return>
</function>

<function name="clutter_event_get_flags">
<description>
Retrieves the #ClutterEventFlags of @event

Since: 1.0

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the event flags

</return>
</function>

<function name="json_parser_load_from_data">
<description>
Loads a JSON stream from a buffer and parses it. You can call this function
multiple times with the same #JsonParser object, but the contents of the
parser will be destroyed each time.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #JsonParser
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the buffer to parse
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of the buffer, or -1
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the buffer was succesfully parser. In case
of error, @error is set accordingly and %FALSE is returned
</return>
</function>

<function name="clutter_container_get_children">
<description>
Retrieves all the children of @container.

Since: 0.4

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
</parameters>
<return> a list
of #ClutterActor&lt;!-- --&gt;s. Use g_list_free() on the returned
list when done.

</return>
</function>

<function name="clutter_stage_get_use_fog">
<description>
Gets whether the depth cueing effect is enabled on @stage.

Since: 0.6

</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the the depth cueing effect is enabled

</return>
</function>

<function name="clutter_flow_layout_set_homogeneous">
<description>
Sets whether the @layout should allocate the same space for
each child

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="homogeneous">
<parameter_description> whether the layout should be homogeneous or not
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_manager_find_child_property">
<description>
Retrieves the #GParamSpec for the layout property @name inside
the #ClutterLayoutMeta sub-class used by @manager

Since: 1.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the property
</parameter_description>
</parameter>
</parameters>
<return> a #GParamSpec describing the property,
or %NULL if no property with that name exists. The returned
#GParamSpec is owned by the layout manager and should not be
modified or freed

</return>
</function>

<function name="clutter_box_layout_get_spacing">
<description>
Retrieves the spacing set using clutter_box_layout_set_spacing()

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
</parameters>
<return> the spacing between children of the #ClutterBoxLayout

</return>
</function>

<function name="clutter_value_set_fixed">
<description>
Sets @value to @fixed_.

Since: 0.8

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized to %COGL_TYPE_FIXED
</parameter_description>
</parameter>
<parameter name="fixed_">
<parameter_description> the fixed point value to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_replace_node">
<description>
Replaces the node at offset @index_ with @node.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> index to the existing node
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> the replacement node
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_clone_new">
<description>
Creates a new #ClutterActor which clones @source/

Since: 1.0

</description>
<parameters>
<parameter name="source">
<parameter_description> a #ClutterActor, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterClone

</return>
</function>

<function name="clutter_container_child_get_property">
<description>
Gets a container specific property of a child of @container, In general,
a copy is made of the property contents and the caller is responsible for
freeing the memory by calling g_value_unset().

Note that clutter_container_child_set_property() is really intended for
language bindings, clutter_container_child_set() is much more convenient
for C programming.

Since: 0.8

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #ClutterActor that is a child of @container.
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> the name of the property to set.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_new">
<description>
Creates a new #ClutterPath instance with no nodes.

The object has a floating reference so if you add it to a
#ClutterBehaviourPath then you do not need to unref it.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created #ClutterPath

</return>
</function>

<function name="clutter_get_keyboard_grab">
<description>
Queries the current keyboard grab of clutter.

Since: 0.6

</description>
<parameters>
</parameters>
<return> the actor currently holding the keyboard grab, or NULL if there is no grab.

</return>
</function>

<function name="clutter_timeout_pool_new">
<description>
Creates a new timeout pool source. A timeout pool should be used when
multiple timeout functions, running at the same priority, are needed and
the g_timeout_add() API might lead to starvation of the time slice of
the main loop. A timeout pool allocates a single time slice of the main
loop and runs every timeout function inside it. The timeout pool is
always sorted, so that the extraction of the next timeout function is
a constant time operation.

Since: 0.4

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the timeout pool. Typically this will
be #G_PRIORITY_DEFAULT
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterTimeoutPool. The created pool
is owned by the GLib default context and will be automatically
destroyed when the context is destroyed. It is possible to force
the destruction of the timeout pool using g_source_destroy()

</return>
</function>

<function name="json_object_get_values">
<description>
Retrieves all the values of the members of a #JsonObject.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #JsonNode&lt;!-- --&gt;s. The content of the
list is owned by the #JsonObject and should never be modified
or freed. When you have finished using the returned list, use
g_list_free() to free the resources it has allocated.
</return>
</function>

<function name="clutter_texture_set_filter_quality">
<description>
Sets the filter quality when scaling a texture. The quality is an
enumeration currently the following values are supported:
%CLUTTER_TEXTURE_QUALITY_LOW which is fast but only uses nearest neighbour
interpolation. %CLUTTER_TEXTURE_QUALITY_MEDIUM which is computationally a
bit more expensive (bilinear interpolation), and
%CLUTTER_TEXTURE_QUALITY_HIGH which uses extra texture memory resources to
improve scaled down rendering as well (by using mipmaps). The default value
is %CLUTTER_TEXTURE_QUALITY_MEDIUM.

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> a #ClutterTexture
</parameter_description>
</parameter>
<parameter name="filter_quality">
<parameter_description> new filter quality value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_get_visual_info">
<description>
Retrieves the &lt;structname&gt;XVisualInfo&lt;/structname&gt; used by the Clutter X11
backend.

Since: 1.2

</description>
<parameters>
</parameters>
<return> a &lt;structname&gt;XVisualInfo&lt;/structname&gt;, or
&lt;varname&gt;None&lt;/varname&gt;. The returned value should be freed using XFree()
when done

</return>
</function>

<function name="clutter_input_device_get_device_type">
<description>
Retrieves the type of @device

Since: 1.0

</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return> the type of the device

</return>
</function>

<function name="clutter_behaviour_ellipse_get_height">
<description>
Gets the height of the elliptical path.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
</parameters>
<return> the height of the path

</return>
</function>

<function name="clutter_actor_box_get_x">
<description>
Retrieves the X coordinate of the origin of @box

Since: 1.0

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return> the X coordinate of the origin

</return>
</function>

<function name="clutter_alpha_new">
<description>
Creates a new #ClutterAlpha instance.  You must set a function
to compute the alpha value using clutter_alpha_set_func() and
bind a #ClutterTimeline object to the #ClutterAlpha instance
using clutter_alpha_set_timeline().

You should use the newly created #ClutterAlpha instance inside
a #ClutterBehaviour object.

Since: 0.2

</description>
<parameters>
</parameters>
<return> the newly created empty #ClutterAlpha instance.

</return>
</function>

<function name="clutter_threads_add_repaint_func">
<description>
Adds a function to be called whenever Clutter is repainting a Stage.
If the function returns %FALSE it is automatically removed from the
list of repaint functions and will not be called again.

This function is guaranteed to be called from within the same thread
that called clutter_main(), and while the Clutter lock is being held.

A repaint function is useful to ensure that an update of the scenegraph
is performed before the scenegraph is repainted; for instance, uploading
a frame from a video into a #ClutterTexture.

When the repaint function is removed (either because it returned %FALSE
or because clutter_threads_remove_repaint_func() has been called) the
@notify function will be called, if any is set.

Since: 1.0

</description>
<parameters>
<parameter name="func">
<parameter_description> the function to be called within the paint cycle
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to be passed to the function, or %NULL
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to be called when removing the repaint
function, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the repaint function. You
can use the returned integer to remove the repaint function by
calling clutter_threads_remove_repaint_func().

</return>
</function>

<function name="clutter_check_version">
<description>
Run-time version check, to check the version the Clutter library
that an application is currently linked against

This is the run-time equivalent of the compile-time %CLUTTER_CHECK_VERSION
pre-processor macro

Since: 1.2

</description>
<parameters>
<parameter name="major">
<parameter_description> major version, like 1 in 1.2.3
</parameter_description>
</parameter>
<parameter name="minor">
<parameter_description> minor version, like 2 in 1.2.3
</parameter_description>
</parameter>
<parameter name="micro">
<parameter_description> micro version, like 3 in 1.2.3
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the version of the Clutter library is
greater than (@major, @minor, @micro), and %FALSE otherwise

</return>
</function>

<function name="clutter_box_layout_set_vertical">
<description>
Sets whether @layout should arrange its children vertically alongside
the Y axis, instead of horizontally alongside the X axis

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="vertical">
<parameter_description> %TRUE if the layout should be vertical
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_scale">
<description>
Scales an actor with the given factors. The scaling is relative to
the scale center and the anchor point. The scale center is
unchanged by this function and defaults to 0,0.

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> double factor to scale actor by horizontally.
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> double factor to scale actor by vertically.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_free">
<description>
Frees the resources allocated by @node.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_manager_child_set">
<description>
Sets a list of properties and their values on the #ClutterLayoutMeta
associated by @manager to a child of @container

Languages bindings should use clutter_layout_manager_child_set_property()
instead

Since: 1.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> a #ClutterContainer using @manager
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @container
</parameter_description>
</parameter>
<parameter name="first_property">
<parameter_description> the first property name
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of property name and value pairs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_add_filter">
<description>
Adds an event filter function.

Since: 0.6

</description>
<parameters>
<parameter name="func">
<parameter_description> a filter function
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to be passed to the filter function, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_take_object">
<description>
Sets @object inside @node. The reference count of @object is not increased.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_array_get_element">
<description>
Retrieves the #JsonNode containing the value of the element at @index_
inside a #JsonArray.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the element to retrieve
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #JsonNode at the requested index
</return>
</function>

<function name="clutter_interval_get_final_value">
<description>
Retrieves the final value of @interval and copies
it into @value.

The passed #GValue must be initialized to the value held by
the #ClutterInterval.

Since: 1.0

</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_box_pack_before">
<description>
Adds @actor to @box, placing it before @sibling, and sets layout
properties at the same time, if the #ClutterLayoutManager used by
@box supports them

If @sibling is %NULL then @actor is placed at the beginning of the
list of children, to be allocated and painted below every other child

This function is a wrapper around clutter_container_add_actor(),
clutter_container_lower_child() and clutter_layout_manager_child_set()

Since: 1.2

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterBox
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> a #ClutterActor or %NULL
</parameter_description>
</parameter>
<parameter name="first_property">
<parameter_description> the name of the first property to set, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of property name and value pairs, terminated by %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_scriptable_get_id">
<description>
Retrieves the id of @scriptable set using clutter_scriptable_set_id().

Since: 0.6

</description>
<parameters>
<parameter name="scriptable">
<parameter_description> a #ClutterScriptable
</parameter_description>
</parameter>
</parameters>
<return> the id of the object. The returned string is owned by
the scriptable object and should never be modified of freed

</return>
</function>

<function name="clutter_behaviour_remove_all">
<description>
Removes every actor from the list that @behave holds.

Since: 0.4

</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_ungrab_pointer">
<description>
Removes an existing grab of the pointer.

Since: 0.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_set_font_flags">
<description>
Sets the font quality options for subsequent text rendering
operations.

Using mipmapped textures will improve the quality for scaled down
text but will use more texture memory.

Enabling hinting improves text quality for static text but may
introduce some artifacts if the text is animated.

Since: 1.0

</description>
<parameters>
<parameter name="flags">
<parameter_description> The new flags
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_peek">
<description>
Returns a pointer to the first event from the event queue but 
does not remove it. 

Since: 0.4

</description>
<parameters>
</parameters>
<return> A #ClutterEvent or NULL if queue empty.

</return>
</function>

<function name="clutter_layout_manager_child_get_property">
<description>
Gets a property on the #ClutterLayoutMeta created by @manager and
attached to a child of @container

The #GValue must already be initialized to the type of the property
and has to be unset with g_value_unset() after extracting the real
value out of it

Since: 1.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> a #ClutterContainer using @manager
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @container
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to get
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue with the value of the property to get
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_vertex_equal">
<description>
Compares @vertex_a and @vertex_b for equality

Since: 1.0

</description>
<parameters>
<parameter name="vertex_a">
<parameter_description> a #ClutterVertex
</parameter_description>
</parameter>
<parameter name="vertex_b">
<parameter_description> a #ClutterVertex
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the passed #ClutterVertex are equal

</return>
</function>

<function name="clutter_fixed_layout_new">
<description>
Creates a new #ClutterFixedLayout

Since: 1.2

</description>
<parameters>
</parameters>
<return> the newly created #ClutterFixedLayout

</return>
</function>

<function name="clutter_actor_get_allocation_vertices">
<description>
Calculates the transformed coordinates of the four corners of the
actor in the plane of @ancestor. The returned vertices relate to
the #ClutterActorBox coordinates as follows:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;@verts[0] contains (x1, y1)&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;@verts[1] contains (x2, y1)&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;@verts[2] contains (x1, y2)&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;@verts[3] contains (x2, y2)&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

If @ancestor is %NULL the ancestor will be the #ClutterStage. In
this case, the coordinates returned will be the coordinates on
the stage before the projection is applied. This is different from
the behaviour of clutter_actor_get_abs_allocation_vertices().

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="ancestor">
<parameter_description> A #ClutterActor to calculate the vertices
against, or %NULL to use the default #ClutterStage
</parameter_description>
</parameter>
<parameter name="verts">
<parameter_description> return location for an array of
4 #ClutterVertex in which to store the result.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_add_curve_to">
<description>
Adds a %CLUTTER_PATH_CURVE_TO type node to the path. This causes
the actor to follow a bezier from the last node to (@x_3, @y_3) using
(@x_1, @y_1) and (@x_2,@y_2) as control points.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="x_1">
<parameter_description> the x coordinate of the first control point
</parameter_description>
</parameter>
<parameter name="y_1">
<parameter_description> the y coordinate of the first control point
</parameter_description>
</parameter>
<parameter name="x_2">
<parameter_description> the x coordinate of the second control point
</parameter_description>
</parameter>
<parameter name="y_2">
<parameter_description> the y coordinate of the second control point
</parameter_description>
</parameter>
<parameter name="x_3">
<parameter_description> the x coordinate of the third control point
</parameter_description>
</parameter>
<parameter name="y_3">
<parameter_description> the y coordinate of the third control point
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_editable">
<description>
Sets whether the #ClutterText actor should be editable.

An editable #ClutterText with key focus set using
clutter_actor_grab_key_focus() or clutter_stage_take_key_focus()
will receive key events and will update its contents accordingly.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="editable">
<parameter_description> whether the #ClutterText should be editable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_set_motion_events_enabled">
<description>
Sets whether per-actor motion events should be enabled or not (the
default is to enable them).

If @enable is %FALSE the following events will not work:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;ClutterActor::motion-event, unless on the
#ClutterStage&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;ClutterActor::enter-event&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;ClutterActor::leave-event&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

Since: 0.6

</description>
<parameters>
<parameter name="enable">
<parameter_description> %TRUE to enable per-actor motion events
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_set_keep_aspect_ratio">
<description>
Sets whether @texture should have a preferred size maintaining
the aspect ratio of the underlying image

Since: 1.0

</description>
<parameters>
<parameter name="texture">
<parameter_description> a #ClutterTexture
</parameter_description>
</parameter>
<parameter name="keep_aspect">
<parameter_description> %TRUE to maintain aspect ratio
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_get_column_type">
<description>
Retrieves the type of the @column.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> #ClutterModel
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column number
</parameter_description>
</parameter>
</parameters>
<return> the type of the column.

</return>
</function>

<function name="clutter_path_node_equal">
<description>
Compares two nodes and checks if they are the same type with the
same coordinates.

Since: 1.0

</description>
<parameters>
<parameter name="node_a">
<parameter_description> First node
</parameter_description>
</parameter>
<parameter name="node_b">
<parameter_description> Second node
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the nodes are the same.

</return>
</function>

<function name="clutter_actor_set_text_direction">
<description>
Sets the #ClutterTextDirection for an actor

The passed text direction must not be %CLUTTER_TEXT_DIRECTION_DEFAULT

If @self implements #ClutterContainer then this function will recurse
inside all the children of @self (including the internal ones).

Composite actors not implementing #ClutterContainer, or actors requiring
special handling when the text direction changes, should connect to
the #GObject::notify signal for the #ClutterActor:text-direction property

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="text_dir">
<parameter_description> the text direction for @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_parser_get_current_pos">
<description>
Retrieves the current position inside the current line, starting
from 0.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #JsonParser
</parameter_description>
</parameter>
</parameters>
<return> the position in the current line
</return>
</function>

<function name="clutter_actor_has_clip">
<description>
Determines whether the actor has a clip area set or not.

Since: 0.1.1

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor has a clip area set.

</return>
</function>

<function name="clutter_animation_set_loop">
<description>
Sets whether @animation should loop over itself once finished.

A looping #ClutterAnimation will not emit the #ClutterAnimation::completed
signal when finished.

This function will set #ClutterAnimation:alpha and
#ClutterAnimation:timeline if needed.

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
<parameter name="loop">
<parameter_description> %TRUE if the animation should loop
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_path_new">
<description>
Creates a new path behaviour. You can use this behaviour to drive
actors along the nodes of a path, described by @path.

This will claim the floating reference on the #ClutterPath so you
do not need to unref if it.

Since: 0.2

</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha, or %NULL
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #ClutterPath or %NULL for an empty path
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterBehaviour

</return>
</function>

<function name="clutter_color_from_string">
<description>
Parses a string definition of a color, filling the
&lt;structfield&gt;red&lt;/structfield&gt;, &lt;structfield&gt;green&lt;/structfield&gt;, 
&lt;structfield&gt;blue&lt;/structfield&gt; and &lt;structfield&gt;alpha&lt;/structfield&gt; 
channels of @color. If alpha is not specified it will be set full opaque.

The @color is not allocated.

The color may be defined by any of the formats understood by
pango_color_from_string(); these include literal color names, like
&lt;literal&gt;Red&lt;/literal&gt; or &lt;literal&gt;DarkSlateGray&lt;/literal&gt;, or
hexadecimal specifications like &lt;literal&gt;3050b2&lt;/literal&gt; or
&lt;literal&gt;333&lt;/literal&gt;.

Since: 1.0

</description>
<parameters>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string specifiying a color (named color or #RRGGBBAA)
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if parsing succeeded.

</return>
</function>

<function name="clutter_actor_allocate_preferred_size">
<description>
Allocates the natural size of @self.

This function is a utility call for #ClutterActor implementations
that allocates the actor's preferred natural size. It can be used
by fixed layout managers (like #ClutterGroup or so called
'composite actors') inside the ClutterActor::allocate
implementation to give each child exactly how much space it
requires.

This function is not meant to be used by applications. It is also
not meant to be used outside the implementation of the
ClutterActor::allocate virtual function.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags controlling the allocation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_get_value">
<description>
Sets an initializes @value to that at @column. When done with @value, 
g_value_unset() needs to be called to free any allocated memory.

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> column number to retrieve the value from
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> an empty #GValue to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animator_key_get_property_name">
<description>
Retrieves the name of the property a key applies to.

Since: 1.2

</description>
<parameters>
<parameter name="key">
<parameter_description> a #ClutterAnimatorKey
</parameter_description>
</parameter>
</parameters>
<return> the name of the property an animator_key exist for.

</return>
</function>

<function name="clutter_feature_available">
<description>
Checks whether @feature is available.  @feature can be a logical
OR of #ClutterFeatureFlags.

Since: 0.1.1

</description>
<parameters>
<parameter name="feature">
<parameter_description> a #ClutterFeatureFlags
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a feature is available

</return>
</function>

<function name="clutter_container_sort_depth_order">
<description>
Sorts a container's children using their depth. This function should not
be normally used by applications.

Since: 0.6

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_knot_copy">
<description>
Makes an allocated copy of a knot.

Since: 0.2

</description>
<parameters>
<parameter name="knot">
<parameter_description> a #ClutterKnot
</parameter_description>
</parameter>
</parameters>
<return> the copied knot.

</return>
</function>

<function name="clutter_timeline_clone">
<description>
Create a new #ClutterTimeline instance which has property values
matching that of supplied timeline. The cloned timeline will not
be started and will not be positioned to the current position of
@timeline: you will have to start it with clutter_timeline_start().

Since: 0.4

</description>
<parameters>
<parameter name="timeline">
<parameter_description> #ClutterTimeline to duplicate.
</parameter_description>
</parameter>
</parameters>
<return> a new #ClutterTimeline, cloned from @timeline

</return>
</function>

<function name="clutter_container_raise_child">
<description>
Raises @actor to @sibling level, in the depth ordering.

Since: 0.6

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the actor to raise
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the sibling to raise to, or %NULL to raise to the top
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_object_get_null_member">
<description>
Convenience function that checks whether the value
stored in @member_name of @object is null

See also: json_object_get_member()

Since: 0.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value is null

</return>
</function>

<function name="clutter_get_input_device_for_id">
<description>
Retrieves the #ClutterInputDevice from its @id. This is a convenience
wrapper for clutter_device_manager_get_device() and it is functionally
equivalent to:

|[
ClutterDeviceManager *manager;
ClutterInputDevice *device;

manager = clutter_device_manager_get_default ();
device = clutter_device_manager_get_device (manager, id);
]|

Since: 0.8

</description>
<parameters>
<parameter name="id">
<parameter_description> the unique id for a device
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterInputDevice, or %NULL

</return>
</function>

<function name="clutter_actor_get_animation">
<description>
Retrieves the #ClutterAnimation used by @actor, if clutter_actor_animate()
has been called on @actor.

Since: 1.0

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterAnimation, or %NULL

</return>
</function>

<function name="clutter_media_set_uri">
<description>
Sets the URI of @media to @uri.

Since: 0.2

</description>
<parameters>
<parameter name="media">
<parameter_description> a #ClutterMedia
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the URI of the media stream
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeout_pool_add">
<description>
Sets a function to be called at regular intervals, and puts it inside
the @pool. The function is repeatedly called until it returns %FALSE,
at which point the timeout is automatically destroyed and the function
won't be called again. If @notify is not %NULL, the @notify function
will be called. The first call to @func will be at the end of @interval.

Since Clutter 0.8 this will try to compensate for delays. For
example, if @func takes half the interval time to execute then the
function will be called again half the interval time after it
finished. Before version 0.8 it would not fire until a full
interval after the function completes so the delay between calls
would be @interval * 1.5. This function does not however try to
invoke the function multiple times to catch up missing frames if
@func takes more than @interval ms to execute.

Since: 0.4

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterTimeoutPool
</parameter_description>
</parameter>
<parameter name="fps">
<parameter_description> the time between calls to the function, in frames per second
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function, or %NULL
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the timeout is removed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the timeout inside the pool.
Use clutter_timeout_pool_remove() to stop the timeout.

</return>
</function>

<function name="clutter_actor_animate_with_alpha">
<description>
Animates the given list of properties of @actor between the current
value for each property and a new final value. The animation has a
definite behaviour given by the passed @alpha.

See clutter_actor_animate() for further details.

This function is useful if you want to use an existing #ClutterAlpha
to animate @actor.

Since: 1.0

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of a property
</parameter_description>
</parameter>
<parameter name="VarArgs">
<parameter_description> a %NULL terminated list of property names and
property values
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterAnimation object. The object is owned by the
#ClutterActor and should not be unreferenced with g_object_unref()

</return>
</function>

<function name="clutter_shader_release">
<description>
Frees up any GL context resources held by the shader.

Since: 0.6

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_list_model_new">
<description>
Creates a new default model with @n_columns columns with the types 
and names passed in.

For example:

&lt;informalexample&gt;&lt;programlisting&gt;
model = clutter_list_model_new (3,
G_TYPE_INT,      &quot;Score&quot;,
G_TYPE_STRING,   &quot;Team&quot;,
GDK_TYPE_PIXBUF, &quot;Logo&quot;);
&lt;/programlisting&gt;&lt;/informalexample&gt;

will create a new #ClutterModel with three columns of type int,
string and #GdkPixbuf respectively.

Note that the name of the column can be set to %NULL, in which case
the canonical name of the type held by the column will be used as
the title.

Since: 0.6

</description>
<parameters>
<parameter name="n_columns">
<parameter_description> number of columns in the model
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> @n_columns number of #GType and string pairs
</parameter_description>
</parameter>
</parameters>
<return> a new #ClutterListModel

</return>
</function>

<function name="clutter_box_pack_at">
<description>
Adds @actor to @box, placing it at @position, and sets layout
properties at the same time, if the #ClutterLayoutManager used by
@box supports them

If @position is a negative number, or is larger than the number of
children of @box, the new child is added at the end of the list of
children

Since: 1.2

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterBox
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position to insert the @actor at
</parameter_description>
</parameter>
<parameter name="first_property">
<parameter_description> the name of the first property to set, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of property name and value pairs, terminated by %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_line_wrap_mode">
<description>
If line wrapping is enabled (see clutter_text_set_line_wrap()) this
function controls how the line wrapping is performed. The default is
%PANGO_WRAP_WORD which means wrap on word boundaries.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="wrap_mode">
<parameter_description> the line wrapping mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_raise">
<description>
Puts @self above @below.

Both actors must have the same parent, and the parent must implement
the #ClutterContainer interface

This function is the equivalent of clutter_container_raise_child().

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="below">
<parameter_description> A #ClutterActor to raise above.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_device_manager_get_default">
<description>
Retrieves the device manager singleton

Since: 1.2

</description>
<parameters>
</parameters>
<return> the #ClutterDeviceManager singleton.
The returned instance is owned by Clutter and it should not be
modified or freed

</return>
</function>

<function name="clutter_x11_get_use_argb_visual">
<description>
Retrieves whether the Clutter X11 backend is using ARGB visuals by default

Since: 1.2

</description>
<parameters>
</parameters>
<return> %TRUE if ARGB visuals are queried by default

</return>
</function>

<function name="json_object_get_object_member">
<description>
Convenience function that retrieves the object
stored in @member_name of @object

See also: json_object_get_member()

Since: 0.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
</parameters>
<return> the object inside the object's member

</return>
</function>

<function name="clutter_container_create_child_meta">
<description>
Creates the #ClutterChildMeta wrapping @actor inside the
@container, if the #ClutterContainerIface::child_meta_type
class member is not set to %G_TYPE_INVALID.

This function is only useful when adding a #ClutterActor to
a #ClutterContainer implementation outside of the
#ClutterContainer::add() virtual function implementation.

Applications should not call this function.

Since: 1.2

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_node_copy">
<description>
Makes an allocated copy of a node.

Since: 1.0

</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPathNode
</parameter_description>
</parameter>
</parameters>
<return> the copied node.

</return>
</function>

<function name="clutter_stage_get_default">
<description>
Returns the main stage. The default #ClutterStage is a singleton,
so the stage will be created the first time this function is
called (typically, inside clutter_init()); all the subsequent
calls to clutter_stage_get_default() will return the same instance.

Clutter guarantess the existence of the default stage.


</description>
<parameters>
</parameters>
<return> the main #ClutterStage.  You should never
destroy or unref the returned actor.
</return>
</function>

<function name="clutter_container_foreach">
<description>
Calls @callback for each child of @container that was added
by the application (with clutter_container_add_actor()). Does
not iterate over &quot;internal&quot; children that are part of the
container's own implementation, if any.

Since: 0.4

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a function to be called for each child
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to be passed to the function, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_list_model_newv">
<description>
Non-vararg version of clutter_list_model_new(). This function is
useful for language bindings.

Since: 0.6

</description>
<parameters>
<parameter name="n_columns">
<parameter_description> number of columns in the model
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> an array of #GType types for the columns, from first to last
</parameter_description>
</parameter>
<parameter name="names">
<parameter_description> an array of names for the columns, from first to last
</parameter_description>
</parameter>
</parameters>
<return> a new default #ClutterModel

</return>
</function>

<function name="clutter_score_pause">
<description>
Pauses a playing score @score.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_max_length">
<description>
Gets the maximum length of text that can be set into a text actor.

See clutter_text_set_max_length().

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> the maximum number of characters.

</return>
</function>

<function name="clutter_actor_set_shader_param">
<description>
Sets the value for a named parameter of the shader applied
to @actor.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> the name of the parameter
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the parameter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_bin_layout_set_alignment">
<description>
Sets the horizontal and vertical alignment policies to be applied
to a @child of @self

If @child is %NULL then the @x_align and @y_align values will
be set as the default alignment policies

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBinLayout
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child of @container
</parameter_description>
</parameter>
<parameter name="x_align">
<parameter_description> the horizontal alignment policy to be used for the @child
inside @container
</parameter_description>
</parameter>
<parameter name="y_align">
<parameter_description> the vertical aligment policy to be used on the @child
inside @container
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_preferred_height">
<description>
Computes the requested minimum and natural heights for an actor,
or if they are already computed, returns the cached values.

An actor may not get its request - depending on the layout
manager that's in effect.

A request should not incorporate the actor's scale or anchor point;
those transformations do not affect layout, only rendering.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="for_width">
<parameter_description> available width to assume in computing desired height,
or a negative value to indicate that no width is defined
</parameter_description>
</parameter>
<parameter name="min_height_p">
<parameter_description> return location for minimum height,
or %NULL
</parameter_description>
</parameter>
<parameter name="natural_height_p">
<parameter_description> return location for natural
height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_parser_load_from_file">
<description>
Loads a JSON stream from the content of @filename and parses it. See
json_parser_load_from_data().


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #JsonParser
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the path for the file to parse
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file was successfully loaded and parsed.
In case of error, @error is set accordingly and %FALSE is returned
</return>
</function>

<function name="clutter_stage_manager_list_stages">
<description>
Lists all currently used stages.

Since: 0.8

</description>
<parameters>
<parameter name="stage_manager">
<parameter_description> a #ClutterStageManager
</parameter_description>
</parameter>
</parameters>
<return> a newly
allocated list of #ClutterStage objects. Use g_slist_free() to
deallocate it when done.

</return>
</function>

<function name="clutter_container_add_valist">
<description>
Alternative va_list version of clutter_container_add().

Since: 0.4

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="first_actor">
<parameter_description> the first #ClutterActor to add
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> list of actors to add, followed by %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_keysym_to_unicode">
<description>
Convert from a Clutter key symbol to the corresponding ISO10646 (Unicode)
character.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a key symbol 
</parameter_description>
</parameter>
</parameters>
<return> a Unicode character, or 0 if there  is no corresponding
character.
</return>
</function>

<function name="clutter_model_insertv">
<description>
Inserts data at @row into the #ClutterModel, setting the row
values for the given @columns upon creation.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> row index
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> the number of columns and values to set
</parameter_description>
</parameter>
<parameter name="columns">
<parameter_description> a vector containing the columns to set
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a vector containing the values for the cells
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_vertex_new">
<description>
Creates a new #ClutterVertex for the point in 3D space
identified by the 3 coordinates @x, @y, @z

Since: 1.0

</description>
<parameters>
<parameter name="x">
<parameter_description> X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate
</parameter_description>
</parameter>
<parameter name="z">
<parameter_description> Z coordinate
</parameter_description>
</parameter>
</parameters>
<return> the newly allocate #ClutterVertex. Use
clutter_vertex_free() to free the resources

</return>
</function>

<function name="clutter_texture_set_load_async">
<description>
Sets whether @texture should use a worker thread to load the data
from disk asynchronously. Setting @load_async to %TRUE will make
clutter_texture_set_from_file() return immediately.

See the #ClutterTexture:load-async property documentation, and
clutter_texture_set_load_data_async().

Since: 1.0

</description>
<parameters>
<parameter name="texture">
<parameter_description> a #ClutterTexture
</parameter_description>
</parameter>
<parameter name="load_async">
<parameter_description> %TRUE if the texture should asynchronously load data
from a filename
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_get_default_backend">
<description>
Retrieves the default #ClutterBackend used by Clutter. The
#ClutterBackend holds backend-specific configuration options.

Since: 0.4

</description>
<parameters>
</parameters>
<return> the default backend. You should
not ref or unref the returned object. Applications should rarely
need to use this.

</return>
</function>

<function name="clutter_score_get_timeline">
<description>
Retrieves the #ClutterTimeline for @id inside @score.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the id of the timeline
</parameter_description>
</parameter>
</parameters>
<return> the requested timeline, or %NULL. This
function does not increase the reference count on the returned
#ClutterTimeline

</return>
</function>

<function name="json_node_get_node_type">
<description>
Retrieves the #JsonNodeType of @node

Since: 0.8

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> the type of the node

</return>
</function>

<function name="clutter_x11_has_composite_extension">
<description>
Retrieves whether Clutter is running on an X11 server with the
XComposite extension


</description>
<parameters>
</parameters>
<return> %TRUE if the XComposite extension is available
</return>
</function>

<function name="json_array_get_boolean_element">
<description>
Conveniently retrieves the boolean value of the element at @index_
inside @array

See also: json_array_get_element(), json_node_get_boolean()

Since: 0.8

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the element to retrieve
</parameter_description>
</parameter>
</parameters>
<return> the integer value

</return>
</function>

<function name="clutter_behaviour_ellipse_get_angle_end">
<description>
Gets the at which movements ends.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
</parameters>
<return> angle in degrees

</return>
</function>

<function name="clutter_interval_peek_final_value">
<description>
Gets the pointer to the final value of @interval

Since: 1.0

</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
</parameters>
<return> the final value of the interval.
The value is owned by the #ClutterInterval and it should not be
modified or freed

</return>
</function>

<function name="clutter_group_get_n_children">
<description>
Gets the number of actors held in the group.

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterGroup
</parameter_description>
</parameter>
</parameters>
<return> The number of child actors held in the group.

</return>
</function>

<function name="clutter_text_set_line_wrap">
<description>
Sets whether the contents of a #ClutterText actor should wrap,
if they don't fit the size assigned to the actor.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="line_wrap">
<parameter_description> whether the contents should wrap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_set_sync_size">
<description>
Sets whether @texture should have the same preferred size as the
underlying image data.

Since: 1.0

</description>
<parameters>
<parameter name="texture">
<parameter_description> a #ClutterTexture
</parameter_description>
</parameter>
<parameter name="sync_size">
<parameter_description> %TRUE if the texture should have the same size of the
underlying image data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_win32_disable_event_retrieval">
<description>
Disables retrieval of Windows messages in the main loop. Use to
create event-less canvas.

This function can only be called before calling clutter_init().

Since: 0.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_media_get_duration">
<description>
Retrieves the duration of the media stream that @media represents.

Since: 0.2

</description>
<parameters>
<parameter name="media">
<parameter_description> a #ClutterMedia
</parameter_description>
</parameter>
</parameters>
<return> the duration of the media stream, in seconds

</return>
</function>

<function name="clutter_actor_get_gid">
<description>
Retrieves the unique id for @self.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> Globally unique value for this object instance.

</return>
</function>

<function name="clutter_animation_get_timeline">
<description>
Retrieves the #ClutterTimeline used by @animation

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
</parameters>
<return> the timeline used by the animation

</return>
</function>

<function name="clutter_shader_is_compiled">
<description>
Checks whether @shader is is currently compiled, linked and bound
to the GL context.

Since: 0.8

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the shader is compiled, linked and ready for use.

</return>
</function>

<function name="clutter_container_class_find_child_property">
<description>
Looks up the #GParamSpec for a child property of @klass.

Since: 0.8

</description>
<parameters>
<parameter name="klass">
<parameter_description> a #GObjectClass implementing the #ClutterContainer interface.
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> a property name.
</parameter_description>
</parameter>
</parameters>
<return> The #GParamSpec for the property or %NULL
if no such property exist.

</return>
</function>

<function name="clutter_actor_should_pick_paint">
<description>
Should be called inside the implementation of the
#ClutterActor::pick virtual function in order to check whether
the actor should paint itself in pick mode or not.

This function should never be called directly by applications.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor should paint its silhouette,
%FALSE otherwise
</return>
</function>

<function name="clutter_x11_texture_pixmap_set_automatic">
<description>
Enables or disables the automatic updates ot @texture in case the backing
pixmap or window is damaged

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> a #ClutterX11TexturePixmap
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to enable automatic updates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_add_move_to">
<description>
Adds a %CLUTTER_PATH_MOVE_TO type node to the path. This is usually
used as the first node in a path. It can also be used in the middle
of the path to cause the actor to jump to the new coordinate.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_get_key_symbol">
<description>
Retrieves the key symbol of @event

Since: 1.0

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_KEY_PRESS or
of type %CLUTTER_KEY_RELEASE
</parameter_description>
</parameter>
</parameters>
<return> the key symbol representing the key

</return>
</function>

<function name="clutter_animatable_animate_property">
<description>
Calls the animate_property() virtual function for @animatable.

The @initial_value and @final_value #GValue&lt;!-- --&gt;s must contain
the same type; @value must have been initialized to the same
type of @initial_value and @final_value.

All implementation of the #ClutterAnimatable interface must
implement this function.

Since: 1.0

</description>
<parameters>
<parameter name="animatable">
<parameter_description> a #ClutterAnimatable
</parameter_description>
</parameter>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the animated property
</parameter_description>
</parameter>
<parameter name="initial_value">
<parameter_description> the initial value of the animation interval
</parameter_description>
</parameter>
<parameter name="final_value">
<parameter_description> the final value of the animation interval
</parameter_description>
</parameter>
<parameter name="progress">
<parameter_description> the progress factor
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> return location for the animation value
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value has been validated and can
be applied to the #ClutterAnimatable, and %FALSE otherwise

</return>
</function>

<function name="clutter_shader_set_vertex_source">
<description>
Sets the GLSL source code to be used by a #ClutterShader for the vertex
program.

Since: 0.6

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> GLSL source code.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> length of source buffer (currently ignored)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_units_from_cm">
<description>
Stores a value in centimeters inside @units

Since: 1.2

</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
<parameter name="cm">
<parameter_description> centimeters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_new">
<description>
Creates a new #JsonNode of @type.


</description>
<parameters>
<parameter name="type">
<parameter_description> a #JsonNodeType
</parameter_description>
</parameter>
</parameters>
<return> the newly created #JsonNode
</return>
</function>

<function name="clutter_path_get_position">
<description>
The value in @progress represents a position along the path where
0.0 is the beginning and 1.0 is the end of the path. An
interpolated position is then stored in @position.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="progress">
<parameter_description> a position along the path as a fraction of its length
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> location to store the position
</parameter_description>
</parameter>
</parameters>
<return> index of the node used to calculate the position.

</return>
</function>

<function name="clutter_value_get_units">
<description>
Gets the #ClutterUnit&lt;!-- --&gt;s contained in @value.

Since: 0.8

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized to #CLUTTER_TYPE_UNIT
</parameter_description>
</parameter>
</parameters>
<return> the units inside the passed #GValue

</return>
</function>

<function name="clutter_actor_animate_with_timelinev">
<description>
Animates the given list of properties of @actor between the current
value for each property and a new final value. The animation has a
definite duration given by @timeline and a speed given by the @mode.

See clutter_actor_animate() for further details.

This function is useful if you want to use an existing timeline
to animate @actor.

This is the vector-based variant of clutter_actor_animate_with_timeline(),
useful for language bindings.

&lt;warning&gt;Unlike clutter_actor_animate_with_timeline(), this function
will not allow you to specify &quot;signal::&quot; names and callbacks.&lt;/warning&gt;

Since: 1.0

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> an animation mode logical id
</parameter_description>
</parameter>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="n_properties">
<parameter_description> number of property names and values
</parameter_description>
</parameter>
<parameter name="properties">
<parameter_description> a vector
containing the property names to set
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a vector containing the
property values to set
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterAnimation object. The object is
owned by the #ClutterActor and should not be unreferenced with
g_object_unref()

</return>
</function>

<function name="clutter_timeline_get_direction">
<description>
Retrieves the direction of the timeline set with
clutter_timeline_set_direction().

Since: 0.6

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the direction of the timeline

</return>
</function>

<function name="clutter_text_get_password_char">
<description>
Retrieves the character to use in place of the actual text
as set by clutter_text_set_password_char().

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> a Unicode character or 0 if the password
character is not set

</return>
</function>

<function name="clutter_get_option_group_without_init">
<description>
Returns a #GOptionGroup for the command line arguments recognized
by Clutter. You should add this group to your #GOptionContext with
g_option_context_add_group(), if you are using g_option_context_parse()
to parse your commandline arguments. Unlike clutter_get_option_group(),
calling g_option_context_parse() with the #GOptionGroup returned by this
function requires a subsequent explicit call to clutter_init(); use this
function when needing to set foreign display connection with
clutter_x11_set_display(), or with gtk_clutter_init().

Since: 0.8.2

</description>
<parameters>
</parameters>
<return> a #GOptionGroup for the commandline arguments
recognized by Clutter

</return>
</function>

<function name="clutter_text_get_font_name">
<description>
Retrieves the font name as set by clutter_text_set_font_name().

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> a string containing the font name. The returned
string is owned by the #ClutterText actor and should not be
modified or freed

</return>
</function>

<function name="clutter_behaviour_ellipse_get_direction">
<description>
Retrieves the #ClutterRotateDirection used by the ellipse behaviour.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
</parameters>
<return> the rotation direction

</return>
</function>

<function name="clutter_x11_texture_pixmap_set_pixmap">
<description>
Sets the X Pixmap to which the texture should be bound.

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> the texture to bind
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> the X Pixmap to which the texture should be bound
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_init_with_args">
<description>
This function does the same work as clutter_init(). Additionally,
it allows you to add your own command line options, and it
automatically generates nicely formatted &lt;option&gt;--help&lt;/option&gt;
output. Note that your program will be terminated after writing
out the help output. Also note that, in case of error, the
error message will be placed inside @error instead of being
printed on the display.

Since: 0.2

</description>
<parameters>
<parameter name="argc">
<parameter_description> a pointer to the number of command line arguments
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> a pointer to the array
of command line arguments
</parameter_description>
</parameter>
<parameter name="parameter_string">
<parameter_description> a string which is displayed in the
first line of &lt;option&gt;--help&lt;/option&gt; output, after
&lt;literal&gt;&lt;replaceable&gt;programname&lt;/replaceable&gt; [OPTION...]&lt;/literal&gt;
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> a %NULL terminated array of #GOptionEntry&lt;!-- --&gt;s
describing the options of your program
</parameter_description>
</parameter>
<parameter name="translation_domain">
<parameter_description> a translation domain to use for
translating the &lt;option&gt;--help&lt;/option&gt; output for the options in
@entries with gettext(), or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> %CLUTTER_INIT_SUCCESS if Clutter has been successfully
initialised, or other values or #ClutterInitError in case of
error.

</return>
</function>

<function name="clutter_text_set_single_line_mode">
<description>
Sets whether a #ClutterText actor should be in single line mode
or not.

A text actor in single line mode will not wrap text and will clip
the the visible area to the predefined size. The contents of the
text actor will scroll to display the end of the text if its length
is bigger than the allocated width.

When setting the single line mode the #ClutterText:activatable
property is also set as a side effect. Instead of entering a new
line character, the text actor will emit the #ClutterText::activate
signal.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="single_line">
<parameter_description> whether to enable single line mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_remove">
<description>
Removes @actor from the list of #ClutterActor&lt;!-- --&gt;s to which
@behave applies.  This function removes a reference on the actor.

Since: 0.2

</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_unrealize">
<description>
Frees up any underlying graphics resources needed by the actor to
be displayed.

Unrealization means the actor is now independent of any specific
rendering context (is not attached to a specific toplevel stage).

Because mapped actors must be realized, actors may not be
unrealized if they are mapped. This function hides the actor to be
sure it isn't mapped, an application-visible side effect that you
may not be expecting.

This function should not really be in the public API, because
there isn't a good reason to call it. ClutterActor will already
unrealize things for you when it's important to do so.

If you were using clutter_actor_unrealize() in a dispose
implementation, then don't, just chain up to ClutterActor's
dispose.

If you were using clutter_actor_unrealize() to implement
unrealizing children of your container, then don't, ClutterActor
will already take care of that.

If you were using clutter_actor_unrealize() to re-realize to
create your resources in a different way, then use
_clutter_actor_rerealize() (inside Clutter) or just call your
code that recreates your resources directly (outside Clutter).

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_push_internal">
<description>
Should be used by actors implementing the #ClutterContainer and with
internal children added through clutter_actor_set_parent(), for instance:

|[
static void
my_actor_init (MyActor *self)
{
self-&gt;priv = SELF_ACTOR_GET_PRIVATE (self);

clutter_actor_push_internal (CLUTTER_ACTOR (self));

/ * calling clutter_actor_set_parent() now will result in
* the internal flag being set on a child of MyActor
* /

/ * internal child: a background texture * /
self-&gt;priv-&gt;background_tex = clutter_texture_new ();
clutter_actor_set_parent (self-&gt;priv-&gt;background_tex,
CLUTTER_ACTOR (self));

/ * internal child: a label * /
self-&gt;priv-&gt;label = clutter_text_new ();
clutter_actor_set_parent (self-&gt;priv-&gt;label,
CLUTTER_ACTOR (self));

clutter_actor_pop_internal (CLUTTER_ACTOR (self));

/ * calling clutter_actor_set_parent() now will not result in
* the internal flag being set on a child of MyActor
* /
}
]|

This function will be used by Clutter to toggle an &quot;internal child&quot;
flag whenever clutter_actor_set_parent() is called; internal children
are handled differently by Clutter, specifically when destroying their
parent.

Call clutter_actor_pop_internal() when you finished adding internal
children.

Nested calls to clutter_actor_push_internal() are allowed, but each
one must by followed by a clutter_actor_pop_internal() call.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_units_to_pixels">
<description>
Converts a value in #ClutterUnits to pixels

Since: 1.0

</description>
<parameters>
<parameter name="units">
<parameter_description> units to convert
</parameter_description>
</parameter>
</parameters>
<return> the value in pixels

</return>
</function>

<function name="json_array_add_array_element">
<description>
Conveniently adds an array into @array. The @array takes ownership
of the newly added #JsonArray

See also: json_array_add_element(), json_node_take_array()

Since: 0.8

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_util_next_p2">
<description>
Calculates the nearest power of two, greater than or equal to @a.

Deprecated: 1.2

</description>
<parameters>
<parameter name="a">
<parameter_description> Value to get the next power
</parameter_description>
</parameter>
</parameters>
<return> The nearest power of two, greater or equal to @a.

</return>
</function>

<function name="clutter_box_layout_pack">
<description>
Packs @actor inside the #ClutterContainer associated to @layout
and sets the layout properties

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> whether the @actor should expand
</parameter_description>
</parameter>
<parameter name="x_fill">
<parameter_description> whether the @actor should fill horizontally
</parameter_description>
</parameter>
<parameter name="y_fill">
<parameter_description> whether the @actor should fill vertically
</parameter_description>
</parameter>
<parameter name="x_align">
<parameter_description> the horizontal alignment policy for @actor
</parameter_description>
</parameter>
<parameter name="y_align">
<parameter_description> the vertical alignment policy for @actor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_array_add_object_element">
<description>
Conveniently adds an object into @array. The @array takes ownership
of the newly added #JsonObject

See also: json_array_add_element(), json_node_take_object()

Since: 0.8

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_object_get_array_member">
<description>
Convenience function that retrieves the array
stored in @member_name of @object

See also: json_object_get_member()

Since: 0.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
</parameters>
<return> the array inside the object's member

</return>
</function>

<function name="clutter_behaviour_apply">
<description>
Applies @behave to @actor.  This function adds a reference on
the actor.

Since: 0.2

</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_disable_event_retrieval">
<description>
Disables retrieval of X events in the main loop. Use to create event-less
canvas or in conjunction with clutter_x11_handle_event.

This function can only be called before calling clutter_init().

Since: 0.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_opacity">
<description>
Sets the actor's opacity, with zero being completely transparent and
255 (0xff) being fully opaque.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="opacity">
<parameter_description> New opacity value for the actor.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_paint_opacity">
<description>
Retrieves the absolute opacity of the actor, as it appears on the stage.

This function traverses the hierarchy chain and composites the opacity of
the actor with that of its parents.

This function is intended for subclasses to use in the paint virtual
function, to paint themselves with the correct opacity.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> The actor opacity value.

</return>
</function>

<function name="clutter_text_new_with_text">
<description>
Creates a new #ClutterText actor, using @font_name as the font
description; @text will be used to set the contents of the actor.

This function is equivalent to calling clutter_text_new(),
clutter_text_set_font_name(), and clutter_text_set_text().

Since: 1.0

</description>
<parameters>
<parameter name="font_name">
<parameter_description> a string with a font description
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the contents of the actor
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterText actor

</return>
</function>

<function name="clutter_input_device_get_pointer_actor">
<description>
Retrieves the #ClutterActor underneath the pointer of @device

Since: 1.2

</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice of type %CLUTTER_POINTER_DEVICE
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #ClutterActor or %NULL

</return>
</function>

<function name="json_node_get_value_type">
<description>
Returns the #GType of the payload of the node.

Since: 0.4

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> a #GType for the payload.

</return>
</function>

<function name="clutter_actor_raise_top">
<description>
Raises @self to the top.

This function calls clutter_actor_raise() internally.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_vertex_free">
<description>
Frees a #ClutterVertex allocated using clutter_vertex_copy()

Since: 1.0

</description>
<parameters>
<parameter name="vertex">
<parameter_description> a #ClutterVertex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_score_set_loop">
<description>
Sets whether @score should loop. A looping #ClutterScore will start
from its initial state after the ::complete signal has been fired.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
<parameter name="loop">
<parameter_description> %TRUE for enable looping
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_get_initial_value">
<description>
Retrieves the initial value of @interval and copies
it into @value.

The passed #GValue must be initialized to the value held by
the #ClutterInterval.

Since: 1.0

</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_flow_layout_set_orientation">
<description>
Sets the orientation of the flow layout

The orientation controls the direction used to allocate
the children: either horizontally or vertically. The
orientation also controls the direction of the overflowing

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="orientation">
<parameter_description> the orientation of the layout
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_anchor_point">
<description>
Gets the current anchor point of the @actor in pixels.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="anchor_x">
<parameter_description> return location for the X coordinate of the anchor point
</parameter_description>
</parameter>
<parameter name="anchor_y">
<parameter_description> return location for the Y coordinate of the anchor point
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_box_layout_set_alignment">
<description>
Sets the horizontal and vertical alignment policies for @actor
inside @layout

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @layout
</parameter_description>
</parameter>
<parameter name="x_align">
<parameter_description> Horizontal alignment policy for @actor
</parameter_description>
</parameter>
<parameter name="y_align">
<parameter_description> Vertical alignment policy for @actor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_grab_keyboard">
<description>
Grabs keyboard events, after the grab is done keyboard
events (#ClutterActor::key-press-event and #ClutterActor::key-release-event)
are delivered to this actor directly. The source set in the event will be
the actor that would have received the event if the keyboard grab was not
in effect.

Like pointer grabs, keyboard grabs should only be used as a last
resource.

See also clutter_stage_set_key_focus() and clutter_actor_grab_key_focus()
to perform a &quot;soft&quot; key grab and assign key focus to a specific actor.

Since: 0.6

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_get_filter_set">
<description>
Returns whether the @model has a filter in place, set
using clutter_model_set_filter()

Since: 1.0

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a filter is set

</return>
</function>

<function name="clutter_timeline_start">
<description>
Starts the #ClutterTimeline playing.

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_object_get_double_member">
<description>
Convenience function that retrieves the floating point value
stored in @member_name of @object

See also: json_object_get_member()

Since: 0.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
</parameters>
<return> the floating point value of the object's member

</return>
</function>

<function name="clutter_media_set_subtitle_uri">
<description>
Sets the location of a subtitle file to display while playing @media.

Since: 1.2

</description>
<parameters>
<parameter name="media">
<parameter_description> a #ClutterMedia
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the URI of a subtitle file
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_get_actor_at_pos">
<description>
Checks the scene at the coordinates @x and @y and returns a pointer
to the #ClutterActor at those coordinates.

By using @pick_mode it is possible to control which actors will be
painted and thus available.


</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="pick_mode">
<parameter_description> how the scene graph should be painted
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate to check
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate to check
</parameter_description>
</parameter>
</parameters>
<return> the actor at the specified coordinates,
if any
</return>
</function>

<function name="clutter_animation_get_object">
<description>
Retrieves the #GObject attached to @animation.

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
</parameters>
<return> a #GObject

</return>
</function>

<function name="clutter_timeline_set_direction">
<description>
Sets the direction of @timeline, either %CLUTTER_TIMELINE_FORWARD or
%CLUTTER_TIMELINE_BACKWARD.

Since: 0.6

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the direction of the timeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_from_vertices">
<description>
Calculates the bounding box represented by the four vertices; for details
of the vertex array see clutter_actor_get_abs_allocation_vertices().

Since: 1.0

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="verts">
<parameter_description> array of four #ClutterVertex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_ellipsize">
<description>
Sets the mode used to ellipsize (add an ellipsis: &quot;...&quot;) to the
text if there is not enough space to render the entire contents
of a #ClutterText actor

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> a #PangoEllipsizeMode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_set_interval">
<description>
Variable arguments wrapper for clutter_interval_set_initial_value()
and clutter_interval_set_final_value() that avoids using the
#GValue arguments:

|[
clutter_interval_set_interval (interval, 0, 50);
clutter_interval_set_interval (interval, 1.0, 0.0);
clutter_interval_set_interval (interval, FALSE, TRUE);
]|

This function is meant for the convenience of the C API; bindings
should reimplement this function using the #GValue-based API.

Since: 1.0

</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the initial and final values of the interval
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_key_focus">
<description>
Sets the key focus on @actor. An actor with key focus will receive
all the key events. If @actor is %NULL, the stage will receive
focus.

Since: 0.6

</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the actor to set key focus to, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_set_filter">
<description>
Filters the @model using the given filtering function.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #ClutterModelFilterFunc, or #NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @func, or #NULL
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> destroy notifier of @user_data, or #NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_new">
<description>
Creates a behaviour that drives actors along an elliptical path with
given center, width and height; the movement starts at @start
degrees (with 0 corresponding to 12 o'clock) and ends at @end
degrees. Angles greated than 360 degrees get clamped to the canonical
interval &lt;0, 360); if @start is equal to @end, the behaviour will
rotate by exacly 360 degrees.

Since: 0.4

</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha, or %NULL
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinace of the center
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordiance of the center
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the ellipse
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the ellipse
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> #ClutterRotateDirection of rotation
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> angle in degrees at which movement starts, between 0 and 360
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> angle in degrees at which movement ends, between 0 and 360
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterBehaviourEllipse

</return>
</function>

<function name="clutter_stage_ensure_redraw">
<description>
Ensures that @stage is redrawn

This function should not be called by applications: it is
used when embedding a #ClutterStage into a toolkit with
another windowing system, like GTK+.

Since: 1.0

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_array_get_elements">
<description>
Gets the elements of a #JsonArray as a list of #JsonNode&lt;!-- --&gt;s.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
</parameters>
<return> a #GList containing the elements of the array. The
contents of the list are owned by the array and should never be
modified or freed. Use g_list_free() on the returned list when
done using it
</return>
</function>

<function name="json_array_get_double_element">
<description>
Conveniently retrieves the floating point value of the element at
@index_ inside @array

See also: json_array_get_element(), json_node_get_double()

Since: 0.8

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the element to retrieve
</parameter_description>
</parameter>
</parameters>
<return> the floating point value

</return>
</function>

<function name="clutter_actor_set_clip">
<description>
Sets clip area for @self. The clip area is always computed from the
upper left corner of the actor, even if the anchor point is set
otherwise.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="xoff">
<parameter_description> X offset of the clip rectangle
</parameter_description>
</parameter>
<parameter name="yoff">
<parameter_description> Y offset of the clip rectangle
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of the clip rectangle
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of the clip rectangle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_hide">
<description>
Flags an actor to be hidden. A hidden actor will not be
rendered on the stage.

Actors are visible by default.

If this function is called on an actor without a parent, the
#ClutterActor:show-on-set-parent property will be set to %FALSE
as a side-effect.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_threads_remove_repaint_func">
<description>
Removes the repaint function with @handle_id as its id

Since: 1.0

</description>
<parameters>
<parameter name="handle_id">
<parameter_description> an unsigned integer greater than zero
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_binding_pool_find_action">
<description>
Retrieves the name of the action matching the given key symbol
and modifiers bitmask.

Since: 1.0

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="key_val">
<parameter_description> a key symbol
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> a bitmask for the modifiers
</parameter_description>
</parameter>
</parameters>
<return> the name of the action, if found, or %NULL. The
returned string is owned by the binding pool and should never
be modified or freed

</return>
</function>

<function name="clutter_alpha_get_mode">
<description>
Retrieves the #ClutterAnimationMode used by @alpha.

Since: 1.0

</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
</parameters>
<return> the animation mode

</return>
</function>

<function name="clutter_path_new_with_description">
<description>
Creates a new #ClutterPath instance with the nodes described in
@desc. See clutter_path_add_string() for details of the format of
the string.

The object has a floating reference so if you add it to a
#ClutterBehaviourPath then you do not need to unref it.

Since: 1.0

</description>
<parameters>
<parameter name="desc">
<parameter_description> a string describing the path
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterPath

</return>
</function>

<function name="clutter_behaviour_ellipse_set_tilt">
<description>
Sets the angles at which the ellipse should be tilted around it's center.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="angle_tilt_x">
<parameter_description> tilt of the elipse around the center in X axis in degrees.
</parameter_description>
</parameter>
<parameter name="angle_tilt_y">
<parameter_description> tilt of the elipse around the center in Y axis in degrees.
</parameter_description>
</parameter>
<parameter name="angle_tilt_z">
<parameter_description> tilt of the elipse around the center in Z axis in degrees.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_box_layout_get_use_animations">
<description>
Retrieves whether @layout should animate changes in the layout properties

Since clutter_box_layout_set_use_animations()

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the animations should be used, %FALSE otherwise

</return>
</function>

<function name="clutter_actor_lower_bottom">
<description>
Lowers @self to the bottom.

This function calls clutter_actor_lower() internally.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_delete_selection">
<description>
Deletes the currently selected text

This function is only useful in subclasses of #ClutterText

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if text was deleted or if the text actor
is empty, and %FALSE otherwise

</return>
</function>

<function name="clutter_stage_get_throttle_motion_events">
<description>
Retrieves the value set with clutter_stage_set_throttle_motion_events()

Since: 1.0

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the motion events are being throttled,
and %FALSE otherwise

</return>
</function>

<function name="clutter_text_set_activatable">
<description>
Sets whether a #ClutterText actor should be activatable.

An activatable #ClutterText actor will emit the #ClutterText::activate
signal whenever the 'Enter' (or 'Return') key is pressed; if it is not
activatable, a new line will be appended to the current content.

An activatable #ClutterText must also be set as editable using
clutter_text_set_editable().

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="activatable">
<parameter_description> whether the #ClutterText actor should be activatable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_add_node">
<description>
Adds @node to the end of the path.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> a #ClutterPathNode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_set_double">
<description>
Sets @value as the double content of the @node, replacing any existing
content.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a double value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_add_actor">
<description>
Adds a #ClutterActor to @container. This function will emit the
&quot;actor-added&quot; signal. The actor should be parented to
@container. You cannot add a #ClutterActor to more than one
#ClutterContainer.

Since: 0.4

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the first #ClutterActor to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_value_get_shader_float">
<description>
Retrieves the list of floating point values stored inside
the passed #GValue. @value must have been initialized with
%CLUTTER_TYPE_SHADER_FLOAT.

Since: 0.8

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the number of returned floating
point values, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the pointer to a list of floating point values.
The returned value is owned by the #GValue and should never
be modified or freed.

</return>
</function>

<function name="clutter_actor_set_fixed_position_set">
<description>
Sets whether an actor has a fixed position set (and will thus be
unaffected by any layout manager).

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="is_set">
<parameter_description> whether to use fixed position
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_set_names">
<description>
Assigns a name to the columns of a #ClutterModel.

This function is meant primarily for #GObjects that inherit from
#ClutterModel, and should only be used when contructing a #ClutterModel.
It will not work after the initial creation of the #ClutterModel.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> the number of column names
</parameter_description>
</parameter>
<parameter name="names">
<parameter_description> an array of strings
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_events_pending">
<description>
Checks if events are pending in the event queue.

Since: 0.4

</description>
<parameters>
</parameters>
<return> TRUE if there are pending events, FALSE otherwise.

</return>
</function>

<function name="clutter_layout_manager_get_child_meta">
<description>
Retrieves the #ClutterLayoutMeta that the layout @manager associated
to the @actor child of @container, eventually by creating one if the
#ClutterLayoutManager supports layout properties

Since: 1.0

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> a #ClutterContainer using @manager
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @container
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterLayoutMeta, or %NULL if the #ClutterLayoutManager
does not have layout properties

</return>
</function>

<function name="clutter_behaviour_opacity_set_bounds">
<description>
Sets the initial and final levels of the opacity applied by @behaviour
on each actor it controls.

Since: 0.6

</description>
<parameters>
<parameter name="behaviour">
<parameter_description> a #ClutterBehaviourOpacity
</parameter_description>
</parameter>
<parameter name="opacity_start">
<parameter_description> minimum level of opacity
</parameter_description>
</parameter>
<parameter name="opacity_end">
<parameter_description> maximum level of opacity
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_get_loop">
<description>
Gets whether @timeline is looping


</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the timeline is looping
</return>
</function>

<function name="clutter_actor_set_flags">
<description>
Sets @flags on @self

This function will emit notifications for the changed properties

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the flags to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_scale_get_bounds">
<description>
Retrieves the bounds used by scale behaviour.

Since: 0.4

</description>
<parameters>
<parameter name="scale">
<parameter_description> a #ClutterBehaviourScale
</parameter_description>
</parameter>
<parameter name="x_scale_start">
<parameter_description> return location for the initial scale factor on the X
axis, or %NULL
</parameter_description>
</parameter>
<parameter name="y_scale_start">
<parameter_description> return location for the initial scale factor on the Y
axis, or %NULL
</parameter_description>
</parameter>
<parameter name="x_scale_end">
<parameter_description> return location for the final scale factor on the X axis,
or %NULL
</parameter_description>
</parameter>
<parameter name="y_scale_end">
<parameter_description> return location for the final scale factor on the Y axis,
or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_input_device_get_device_id">
<description>
Retrieves the unique identifier of @device

Since: 1.0

</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return> the identifier of the device

</return>
</function>

<function name="clutter_redraw">
<description>
Forces a redraw of the entire stage. Applications should never use this
function, but queue a redraw using clutter_actor_queue_redraw().

This function should only be used by libraries integrating Clutter from
within another toolkit.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="cogl_pango_render_layout_line">
<description>
Renders @line at the given coordinates using the given color.

Since: 1.0

</description>
<parameters>
<parameter name="line">
<parameter_description> a #PangoLayoutLine
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate to render the line at
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate to render the line at
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> color to use when rendering the line
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_set_cogl_texture">
<description>
Replaces the underlying COGL texture drawn by this actor with
@cogl_tex. A reference to the texture is taken so if the handle is
no longer needed it should be deref'd with cogl_handle_unref.

This should not be called on an unrealizable texture (one that
isn't inside a stage). (Currently the ClutterTexture
implementation relies on being able to have a GL texture while
unrealized, which means you can get away with it, but it's
not correct and may change in the future.)

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
<parameter name="cogl_tex">
<parameter_description> A CoglHandle for a texture
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_box_get_layout_manager">
<description>
Retrieves the #ClutterLayoutManager instance used by @box

Since: 1.2

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterBox
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterLayoutManager

</return>
</function>

<function name="clutter_win32_get_stage_from_window">
<description>
Gets the stage for a particular window.

Since: 0.8

</description>
<parameters>
<parameter name="hwnd">
<parameter_description> a window handle
</parameter_description>
</parameter>
</parameters>
<return> The stage or NULL if a stage does not exist for the
window.

</return>
</function>

<function name="clutter_path_remove_node">
<description>
Removes the node at the given offset from the path.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> index of the node to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_alpha_new_with_func">
<description>
Creates a new #ClutterAlpha instances and sets the timeline
and the alpha function.

This function will not register @func as a global alpha function.

See also clutter_alpha_set_timeline() and clutter_alpha_set_func().

Since: 1.0

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #ClutterAlphaFunc
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> function to call when removing the alpha function, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterAlpha

</return>
</function>

<function name="clutter_units_from_pixels">
<description>
Stores a value in pixels inside @units

Since: 1.0

</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
<parameter name="px">
<parameter_description> pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_preferred_size">
<description>
Computes the preferred minimum and natural size of an actor, taking into
account the actor's geometry management (either height-for-width
or width-for-height).

The width and height used to compute the preferred height and preferred
width are the actor's natural ones.

If you need to control the height for the preferred width, or the width for
the preferred height, you should use clutter_actor_get_preferred_width()
and clutter_actor_get_preferred_height(), and check the actor's preferred
geometry management using the #ClutterActor:request-mode property.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="min_width_p">
<parameter_description> return location for the minimum
width, or %NULL
</parameter_description>
</parameter>
<parameter name="min_height_p">
<parameter_description> return location for the minimum
height, or %NULL
</parameter_description>
</parameter>
<parameter name="natural_width_p">
<parameter_description> return location for the natural
width, or %NULL
</parameter_description>
</parameter>
<parameter name="natural_height_p">
<parameter_description> return location for the natural
height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_flow_layout_get_column_width">
<description>
Retrieves the minimum and maximum column widths

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="min_width">
<parameter_description> return location for the minimum column width, or %NULL
</parameter_description>
</parameter>
<parameter name="max_width">
<parameter_description> return location for the maximum column width, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_get_root_window">
<description>
Retrieves the root window.

Since: 0.6

</description>
<parameters>
</parameters>
<return> the id of the root window

</return>
</function>

<function name="clutter_path_add_line_to">
<description>
Adds a %CLUTTER_PATH_LINE_TO type node to the path. This causes the
actor to move to the new coordinates in a straight line.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_selection_color">
<description>
Retrieves the color of the selection of a #ClutterText actor.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_rotate_get_bounds">
<description>
Retrieves the rotation boundaries of the rotate behaviour.

Since: 0.4

</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
<parameter name="angle_start">
<parameter_description> return value for the initial angle
</parameter_description>
</parameter>
<parameter name="angle_end">
<parameter_description> return value for the final angle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_array_get_object_element">
<description>
Conveniently retrieves the object from the element at @index_
inside @array

See also: json_array_get_element(), json_node_get_object()

Since: 0.8

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the element to retrieve
</parameter_description>
</parameter>
</parameters>
<return> the object

</return>
</function>

<function name="clutter_stage_is_default">
<description>
Checks if @stage is the default stage, or an instance created using
clutter_stage_new() but internally using the same implementation.

Since: 0.8

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the passed stage is the default one

</return>
</function>

<function name="clutter_timeline_is_playing">
<description>
Queries state of a #ClutterTimeline.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if timeline is currently playing
</return>
</function>

<function name="clutter_color_darken">
<description>
Darkens @color by a fixed amount, and saves the changed color
in @result.

</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> return location for the darker color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_parent">
<description>
Retrieves the parent of @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> The #ClutterActor parent, or %NULL
if no parent is set
</return>
</function>

<function name="clutter_stage_set_use_alpha">
<description>
Sets whether the @stage should honour the #ClutterActor:opacity and
the alpha channel of the #ClutterStage:color

Since: 1.2

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="use_alpha">
<parameter_description> whether the stage should honour the opacity or the
alpha channel of the stage color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_free">
<description>
Frees a #ClutterActorBox allocated using clutter_actor_box_new()
or clutter_actor_box_copy()

Since: 1.0

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_get_color">
<description>
Retrieves the stage color.

</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_move_anchor_point">
<description>
Sets an anchor point for the actor, and adjusts the actor postion so that
the relative position of the actor toward its parent remains the same.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="anchor_x">
<parameter_description> X coordinate of the anchor point
</parameter_description>
</parameter>
<parameter name="anchor_y">
<parameter_description> Y coordinate of the anchor point
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_next">
<description>
Updates the @iter to point at the next position in the model.
The model implementation should take into account the presence of
a filter function.

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> The passed iterator, updated to point at the next
row in the model.

</return>
</function>

<function name="clutter_model_filter_row">
<description>
Checks whether @row should be filtered or not using the
filtering function set on @model.

This function should be used only by subclasses of #ClutterModel.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> the row to filter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the row should be displayed,
%FALSE otherwise

</return>
</function>

<function name="clutter_path_get_node">
<description>
Retrieves the node of the path indexed by @index.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the node number to retrieve
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> a location to store a copy of the node
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_texture_pixmap_new">
<description>
Creates a new #ClutterX11TexturePixmap which can be used to display the
contents of an X11 Pixmap inside a Clutter scene graph

Since: 0.8

</description>
<parameters>
</parameters>
<return> A new #ClutterX11TexturePixmap

</return>
</function>

<function name="clutter_actor_unset_flags">
<description>
Unsets @flags on @self

This function will emit notifications for the changed properties

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the flags to unset
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_new">
<description>
Creates a new #ClutterText actor. This actor can be used to
display and edit text.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created #ClutterText actor

</return>
</function>

<function name="json_object_set_string_member">
<description>
Convenience function for setting a string @value of
@member_name inside @object.

See also: json_object_set_member()

Since: 0.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the member
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_get_script_id">
<description>
Retrieves the Clutter script id, if any.

Since: 0.6

</description>
<parameters>
<parameter name="gobject">
<parameter_description> a #GObject
</parameter_description>
</parameter>
</parameters>
<return> the script id, or %NULL if @object was not defined inside
a UI definition file. The returned string is owned by the object and
should never be modified or freed.

</return>
</function>

<function name="clutter_frame_source_add">
<description>
Simple wrapper around clutter_frame_source_add_full().

Since: 0.8

</description>
<parameters>
<parameter name="fps">
<parameter_description> the number of times per second to call the function
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="json_object_add_member">
<description>
Adds a member named @member_name and containing @node into a #JsonObject.
The object will take ownership of the #JsonNode.

This function will return if the @object already contains a member
@member_name.

Deprecated: 0.8: Use json_object_set_member() instead

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> the value of the member
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_justify">
<description>
Retrieves whether the #ClutterText actor should justify its contents
on both margins.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the text should be justified

</return>
</function>

<function name="clutter_actor_queue_relayout">
<description>
Indicates that the actor's size request or other layout-affecting
properties may have changed. This function is used inside #ClutterActor
subclass implementations, not by applications directly.

Queueing a new layout automatically queues a redraw as well.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_is_in_clone_paint">
<description>
Checks whether @self is being currently painted by a #ClutterClone

This function is useful only inside the ::paint virtual function
implementations or within handlers for the #ClutterActor::paint
signal

This function should not be used by applications

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterActor is currently being painted
by a #ClutterClone, and %FALSE otherwise

</return>
</function>

<function name="clutter_box_layout_get_vertical">
<description>
Retrieves the orientation of the @layout as set using the
clutter_box_layout_set_vertical() function

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterBoxLayout is arranging its children
vertically, and %FALSE otherwise

</return>
</function>

<function name="clutter_behaviour_scale_set_bounds">
<description>
Sets the bounds used by scale behaviour.

Since: 0.6

</description>
<parameters>
<parameter name="scale">
<parameter_description> a #ClutterBehaviourScale
</parameter_description>
</parameter>
<parameter name="x_scale_start">
<parameter_description> initial scale factor on the X axis
</parameter_description>
</parameter>
<parameter name="y_scale_start">
<parameter_description> initial scale factor on the Y axis
</parameter_description>
</parameter>
<parameter name="x_scale_end">
<parameter_description> final scale factor on the X axis
</parameter_description>
</parameter>
<parameter name="y_scale_end">
<parameter_description> final scale factor on the Y axis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_object_get_boolean_member">
<description>
Convenience function that retrieves the boolean value
stored in @member_name of @object

See also: json_object_get_member()

Since: 0.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
</parameters>
<return> the boolean value of the object's member

</return>
</function>

<function name="clutter_actor_box_get_origin">
<description>
Retrieves the origin of @box

Since: 1.0

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_clone_get_source">
<description>
Retrieves the source #ClutterActor being cloned by @clone

Since: 1.0

</description>
<parameters>
<parameter name="clone">
<parameter_description> a #ClutterClone
</parameter_description>
</parameter>
</parameters>
<return> the actor source for the clone

</return>
</function>

<function name="clutter_threads_add_frame_source">
<description>
Simple wrapper around clutter_threads_add_frame_source_full().

Since: 0.8

</description>
<parameters>
<parameter name="fps">
<parameter_description> the number of times per second to call the function
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="clutter_path_get_nodes">
<description>
Returns a #GSList of #ClutterPathNode&lt;!-- --&gt;s. The list should be
freed with g_slist_free(). The nodes are owned by the path and
should not be freed. Altering the path may cause the nodes in the
list to become invalid so you should copy them if you want to keep
the list.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
</parameters>
<return> a list of nodes in the path.

</return>
</function>

<function name="json_array_get_int_element">
<description>
Conveniently retrieves the integer value of the element at @index_
inside @array

See also: json_array_get_element(), json_node_get_int()

Since: 0.8

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the element to retrieve
</parameter_description>
</parameter>
</parameters>
<return> the integer value

</return>
</function>

<function name="clutter_actor_get_paint_visibility">
<description>
Retrieves the 'paint' visibility of an actor recursively checking for non
visible parents.

This is by definition the same as CLUTTER_ACTOR_IS_MAPPED().

Since: 0.8.4

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the actor is visibile and will be painted.

</return>
</function>

<function name="clutter_cairo_set_source_color">
<description>
Utility function for setting the source color of @cr using
a #ClutterColor.

Since: 1.0

</description>
<parameters>
<parameter name="cr">
<parameter_description> a Cairo context
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_x">
<description>
Retrieves the X coordinate of a #ClutterActor.

This function tries to &quot;do what you mean&quot;, by returning the
correct value depending on the actor's state.

If the actor has a valid allocation, this function will return
the X coordinate of the origin of the allocation box.

If the actor has any fixed coordinate set using clutter_actor_set_x(),
clutter_actor_set_position() or clutter_actor_set_geometry(), this
function will return that coordinate.

If both the allocation and a fixed position are missing, this function
will return 0.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the X coordinate, in pixels, ignoring any
transformation (i.e. scaling, rotation)
</return>
</function>

<function name="clutter_actor_get_y">
<description>
Retrieves the Y coordinate of a #ClutterActor.

This function tries to &quot;do what you mean&quot;, by returning the
correct value depending on the actor's state.

If the actor has a valid allocation, this function will return
the Y coordinate of the origin of the allocation box.

If the actor has any fixed coordinate set using clutter_actor_set_y(),
clutter_actor_set_position() or clutter_actor_set_geometry(), this
function will return that coordinate.

If both the allocation and a fixed position are missing, this function
will return 0.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the Y coordinate, in pixels, ignoring any
transformation (i.e. scaling, rotation)
</return>
</function>

<function name="json_node_get_boolean">
<description>
Gets the boolean value stored inside a #JsonNode


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
</parameters>
<return> a boolean value.
</return>
</function>

<function name="clutter_interval_register_progress_func">
<description>
Sets the progress function for a given @value_type, like:

|[
clutter_interval_register_progress_func (MY_TYPE_FOO,
my_foo_progress);
]|

Whenever a #ClutterInterval instance using the default
#ClutterInterval::compute_value implementation is set as an
interval between two #GValue of type @value_type, it will call
@func to establish the value depending on the given progress,
for instance:

|[
static gboolean
my_int_progress (const GValue *a,
const GValue *b,
gdouble       progress,
GValue       *retval)
{
gint ia = g_value_get_int (a);
gint ib = g_value_get_int (b);
gint res = factor * (ib - ia) + ia;

g_value_set_int (retval, res);

return TRUE;
}

clutter_interval_register_progress_func (G_TYPE_INT, my_int_progress);
]|

To unset a previously set progress function of a #GType, pass %NULL
for @func.

Since: 1.0

</description>
<parameters>
<parameter name="value_type">
<parameter_description> a #GType
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #ClutterProgressFunc, or %NULL to unset a previously
set progress function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_delete_chars">
<description>
Deletes @n_chars inside a #ClutterText actor, starting from the
current cursor position.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="n_chars">
<parameter_description> the number of characters to delete
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_device_manager_peek_devices">
<description>
Lists all currently registered input devices

Since: 1.2

</description>
<parameters>
<parameter name="device_manager">
<parameter_description> a #ClutterDeviceManager
</parameter_description>
</parameter>
</parameters>
<return>
a pointer to the internal list of #ClutterInputDevice objects. The
returned list is owned by the #ClutterDeviceManager and should never
be modified or freed

</return>
</function>

<function name="clutter_actor_has_pointer">
<description>
Checks whether an actor contains the the pointer of a
#ClutterInputDevice

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor contains the pointer, and
%FALSE otherwise

</return>
</function>

<function name="clutter_path_add_rel_curve_to">
<description>
Same as clutter_path_add_curve_to() except the coordinates are
relative to the previous node.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="x_1">
<parameter_description> the x coordinate of the first control point
</parameter_description>
</parameter>
<parameter name="y_1">
<parameter_description> the y coordinate of the first control point
</parameter_description>
</parameter>
<parameter name="x_2">
<parameter_description> the x coordinate of the second control point
</parameter_description>
</parameter>
<parameter name="y_2">
<parameter_description> the y coordinate of the second control point
</parameter_description>
</parameter>
<parameter name="x_3">
<parameter_description> the x coordinate of the third control point
</parameter_description>
</parameter>
<parameter name="y_3">
<parameter_description> the y coordinate of the third control point
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_apply_transform_to_point">
<description>
Transforms @point in coordinates relative to the actor
into screen-relative coordinates with the current actor
transformation (i.e. scale, rotation, etc)

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> A point as #ClutterVertex
</parameter_description>
</parameter>
<parameter name="vertex">
<parameter_description> The translated #ClutterVertex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_alpha_get_alpha">
<description>
Query the current alpha value.

Since: 0.2

</description>
<parameters>
<parameter name="alpha">
<parameter_description> A #ClutterAlpha
</parameter_description>
</parameter>
</parameters>
<return> The current alpha value for the alpha

</return>
</function>

<function name="clutter_actor_box_get_area">
<description>
Retrieves the area of @box

Since: 1.0

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return> the area of a #ClutterActorBox, in pixels

</return>
</function>

<function name="clutter_model_iter_set">
<description>
Sets the value of one or more cells in the row referenced by @iter. The
variable argument list should contain integer column numbers, each column
column number followed by the value to be set. The  list is terminated by a
-1.

For example, to set column 0 with type %G_TYPE_STRING, use:
&lt;informalexample&gt;&lt;programlisting&gt;
clutter_model_iter_set (iter, 0, &quot;foo&quot;, -1);
&lt;/programlisting&gt;&lt;/informalexample&gt;

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of column/return location pairs, terminated by -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_from_hls">
<description>
Converts a color expressed in HLS (hue, luminance and saturation)
values into a #ClutterColor.

</description>
<parameters>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
<parameter name="hue">
<parameter_description> hue value, in the 0 .. 360 range
</parameter_description>
</parameter>
<parameter name="luminance">
<parameter_description> luminance value, in the 0 .. 1 range
</parameter_description>
</parameter>
<parameter name="saturation">
<parameter_description> saturation value, in the 0 .. 1 range
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_color">
<description>
Retrieves the text color as set by clutter_text_set_color().

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_main_level">
<description>
Retrieves the depth of the Clutter mainloop.


</description>
<parameters>
</parameters>
<return> The level of the mainloop.
</return>
</function>

<function name="clutter_script_get_objects">
<description>
Retrieves a list of objects for the given names. After @script, object
names/return location pairs should be listed, with a %NULL pointer
ending the list, like:

&lt;informalexample&gt;&lt;programlisting&gt;
GObject *my_label, *a_button, *main_timeline;

clutter_script_get_objects (script,
&quot;my-label&quot;, &amp;my_label,
&quot;a-button&quot;, &amp;a_button,
&quot;main-timeline&quot;, &amp;main_timeline,
NULL);
&lt;/programlisting&gt;&lt;/informalexample&gt;

Note: This function does not increment the reference count of the
returned objects.

Since: 0.6

</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="first_name">
<parameter_description> the name of the first object to retrieve
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> return location for a #GObject, then additional names, ending
with %NULL
</parameter_description>
</parameter>
</parameters>
<return> the number of objects returned.

</return>
</function>

<function name="clutter_animation_update">
<description>
Updates the @final value of the interval for @property_name

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> name of the property
</parameter_description>
</parameter>
<parameter name="final">
<parameter_description> The final value of the property
</parameter_description>
</parameter>
</parameters>
<return> The animation itself.

</return>
</function>

<function name="clutter_box_get_color">
<description>
Retrieves the background color of @box

If the #ClutterBox:color-set property is set to %FALSE the
returned #ClutterColor is undefined

Since: 1.2

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterBox
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_event">
<description>
This function is used to emit an event on the main stage.

You should rarely need to use this function, except for
synthetised events.

Since: 0.4

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the return value from the signal emission

</return>
</function>

<function name="clutter_model_set_sort">
<description>
Sorts @model using the given sorting function.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column to sort on
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #ClutterModelSortFunc, or #NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @func, or #NULL
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> destroy notifier of @user_data, or #NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_flow_layout_get_row_spacing">
<description>
Retrieves the spacing between rows

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
</parameters>
<return> the spacing between rows of the #ClutterFlowLayout,
in pixels

</return>
</function>

<function name="clutter_actor_set_rotation">
<description>
Sets the rotation angle of @self around the given axis.

The rotation center coordinates used depend on the value of @axis:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;%CLUTTER_X_AXIS requires @y and @z&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;%CLUTTER_Y_AXIS requires @x and @z&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;%CLUTTER_Z_AXIS requires @x and @y&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

The rotation coordinates are relative to the anchor point of the
actor, set using clutter_actor_set_anchor_point(). If no anchor
point is set, the upper left corner is assumed as the origin.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the axis of rotation
</parameter_description>
</parameter>
<parameter name="angle">
<parameter_description> the angle of rotation
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of the rotation center
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of the rotation center
</parameter_description>
</parameter>
<parameter name="z">
<parameter_description> Z coordinate of the rotation center
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_get_sync_size">
<description>
Retrieves the value set with clutter_texture_get_sync_size()

Since: 1.0

</description>
<parameters>
<parameter name="texture">
<parameter_description> a #ClutterTexture
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterTexture should have the same
preferred size of the underlying image data

</return>
</function>

<function name="clutter_value_get_shader_matrix">
<description>
Retrieves a matrix of floating point values stored inside
the passed #GValue. @value must have been initialized with
%CLUTTER_TYPE_SHADER_MATRIX.

Since: 0.8

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the number of returned floating
point values, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the pointer to a matrix
of floating point values. The returned value is owned by the #GValue and
should never be modified or freed.

</return>
</function>

<function name="clutter_text_set_font_description">
<description>
Sets @font_desc as the font description for a #ClutterText

The #PangoFontDescription is copied by the #ClutterText actor
so you can safely call pango_font_description_free() on it after
calling this function.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="font_desc">
<parameter_description> a #PangoFontDescription
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_get_pointer_grab">
<description>
Queries the current pointer grab of clutter.

Since: 0.6

</description>
<parameters>
</parameters>
<return> the actor currently holding the pointer grab, or NULL if there is no grab.

</return>
</function>

<function name="clutter_layout_manager_list_child_properties">
<description>
Retrieves all the #GParamSpec&lt;!-- --&gt;s for the layout properties
stored inside the #ClutterLayoutMeta sub-class used by @manager

Since: 1.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="n_pspecs">
<parameter_description> return location for the number of returned
#GParamSpec&lt;!-- --&gt;s
</parameter_description>
</parameter>
</parameters>
<return> the newly-allocated, %NULL-terminated
array of #GParamSpec&lt;!-- --&gt;s. Use g_free() to free the resources
allocated for the array

</return>
</function>

<function name="clutter_units_copy">
<description>
Copies @units

Since: 1.0

</description>
<parameters>
<parameter name="units">
<parameter_description> the #ClutterUnits to copy
</parameter_description>
</parameter>
</parameters>
<return> the newly created copy of a #ClutterUnits structure.
Use clutter_units_free() to free the allocated resources

</return>
</function>

<function name="clutter_x11_texture_pixmap_set_window">
<description>
Sets up a suitable pixmap for the window, using the composite and damage
extensions if possible, and then calls
clutter_x11_texture_pixmap_set_pixmap().

If you want to display a window in a #ClutterTexture, you probably want
this function, or its older sister, clutter_glx_texture_pixmap_set_window()

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> the texture to bind
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> the X window to which the texture should be bound
</parameter_description>
</parameter>
<parameter name="automatic">
<parameter_description> %TRUE for automatic window updates, %FALSE for manual.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_get_int">
<description>
Gets the integer value stored inside a #JsonNode


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
</parameters>
<return> an integer value.
</return>
</function>

<function name="clutter_behaviour_ellipse_set_center">
<description>
Sets the center of the elliptical path to the point represented by knot.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinace of centre
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinace of centre
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_manager_set_container">
<description>
If the #ClutterLayoutManager sub-class allows it, allow
adding a weak reference of the @container using @manager
from within the layout manager

The layout manager should not increase the reference
count of the @container

Since: 1.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> a #ClutterContainer using @manager
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_box_layout_new">
<description>
Creates a new #ClutterBoxLayout layout manager

Since: 1.2

</description>
<parameters>
</parameters>
<return> the newly created #ClutterBoxLayout

</return>
</function>

<function name="clutter_text_get_font_description">
<description>
Retrieves the #PangoFontDescription used by @self

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> a #PangoFontDescription. The returned value is owned
by the #ClutterText actor and it should not be modified or freed

</return>
</function>

<function name="clutter_x11_get_stage_window">
<description>
Gets the stages X Window.

Since: 0.4

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> An XID for the stage window.

</return>
</function>

<function name="clutter_cairo_texture_get_surface_size">
<description>
Retrieves the surface width and height for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterCairoTexture
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the surface width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the surface height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_get_font_flags">
<description>
Gets the current font flags for rendering text. See
clutter_set_font_flags().

Since: 1.0

</description>
<parameters>
</parameters>
<return> The font flags

</return>
</function>

<function name="clutter_box_set_color">
<description>
Sets (or unsets) the background color for @box

Since: 1.2

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterBox
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the background color, or %NULL to unset
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_ungrab_pointer_for_device">
<description>
Removes an existing grab of the pointer events for device @id.

Since: 0.8

</description>
<parameters>
<parameter name="id">
<parameter_description> a device id
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_queue_redraw">
<description>
Queues a redraw for the passed stage.

&lt;note&gt;Applications should call clutter_actor_queue_redraw() and not
this function.&lt;/note&gt;

&lt;note&gt;This function is just a wrapper for clutter_actor_queue_redraw()
and should probably go away.&lt;/note&gt;

Since: 0.8

</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_object_get_member">
<description>
Retrieves the #JsonNode containing the value of @member_name inside
a #JsonObject.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the JSON object member to access
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the node for the requested object
member, or %NULL
</return>
</function>

<function name="json_array_add_null_element">
<description>
Conveniently adds a null element into @array

See also: json_array_add_element(), %JSON_NODE_NULL

Since: 0.8

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_put">
<description>
Puts a copy of the event on the back of the event queue. The event will
have the %CLUTTER_EVENT_FLAG_SYNTHETIC flag set. If the source is set
event signals will be emitted for this source and capture/bubbling for
its ancestors. If the source is not set it will be generated by picking
or use the actor that currently has keyboard focus

Since: 0.6

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_param_spec_fixed">
<description>
Creates a #GParamSpec for properties using #CoglFixed values

Since: 0.8

</description>
<parameters>
<parameter name="name">
<parameter_description> name of the property
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> short name
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description (can be translatable)
</parameter_description>
</parameter>
<parameter name="minimum">
<parameter_description> lower boundary
</parameter_description>
</parameter>
<parameter name="maximum">
<parameter_description> higher boundary
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the param spec
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GParamSpec

</return>
</function>

<function name="clutter_color_equal">
<description>
Compares two #ClutterColor&lt;!-- --&gt;s and checks if they are the same.

This function can be passed to g_hash_table_new() as the @key_equal_func
parameter, when using #ClutterColor&lt;!-- --&gt;s as keys in a #GHashTable.

Since: 0.2

</description>
<parameters>
<parameter name="v1">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="v2">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two colors are the same.

</return>
</function>

<function name="clutter_shader_set_uniform">
<description>
Sets a user configurable variable in the GLSL shader programs attached to
a #ClutterShader.

Since: 1.0

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of uniform in GLSL shader program to set.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #ClutterShaderFloat, #ClutterShaderInt or #ClutterShaderMatrix
#GValue.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_rotate_get_axis">
<description>
Retrieves the #ClutterRotateAxis used by the rotate behaviour.

Since: 0.4

</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
</parameters>
<return> the rotation axis

</return>
</function>

<function name="clutter_actor_get_request_mode">
<description>
Retrieves the geometry request mode of @self

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the request mode for the actor

</return>
</function>

<function name="clutter_glx_texture_pixmap_new">
<description>
Creates a new, empty #ClutterGLXTexturePixmap

Since: 0.8

</description>
<parameters>
</parameters>
<return> A new #ClutterGLXTexturePixmap

</return>
</function>

<function name="clutter_rectangle_new_with_color">
<description>
Creates a new #ClutterActor with a rectangular shape
and of the given @color.


</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> a new #ClutterActor
</return>
</function>

<function name="clutter_win32_set_stage_foreign">
<description>
Target the #ClutterStage to use an existing external window handle.

Since: 0.8

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="hwnd">
<parameter_description> an existing window handle
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if foreign window is valid

</return>
</function>

<function name="clutter_container_remove">
<description>
Removes a %NULL terminated list of #ClutterActor&lt;!-- --&gt;s from
@container. Each actor should be unparented, so if you want to keep it
around you must hold a reference to it yourself, using g_object_ref().
Each time an actor is removed, the &quot;actor-removed&quot; signal is
emitted by @container.

Since: 0.4

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="first_actor">
<parameter_description> first #ClutterActor to remove
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a %NULL-terminated list of actors to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_alpha_set_func">
<description>
Sets the #ClutterAlphaFunc function used to compute
the alpha value at each frame of the #ClutterTimeline
bound to @alpha.

This function will not register @func as a global alpha function.

Since: 0.2

</description>
<parameters>
<parameter name="alpha">
<parameter_description> A #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A #ClutterAlphaFunc
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to be passed to the alpha function, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> notify function used when disposing the alpha function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_get_size">
<description>
Retrieves the size of @box

Since: 1.0

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_path_new_with_knots">
<description>
Creates a new path behaviour that will make the actors visit all of
the given knots in order with straight lines in between.

A path will be created where the first knot is used in a
%CLUTTER_PATH_MOVE_TO and the subsequent knots are used in
%CLUTTER_PATH_LINE_TO&lt;!-- --&gt;s.

Since: 1.0

</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="knots">
<parameter_description> an array of #ClutterKnot&lt;!-- --&gt;s
</parameter_description>
</parameter>
<parameter name="n_knots">
<parameter_description> number of entries in @knots
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterBehaviour

</return>
</function>

<function name="clutter_script_ensure_objects">
<description>
Ensure that every object defined inside @script is correctly
constructed. You should rarely need to use this function.

Since: 0.6

</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_set_object">
<description>
Sets @objects inside @node. The reference count of @object is increased.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_clip">
<description>
Gets the clip area for @self, if any is set

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="xoff">
<parameter_description> return location for the X offset of
the clip rectangle, or %NULL
</parameter_description>
</parameter>
<parameter name="yoff">
<parameter_description> return location for the Y offset of
the clip rectangle, or %NULL
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the width of
the clip rectangle, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the height of
the clip rectangle, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_rotate_new">
<description>
Creates a new #ClutterBehaviourRotate. This behaviour will rotate actors
bound to it on @axis, following @direction, between @angle_start and
@angle_end. Angles &gt;= 360 degrees will be clamped to the canonical interval
&lt;0, 360), if angle_start == angle_end, the behaviour will carry out a
single rotation of 360 degrees.

Since: 0.4

</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha, or %NULL
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the rotation axis
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the rotation direction
</parameter_description>
</parameter>
<parameter name="angle_start">
<parameter_description> the starting angle in degrees, between 0 and 360.
</parameter_description>
</parameter>
<parameter name="angle_end">
<parameter_description> the final angle in degrees, between 0 and 360.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterBehaviourRotate.

</return>
</function>

<function name="clutter_actor_set_parent">
<description>
Sets the parent of @self to @parent.  The opposite function is
clutter_actor_unparent().

This function should not be used by applications, but by custom
container actor subclasses.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> A new #ClutterActor parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_cursor_color">
<description>
Sets the color of the cursor of a #ClutterText actor.

If @color is %NULL, the cursor color will be the same as the
text color.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color of the cursor, or %NULL to unset it
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_set_load_data_async">
<description>
Sets whether @texture should use a worker thread to load the data
from disk asynchronously. Setting @load_async to %TRUE will make
clutter_texture_set_from_file() block until the #ClutterTexture has
determined the width and height of the image data.

See the #ClutterTexture:load-async property documentation, and
clutter_texture_set_load_async().

Since: 1.0

</description>
<parameters>
<parameter name="texture">
<parameter_description> a #ClutterTexture
</parameter_description>
</parameter>
<parameter name="load_async">
<parameter_description> %TRUE if the texture should asynchronously load data
from a filename
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_manager_child_set_property">
<description>
Sets a property on the #ClutterLayoutMeta created by @manager and
attached to a child of @container

Since: 1.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> a #ClutterContainer using @manager
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @container
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue with the value of the property to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_win32_get_stage_window">
<description>
Gets the stage's window handle

Since: 0.8

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> An HWND for the stage window.

</return>
</function>

<function name="clutter_actor_lower">
<description>
Puts @self below @above.

Both actors must have the same parent, and the parent must implement
the #ClutterContainer interface.

This function is the equivalent of clutter_container_lower_child().

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="above">
<parameter_description> A #ClutterActor to lower below
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_layout">
<description>
Retrieves the current #PangoLayout used by a #ClutterText actor.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> a #PangoLayout. The returned object is owned by
the #ClutterText actor and should not be modified or freed

</return>
</function>

<function name="clutter_x11_remove_filter">
<description>
Removes the given filter function.

Since: 0.6

</description>
<parameters>
<parameter name="func">
<parameter_description> a filter function
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to be passed to the filter function, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_allocate">
<description>
Called by the parent of an actor to assign the actor its size.
Should never be called by applications (except when implementing
a container or layout manager).

Actors can know from their allocation box whether they have moved
with respect to their parent actor. The @flags parameter describes
additional information about the allocation, for instance whether
the parent has moved with respect to the stage, for example because
a grandparent's origin has moved.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="box">
<parameter_description> new allocation of the actor, in parent-relative coordinates
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags that control the allocation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_array_get_length">
<description>
Retrieves the length of a #JsonArray


</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
</parameters>
<return> the length of the array
</return>
</function>

<function name="clutter_score_stop">
<description>
Stops and rewinds a playing #ClutterScore instance.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> A #ClutterScore
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_selection_bound">
<description>
Retrieves the other end of the selection of a #ClutterText actor,
in characters from the current cursor position.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> the position of the other end of the selection

</return>
</function>

<function name="clutter_x11_get_stage_from_window">
<description>
Gets the stage for a particular X window.  

Since: 0.8

</description>
<parameters>
<parameter name="win">
<parameter_description> an X Window ID
</parameter_description>
</parameter>
</parameters>
<return> The stage or NULL if a stage does not exist for the window.

</return>
</function>

<function name="clutter_timeline_get_elapsed_time">
<description>
Request the current time position of the timeline.


</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> current elapsed time in milliseconds.
</return>
</function>

<function name="clutter_backend_get_font_name">
<description>
Retrieves the default font name as set by
clutter_backend_set_font_name().

Since: 1.0

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
</parameters>
<return> the font name for the backend. The returned string is
owned by the #ClutterBackend and should never be modified or freed

</return>
</function>

<function name="clutter_x11_trap_x_errors">
<description>
Traps every X error until clutter_x11_untrap_x_errors() is called.

Since: 0.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="json_generator_set_root">
<description>
Sets @node as the root of the JSON data stream to be serialized by
the #JsonGenerator.

</description>
<parameters>
<parameter name="generator">
<parameter_description> a #JsonGenerator
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_position_to_coords">
<description>
Retrieves the coordinates of the given @position.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> position in characters
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="line_height">
<parameter_description> return location for the line height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the conversion was successful

</return>
</function>

<function name="clutter_text_get_line_alignment">
<description>
Retrieves the alignment of a #ClutterText, as set by
clutter_text_set_line_alignment().

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> a #PangoAlignment

</return>
</function>

<function name="clutter_actor_animatev">
<description>
Animates the given list of properties of @actor between the current
value for each property and a new final value. The animation has a
definite duration and a speed given by the @mode.

This is the vector-based variant of clutter_actor_animate(), useful
for language bindings.

&lt;warning&gt;Unlike clutter_actor_animate(), this function will not
allow you to specify &quot;signal::&quot; names and callbacks.&lt;/warning&gt;

Since: 1.0

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> an animation mode logical id
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> duration of the animation, in milliseconds
</parameter_description>
</parameter>
<parameter name="n_properties">
<parameter_description> number of property names and values
</parameter_description>
</parameter>
<parameter name="properties">
<parameter_description> a vector
containing the property names to set
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a vector containing the
property values to set
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterAnimation object. The object is
owned by the #ClutterActor and should not be unreferenced with
g_object_unref()

</return>
</function>

<function name="clutter_behaviour_rotate_set_direction">
<description>
Sets the rotation direction used by the rotate behaviour.

Since: 0.4

</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the rotation direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_get_title">
<description>
Gets the stage title.

Since: 0.4

</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> pointer to the title string for the stage. The
returned string is owned by the actor and should not
be modified or freed.

</return>
</function>

<function name="json_object_has_member">
<description>
Checks whether @object has a member named @member_name.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of a JSON object member
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the JSON object has the requested member
</return>
</function>

<function name="clutter_timeline_has_marker">
<description>
Checks whether @timeline has a marker set with the given name.

Since: 0.8

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the name of the marker
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the marker was found

</return>
</function>

<function name="clutter_texture_get_load_async">
<description>
Retrieves the value set using clutter_texture_get_load_async()

Since: 1.0

</description>
<parameters>
<parameter name="texture">
<parameter_description> a #ClutterTexture
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterTexture should load the data from
disk asynchronously

</return>
</function>

<function name="json_array_add_int_element">
<description>
Conveniently adds an integer @value into @array

See also: json_array_add_element(), json_node_set_int()

Since: 0.8

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> an integer value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animator_get_keys">
<description>
Returns a list of pointers to opaque structures with accessor functions
that describe the keys added to an animator.

Since: 1.2

</description>
<parameters>
<parameter name="animator">
<parameter_description> a #ClutterAnimator instance
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GObject to search for, or %NULL for all objects
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> a specific property name to query for,
or %NULL for all properties
</parameter_description>
</parameter>
<parameter name="progress">
<parameter_description> a specific progress to search for, or a negative value for all
progresses
</parameter_description>
</parameter>
</parameters>
<return> a
list of #ClutterAnimatorKey&lt;!-- --&gt;s; the contents of the list are owned
by the #ClutterAnimator, but you should free the returned list when done,
using g_list_free()

</return>
</function>

<function name="clutter_color_to_hls">
<description>
Converts @color to the HLS format.

The @hue value is in the 0 .. 360 range. The @luminance and
@saturation values are in the 0 .. 1 range.

</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="hue">
<parameter_description> return location for the hue value or %NULL
</parameter_description>
</parameter>
<parameter name="luminance">
<parameter_description> return location for the luminance value or %NULL
</parameter_description>
</parameter>
<parameter name="saturation">
<parameter_description> return location for the saturation value or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_insert_text">
<description>
Inserts @text into a #ClutterActor at the given position.

If @position is a negative number, the text will be appended
at the end of the current contents of the #ClutterText.

The position is expressed in characters, not in bytes.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to be inserted
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position of the insertion, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_set_initial_value">
<description>
Sets the initial value of @interval to @value. The value is copied
inside the #ClutterInterval.

Since: 1.0

</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_minimum_size">
<description>
Sets the minimum size for a stage window, if the default backend
uses #ClutterStage inside a window

This is a convenience function, and it is equivalent to setting the
#ClutterActor:min-width and #ClutterActor:min-height on @stage

If the current size of @stage is smaller than the minimum size, the
@stage will be resized to the new @width and @height

This function has no effect if @stage is fullscreen

Since: 1.2

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width, in pixels
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_manager_layout_changed">
<description>
Emits the #ClutterLayoutManager::layout-changed signal on @manager

This function should only be called by implementations of the
#ClutterLayoutManager class

Since: 1.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animation_has_property">
<description>
Checks whether @animation is controlling @property_name.

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> name of the property
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the property is animated by the
#ClutterAnimation, %FALSE otherwise

</return>
</function>

<function name="clutter_model_remove">
<description>
Removes the row at the given position from the model.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> position of row to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_media_get_progress">
<description>
Retrieves the playback progress of @media.

Since: 1.0

</description>
<parameters>
<parameter name="media">
<parameter_description> a #ClutterMedia
</parameter_description>
</parameter>
</parameters>
<return> the playback progress, between 0.0 and 1.0

</return>
</function>

<function name="clutter_value_get_color">
<description>
Gets the #ClutterColor contained in @value.

Since: 0.8.4

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized to #CLUTTER_TYPE_COLOR
</parameter_description>
</parameter>
</parameters>
<return> the colors inside the passed #GValue

</return>
</function>

<function name="clutter_actor_set_scale_with_gravity">
<description>
Scales an actor with the given factors around the given
center point. The center point is specified as one of the compass
directions in #ClutterGravity. For example, setting it to north
will cause the top of the actor to remain unchanged and the rest of
the actor to expand left, right and downwards.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> double factor to scale actor by horizontally.
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> double factor to scale actor by vertically.
</parameter_description>
</parameter>
<parameter name="gravity">
<parameter_description> the location of the scale center expressed as a compass
direction.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="cogl_pango_font_map_get_use_mipmapping">
<description>
Retrieves whether the #CoglPangoRenderer used by @fm will
use mipmapping when rendering the glyphs.

Since: 1.0

</description>
<parameters>
<parameter name="fm">
<parameter_description> a #CoglPangoFontMap
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if mipmapping is used, %FALSE otherwise.

</return>
</function>

<function name="clutter_flow_layout_set_row_height">
<description>
Sets the minimum and maximum heights that a row can have

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="min_height">
<parameter_description> the minimum height of a row
</parameter_description>
</parameter>
<parameter name="max_height">
<parameter_description> the maximum height of a row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_reparent">
<description>
This function resets the parent actor of @self.  It is
logically equivalent to calling clutter_actor_unparent()
and clutter_actor_set_parent(), but more efficiently
implemented, ensures the child is not finalized
when unparented, and emits the parent-set signal only
one time.

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="new_parent">
<parameter_description> the new #ClutterActor parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_new">
<description>
Creates a new #ClutterInterval holding values of type @gtype.

This function avoids using a #GValue for the initial and final values
of the interval:

|[
interval = clutter_interval_new (G_TYPE_FLOAT, 0.0, 1.0);
interval = clutter_interval_new (G_TYPE_BOOLEAN, FALSE, TRUE);
interval = clutter_interval_new (G_TYPE_INT, 0, 360);
]|

Since: 1.0

</description>
<parameters>
<parameter name="gtype">
<parameter_description> the type of the values in the interval
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the initial value and the final value of the interval
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterInterval

</return>
</function>

<function name="clutter_media_set_filename">
<description>
Sets the source of @media using a file path.

Since: 0.2

</description>
<parameters>
<parameter name="media">
<parameter_description> a #ClutterMedia
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> A filename
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_get_actor_by_gid">
<description>
Retrieves the #ClutterActor with @id.

Since: 0.6

</description>
<parameters>
<parameter name="id">
<parameter_description> a #ClutterActor ID.
</parameter_description>
</parameter>
</parameters>
<return> the actor with the passed id or %NULL.
The returned actor does not have its reference count increased.

</return>
</function>

<function name="clutter_shader_get_fragment_source">
<description>
Query the current GLSL fragment source set on @shader.

Since: 0.6

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
</parameters>
<return> the source of the fragment shader for this
ClutterShader object or %NULL. The returned string is owned by the
shader object and should never be modified or freed

</return>
</function>

<function name="clutter_animation_get_loop">
<description>
Retrieves whether @animation is looping.

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the animation is looping

</return>
</function>

<function name="clutter_media_set_progress">
<description>
Sets the playback progress of @media. The @progress is
a normalized value between 0.0 (begin) and 1.0 (end).

Since: 1.0

</description>
<parameters>
<parameter name="media">
<parameter_description> a #ClutterMedia
</parameter_description>
</parameter>
<parameter name="progress">
<parameter_description> the progress of the playback, between 0.0 and 1.0
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_score_new">
<description>
Creates a new #ClutterScore. A #ClutterScore is an object that can
hold multiple #ClutterTimeline&lt;!-- --&gt;s in a sequential order.

Since: 0.6

</description>
<parameters>
</parameters>
<return> the newly created #ClutterScore. Use g_object_unref()
when done.

</return>
</function>

<function name="json_object_ref">
<description>
Increase by one the reference count of a #JsonObject.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
</parameters>
<return> the passed #JsonObject, with the reference count
increased by one.
</return>
</function>

<function name="clutter_child_meta_get_actor">
<description>
Retrieves the actor wrapped by @data

Since: 0.8

</description>
<parameters>
<parameter name="data">
<parameter_description> a #ClutterChildMeta
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterActor

</return>
</function>

<function name="clutter_threads_leave">
<description>
Unlocks the Clutter thread lock.

Since: 0.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_interval_validate">
<description>
Validates the initial and final values of @interval against
a #GParamSpec.

Since: 1.0

</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> a #GParamSpec
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterInterval is valid, %FALSE otherwise

</return>
</function>

<function name="json_parser_new">
<description>
Creates a new #JsonParser instance. You can use the #JsonParser to
load a JSON stream from either a file or a buffer and then walk the
hierarchy using the data types API.


</description>
<parameters>
</parameters>
<return> the newly created #JsonParser. Use g_object_unref()
to release all the memory it allocates.
</return>
</function>

<function name="clutter_interval_peek_initial_value">
<description>
Gets the pointer to the initial value of @interval

Since: 1.0

</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
</parameters>
<return> the initial value of the interval.
The value is owned by the #ClutterInterval and it should not be
modified or freed

</return>
</function>

<function name="clutter_container_child_get">
<description>
Gets @container specific properties of an actor.

In general, a copy is made of the property contents and the caller is
responsible for freeing the memory in the appropriate manner for the type, for
instance by calling g_free() or g_object_unref(). 

Since: 0.8

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor that is a child of @container.
</parameter_description>
</parameter>
<parameter name="first_prop">
<parameter_description> name of the first property to be set.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value for the first property, followed optionally by more name/value
pairs terminated with NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_opacity_get_bounds">
<description>
Gets the initial and final levels of the opacity applied by @behaviour
on each actor it controls.

Since: 0.6

</description>
<parameters>
<parameter name="behaviour">
<parameter_description> a #ClutterBehaviourOpacity
</parameter_description>
</parameter>
<parameter name="opacity_start">
<parameter_description> return location for the minimum level of opacity, or %NULL
</parameter_description>
</parameter>
<parameter name="opacity_end">
<parameter_description> return location for the maximum level of opacity, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_rotate_set_axis">
<description>
Sets the axis used by the rotate behaviour.

Since: 0.4

</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> a #ClutterRotateAxis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animator_set_key">
<description>
Sets a single key in the #ClutterAnimator for the @property_name of
@object at @progress.

See also: clutter_animator_set()

Since: 1.2

</description>
<parameters>
<parameter name="animator">
<parameter_description> a #ClutterAnimator
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the property to specify a key for
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the id of the alpha function to use
</parameter_description>
</parameter>
<parameter name="progress">
<parameter_description> the normalized range at which stage of the animation this
value applies
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value property_name should have at progress.
</parameter_description>
</parameter>
</parameters>
<return> The animator instance

</return>
</function>

<function name="json_object_foreach_member">
<description>
Iterates over all members of @object and calls @func on
each one of them.

It is safe to change the value of a #JsonNode of the @object
from within the iterator @func, but it is not safe to add or
remove members from the @object.

Since: 0.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to be called on each member
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to be passed to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_get_key_code">
<description>
Retrieves the keycode of the key that caused @event

Since: 1.0

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_KEY_PRESS or
of type %CLUTTER_KEY_RELEASE
</parameter_description>
</parameter>
</parameters>
<return> The keycode representing the key

</return>
</function>

<function name="clutter_actor_unparent">
<description>
Removes the parent of @self.

This function should not be used in applications.  It should be called by
implementations of container actors, to dissociate a child from the
container.

Since: 0.1.1

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rectangle_get_border_width">
<description>
Gets the width (in pixels) of the border used by @rectangle

Since: 0.2

</description>
<parameters>
<parameter name="rectangle">
<parameter_description> a #ClutterRectangle
</parameter_description>
</parameter>
</parameters>
<return> the border's width

</return>
</function>

<function name="clutter_text_activate">
<description>
Emits the #ClutterText::activate signal, if @self has been set
as activatable using clutter_text_set_activatable().

This function can be used to emit the ::activate signal inside
a #ClutterActor::captured-event or #ClutterActor::key-press-event
signal handlers before the default signal handler for the
#ClutterText is invoked.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the ::activate signal has been emitted,
and %FALSE otherwise

</return>
</function>

<function name="clutter_rectangle_get_border_color">
<description>
Gets the color of the border used by @rectangle and places
it into @color.

Since: 0.2

</description>
<parameters>
<parameter name="rectangle">
<parameter_description> a #ClutterRectangle
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_get_string">
<description>
Gets the string value stored inside a #JsonNode


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
</parameters>
<return> a string value.
</return>
</function>

<function name="clutter_actor_set_scale_full">
<description>
Scales an actor with the given factors around the given center
point. The center point is specified in pixels relative to the
anchor point (usually the top left corner of the actor).

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> double factor to scale actor by horizontally.
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> double factor to scale actor by vertically.
</parameter_description>
</parameter>
<parameter name="center_x">
<parameter_description> X coordinate of the center of the scale.
</parameter_description>
</parameter>
<parameter name="center_y">
<parameter_description> Y coordinate of the center of the scale
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_copy">
<description>
Makes a copy of the color structure.  The result must be
freed using clutter_color_free().

Since: 0.2

</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> an allocated copy of @color.

</return>
</function>

<function name="clutter_box_new">
<description>
Creates a new #ClutterBox. The children of the box will be layed
out by the passed @manager

Since: 1.0

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterBox actor

</return>
</function>

<function name="clutter_x11_texture_pixmap_update_area">
<description>
Performs the actual binding of texture to the current content of
the pixmap. Can be called to update the texture if the pixmap
content has changed.

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> The texture whose content shall be updated.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the X coordinate of the area to update
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the Y coordinate of the area to update
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the area to update
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the area to update
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_threads_add_idle_full">
<description>
Adds a function to be called whenever there are no higher priority
events pending. If the function returns %FALSE it is automatically
removed from the list of event sources and will not be called again.

This function can be considered a thread-safe variant of g_idle_add_full():
it will call @function while holding the Clutter lock. It is logically
equivalent to the following implementation:

|[
static gboolean
idle_safe_callback (gpointer data)
{
SafeClosure *closure = data;
gboolean res = FALSE;

/ * mark the critical section * /

clutter_threads_enter();

/ * the callback does not need to acquire the Clutter
* lock itself, as it is held by the this proxy handler
* /
res = closure-&gt;callback (closure-&gt;data);

clutter_threads_leave();

return res;
}
static gulong
add_safe_idle (GSourceFunc callback,
gpointer    data)
{
SafeClosure *closure = g_new0 (SafeClosure, 1);

closure-&gt;callback = callback;
closure-&gt;data = data;

return g_add_idle_full (G_PRIORITY_DEFAULT_IDLE,
idle_safe_callback,
closure,
g_free)
}
]|

This function should be used by threaded applications to make sure
that @func is emitted under the Clutter threads lock and invoked
from the same thread that started the Clutter main loop. For instance,
it can be used to update the UI using the results from a worker
thread:

|[
static gboolean
update_ui (gpointer data)
{
SomeClosure *closure = data;

/ * it is safe to call Clutter API from this function because
* it is invoked from the same thread that started the main
* loop and under the Clutter thread lock
* /
clutter_label_set_text (CLUTTER_LABEL (closure-&gt;label),
closure-&gt;text);

g_object_unref (closure-&gt;label);
g_free (closure);

return FALSE;
}

/ * within another thread * /
closure = g_new0 (SomeClosure, 1);
/ * always take a reference on GObject instances * /
closure-&gt;label = g_object_ref (my_application-&gt;label);
closure-&gt;text = g_strdup (processed_text_to_update_the_label);

clutter_threads_add_idle_full (G_PRIORITY_HIGH_IDLE,
update_ui,
closure,
NULL);
]|

Since: 0.4

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the timeout source. Typically this will be in the
range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> functio to call when the idle source is removed
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="cogl_pango_font_map_new">
<description>
Creates a new font map.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created #PangoFontMap

</return>
</function>

<function name="clutter_animation_get_duration">
<description>
Retrieves the duration of @animation, in milliseconds.

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
</parameters>
<return> the duration of the animation

</return>
</function>

<function name="json_array_new">
<description>
Creates a new #JsonArray.


</description>
<parameters>
</parameters>
<return> the newly created #JsonArray
</return>
</function>

<function name="clutter_egl_display">
<description>
Retrieves the &lt;structname&gt;EGLDisplay&lt;/structname&gt; used by Clutter


</description>
<parameters>
</parameters>
<return> the EGL display
</return>
</function>

<function name="clutter_actor_transform_stage_point">
<description>
This function translates screen coordinates (@x, @y) to
coordinates relative to the actor. For example, it can be used to translate
screen events from global screen coordinates into actor-local coordinates.

The conversion can fail, notably if the transform stack results in the
actor being projected on the screen as a mere line.

The conversion should not be expected to be pixel-perfect due to the
nature of the operation. In general the error grows when the skewing
of the actor rectangle on screen increases.

Note: This function is fairly computationally intensive.

Note: This function only works when the allocation is up-to-date,
i.e. inside of paint()

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x screen coordinate of the point to unproject
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y screen coordinate of the point to unproject
</parameter_description>
</parameter>
<parameter name="x_out">
<parameter_description> return location for the unprojected x coordinance
</parameter_description>
</parameter>
<parameter name="y_out">
<parameter_description> return location for the unprojected y coordinance
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if conversion was successful.

</return>
</function>

<function name="clutter_actor_get_fixed_position_set">
<description>
Checks whether an actor has a fixed position set (and will thus be
unaffected by any layout manager).

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the fixed position is set on the actor

</return>
</function>

<function name="clutter_animation_bind_interval">
<description>
Binds @interval to the @property_name of the #GObject
attached to @animation. The #ClutterAnimation will take
ownership of the passed #ClutterInterval.  For more information
about animations, see clutter_actor_animate().

If you need to update the interval instance use
clutter_animation_update_property() instead.

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the property to control
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
</parameters>
<return> The animation itself.
</return>
</function>

<function name="clutter_units_get_unit_type">
<description>
Retrieves the unit type of the value stored inside @units

Since: 1.0

</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
</parameters>
<return> a unit type

</return>
</function>

<function name="clutter_box_layout_set_use_animations">
<description>
Sets whether @layout should animate changes in the layout properties

The duration of the animations is controlled by
clutter_box_layout_set_easing_duration(); the easing mode to be used
by the animations is controlled by clutter_box_layout_set_easing_mode()

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="animate">
<parameter_description> %TRUE if the @layout should use animations
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_set_angle_end">
<description>
Sets the angle at which movement ends; angles &gt;= 360 degress get clamped
to the canonical interval &lt;0, 360).

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="angle_end">
<parameter_description> angle at which movement ends in degrees, between 0 and 360.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_user_resizable">
<description>
Sets if the stage is resizable by user interaction (e.g. via
window manager controls)

Since: 0.4

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="resizable">
<parameter_description> whether the stage should be user resizable.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_get_first_iter">
<description>
Retrieves a #ClutterModelIter representing the first non-filtered
row in @model.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterModelIter.
Call g_object_unref() when done using it

</return>
</function>

<function name="clutter_group_get_nth_child">
<description>
Gets a groups child held at @index_ in stack.

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterGroup
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the position of the requested actor.
</parameter_description>
</parameter>
</parameters>
<return> A Clutter actor, or %NULL if
@index_ is invalid.

</return>
</function>

<function name="clutter_text_insert_unichar">
<description>
Inserts @wc at the current cursor position of a
#ClutterText actor.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="wc">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_remove_clip">
<description>
Removes clip area from @self.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_manager_get_animation_progress">
<description>
Retrieves the progress of the animation, if one has been started by
clutter_layout_manager_begin_animation()

The returned value has the same semantics of the #ClutterAlpha:alpha
value

Since: 1.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
</parameters>
<return> the progress of the animation

</return>
</function>

<function name="clutter_grab_pointer">
<description>
Grabs pointer events, after the grab is done all pointer related events
(press, motion, release, enter, leave and scroll) are delivered to this
actor directly without passing through both capture and bubble phases of
the event delivery chain. The source set in the event will be the actor
that would have received the event if the pointer grab was not in effect.

&lt;note&gt;&lt;para&gt;Grabs completely override the entire event delivery chain
done by Clutter. Pointer grabs should only be used as a last resource;
using the #ClutterActor::captured-event signal should always be the
preferred way to intercept event delivery to reactive actors.&lt;/para&gt;&lt;/note&gt;

If you wish to grab all the pointer events for a specific input device,
you should use clutter_grab_pointer_for_device().

Since: 0.6

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_resort">
<description>
Force a resort on the @model. This function should only be
used by subclasses of #ClutterModel.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_fog">
<description>
Sets the fog (also known as &quot;depth cueing&quot;) settings for the @stage.

A #ClutterStage will only use a linear fog progression, which
depends solely on the distance from the viewer. The cogl_set_fog()
function in COGL exposes more of the underlying implementation,
and allows changing the for progression function. It can be directly
used by disabling the #ClutterStage:use-fog property and connecting
a signal handler to the #ClutterActor::paint signal on the @stage,
like:

|[
clutter_stage_set_use_fog (stage, FALSE);
g_signal_connect (stage, &quot;paint&quot;, G_CALLBACK (on_stage_paint), NULL);
]|

The paint signal handler will call cogl_set_fog() with the
desired settings:

|[
static void
on_stage_paint (ClutterActor *actor)
{
ClutterColor stage_color = { 0, };
CoglColor fog_color = { 0, };

/ * set the fog color to the stage background color * /
clutter_stage_get_color (CLUTTER_STAGE (actor), &amp;stage_color);
cogl_color_set_from_4ub (&amp;fog_color,
stage_color.red,
stage_color.green,
stage_color.blue,
stage_color.alpha);

/ * enable fog * /
cogl_set_fog (&amp;fog_color,
COGL_FOG_MODE_EXPONENTIAL, / * mode * /
0.5,                       / * density * /
5.0, 30.0);                / * z_near and z_far * /
}
]|

Note: The fogging functions only work correctly when the visible actors use
unmultiplied alpha colors. By default Cogl will premultiply textures
and cogl_set_source_color will premultiply colors, so unless you
explicitly load your textures requesting an unmultiplied
internal_format and use cogl_material_set_color you can only use
fogging with fully opaque actors.

We can look to improve this in the future when we can depend on
fragment shaders.

Since: 0.6

</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
<parameter name="fog">
<parameter_description> a #ClutterFog structure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_free">
<description>
Frees a color structure created with clutter_color_copy().

Since: 0.2

</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_value_get_fixed">
<description>
Gets the fixed point value stored inside @value.

Since: 0.8

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized to %COGL_TYPE_FIXED
</parameter_description>
</parameter>
</parameters>
<return> the value inside the passed #GValue

</return>
</function>

<function name="clutter_flow_layout_set_column_width">
<description>
Sets the minimum and maximum widths that a column can have

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="min_width">
<parameter_description> minimum width of a column
</parameter_description>
</parameter>
<parameter name="max_width">
<parameter_description> maximum width of a column
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_get_stage">
<description>
Retrieves the source #ClutterStage the event originated for, or
%NULL if the event has no stage.

Since: 0.8

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterStage

</return>
</function>

<function name="json_generator_new">
<description>
Creates a new #JsonGenerator. You can use this object to generate a
JSON data stream starting from a data object model composed by
#JsonNode&lt;!-- --&gt;s.


</description>
<parameters>
</parameters>
<return> the newly created #JsonGenerator instance
</return>
</function>

<function name="clutter_backend_set_font_options">
<description>
Sets the new font options for @backend. The #ClutterBackend will
copy the #cairo_font_options_t.

If @options is %NULL, the first following call to
clutter_backend_get_font_options() will return the default font
options for @backend.

This function is intended for actors creating a Pango layout
using the PangoCairo API.

Since: 0.8

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> Cairo font options for the backend, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_manager_begin_animation">
<description>
Begins an animation of @duration milliseconds, using the provided
easing @mode

The easing mode can be specified either as a #ClutterAnimationMode
or as a logical id returned by clutter_alpha_register_func()

The result of this function depends on the @manager implementation

Since: 1.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> the duration of the animation, in milliseconds
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the easing mode of the animation
</parameter_description>
</parameter>
</parameters>
<return> The #ClutterAlpha created by the
layout manager; the returned instance is owned by the layout
manager and should not be unreferenced

</return>
</function>

<function name="clutter_shader_set_is_enabled">
<description>
Enables a shader. This function will attempt to compile and link
the shader, if it isn't already.

When @enabled is %FALSE the default state of the GL pipeline will be
used instead.

Since: 0.6

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> The new state of the shader.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_glx_texture_pixmap_using_extension">
<description>
Checks whether @texture is using the GLX_EXT_texture_from_pixmap
extension; this extension can be optionally (though it is strongly
encouraged) implemented as a zero-copy between a GLX pixmap and
a GL texture.

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterGLXTexturePixmap
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the texture is using the
GLX_EXT_texture_from_pixmap OpenGL extension or falling back to the
slower software mechanism.

</return>
</function>

<function name="clutter_texture_get_keep_aspect_ratio">
<description>
Retrieves the value set using clutter_texture_get_keep_aspect_ratio()

Since: 1.0

</description>
<parameters>
<parameter name="texture">
<parameter_description> a #ClutterTexture
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterTexture should maintain the
aspect ratio of the underlying image

</return>
</function>

<function name="clutter_actor_destroy">
<description>
Destroys an actor.  When an actor is destroyed, it will break any
references it holds to other objects.  If the actor is inside a
container, the actor will be removed.

When you destroy a container, its children will be destroyed as well.

Note: you cannot destroy the #ClutterStage returned by
clutter_stage_get_default().

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_width">
<description>
Retrieves the width of a #ClutterActor.

If the actor has a valid allocation, this function will return the
width of the allocated area given to the actor.

If the actor does not have a valid allocation, this function will
return the actor's natural width, that is the preferred width of
the actor.

If you care whether you get the preferred width or the width that
has been assigned to the actor, you should probably call a different
function like clutter_actor_get_allocation_box() to retrieve the
allocated size or clutter_actor_get_preferred_width() to retrieve the
preferred width.

If an actor has a fixed width, for instance a width that has been
assigned using clutter_actor_set_width(), the width returned will
be the same value.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the width of the actor, in pixels
</return>
</function>

<function name="clutter_behaviour_depth_set_bounds">
<description>
Sets the boundaries of the @behaviour.

Since: 0.6

</description>
<parameters>
<parameter name="behaviour">
<parameter_description> a #ClutterBehaviourDepth
</parameter_description>
</parameter>
<parameter name="depth_start">
<parameter_description> initial value of the depth
</parameter_description>
</parameter>
<parameter name="depth_end">
<parameter_description> final value of the depth
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_units_free">
<description>
Frees the resources allocated by @units

You should only call this function on a #ClutterUnits
created using clutter_units_copy()

Since: 1.0

</description>
<parameters>
<parameter name="units">
<parameter_description> the #ClutterUnits to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_type_name">
<description>
Retrieves the user readable name of the data type contained by @node.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> a string containing the name of the type. The returned string
is owned by the node and should never be modified or freed
</return>
</function>

<function name="clutter_path_foreach">
<description>
Calls a function for each node of the path.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the function to call with each node
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_rotate_get_center">
<description>
Retrieves the center of rotation set using
clutter_behaviour_rotate_set_center().

Since: 0.4

</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X center of rotation
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y center of rotation
</parameter_description>
</parameter>
<parameter name="z">
<parameter_description> return location for the Z center of rotation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_load_from_file">
<description>
Loads the definitions from @filename into @script and merges with
the currently loaded ones, if any.

Since: 0.6

</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the full path to the definition file
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> on error, zero is returned and @error is set
accordingly. On success, the merge id for the UI definitions is
returned. You can use the merge id with clutter_script_unmerge().

</return>
</function>

<function name="clutter_model_prepend">
<description>
Creates and prepends a new row to the #ClutterModel, setting the row
values upon creation. For example, to prepend a new row where column 0
is type %G_TYPE_INT and column 1 is of type %G_TYPE_STRING:

&lt;informalexample&gt;&lt;programlisting&gt;
ClutterModel *model;
model = clutter_model_default_new (2,
G_TYPE_INT,    &quot;Score&quot;,
G_TYPE_STRING, &quot;Team&quot;);
clutter_model_prepend (model, 0, 42, 1, &quot;Team #1&quot;, -1);
&lt;/programlisting&gt;&lt;/informalexample&gt;

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value, terminated with -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_untrap_x_errors">
<description>
Removes the X error trap and returns the current status.

Since: 0.4

</description>
<parameters>
</parameters>
<return> the trapped error code, or 0 for success

</return>
</function>

<function name="clutter_animator_set">
<description>
Adds multiple keys to a #ClutterAnimator, specifying the value a given
property should have at a given progress of the animation. The mode
specified is the mode used when going to this key from the previous key of
the @property_name

If a given (object, property, progress) tuple already exist the mode and
value will be replaced with the new values.

Since: 1.2

</description>
<parameters>
<parameter name="animator">
<parameter_description> a #ClutterAnimator
</parameter_description>
</parameter>
<parameter name="first_object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the property to specify a key for
</parameter_description>
</parameter>
<parameter name="first_mode">
<parameter_description> the id of the alpha function to use
</parameter_description>
</parameter>
<parameter name="first_progress">
<parameter_description> at which stage of the animation this value applies; the
range is a normalized floating point value between 0 and 1
</parameter_description>
</parameter>
<parameter name="VarArgs">
<parameter_description> the value first_property_name should have for first_object
at first_progress, followed by more (object, property_name, mode,
progress, value) tuples, followed by %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_media_get_subtitle_font_name">
<description>
Retrieves the font name currently used.

Since: 1.2

</description>
<parameters>
<parameter name="media">
<parameter_description> a #ClutterMedia
</parameter_description>
</parameter>
</parameters>
<return> a string containing the font name. Use g_free()
to free the returned string

</return>
</function>

<function name="clutter_animator_remove_key">
<description>
Removes all keys matching the conditions specificed in the arguments.

Since: 1.2

</description>
<parameters>
<parameter name="animator">
<parameter_description> a #ClutterAnimator
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GObject to search for, or %NULL for all
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> a specific property name to query for,
or %NULL for all
</parameter_description>
</parameter>
<parameter name="progress">
<parameter_description> a specific progress to search for or a negative value
for all
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_units_from_em">
<description>
Stores a value in em inside @units, using the default font
name as returned by clutter_backend_get_font_name()

Since: 1.0

</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
<parameter name="em">
<parameter_description> em
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_set_use_argb_visual">
<description>
Sets whether the Clutter X11 backend should request ARGB visuals by default
or not.

By default, Clutter requests RGB visuals.

&lt;note&gt;If no ARGB visuals are found, the X11 backend will fall back to
requesting a RGB visual instead.&lt;/note&gt;

ARGB visuals are required for the #ClutterStage:use-alpha property to work.

&lt;note&gt;This function can only be called once, and before clutter_init() is
called.&lt;/note&gt;

Since: 1.2

</description>
<parameters>
<parameter name="use_argb">
<parameter_description> %TRUE if ARGB visuals should be requested by default
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_type">
<description>
Retrieves the type of the event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterEventType
</return>
</function>

<function name="json_array_ref">
<description>
Increase by one the reference count of a #JsonArray.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
</parameters>
<return> the passed #JsonArray, with the reference count
increased by one.
</return>
</function>

<function name="clutter_shader_get_vertex_source">
<description>
Query the current GLSL vertex source set on @shader.

Since: 0.6

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
</parameters>
<return> the source of the vertex shader for this
ClutterShader object or %NULL. The returned string is owned by the
shader object and should never be modified or freed

</return>
</function>

<function name="clutter_text_get_editable">
<description>
Retrieves whether a #ClutterText is editable or not.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is editable

</return>
</function>

<function name="json_array_sized_new">
<description>
Creates a new #JsonArray with @n_elements slots already allocated.


</description>
<parameters>
<parameter name="n_elements">
<parameter_description> number of slots to pre-allocate
</parameter_description>
</parameter>
</parameters>
<return> the newly created #JsonArray
</return>
</function>

<function name="clutter_timeline_rewind">
<description>
Rewinds #ClutterTimeline to the first frame if its direction is
%CLUTTER_TIMELINE_FORWARD and the last frame if it is
%CLUTTER_TIMELINE_BACKWARD.

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_new">
<description>
Creates a new #ClutterScript instance. #ClutterScript can be used
to load objects definitions for scenegraph elements, like actors,
or behavioural elements, like behaviours and timelines. The
definitions must be encoded using the JavaScript Object Notation (JSON)
language.

Since: 0.6

</description>
<parameters>
</parameters>
<return> the newly created #ClutterScript instance. Use
g_object_unref() when done.

</return>
</function>

<function name="clutter_behaviour_depth_get_bounds">
<description>
Gets the boundaries of the @behaviour

Since: 0.6

</description>
<parameters>
<parameter name="behaviour">
<parameter_description> a #ClutterBehaviourDepth
</parameter_description>
</parameter>
<parameter name="depth_start">
<parameter_description> return location for the initial depth value, or %NULL
</parameter_description>
</parameter>
<parameter name="depth_end">
<parameter_description> return location for the final depth value, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_throttle_motion_events">
<description>
Sets whether motion events received between redraws should
be throttled or not. If motion events are throttled, those
events received by the windowing system between redraws will
be compressed so that only the last event will be propagated
to the @stage and its actors.

This function should only be used if you want to have all
the motion events delivered to your application code.

Since: 1.0

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="throttle">
<parameter_description> %TRUE to throttle motion events
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_binding_pool_get_for_class">
<description>
Retrieves the #ClutterBindingPool for the given #GObject class
and, eventually, creates it. This function is a wrapper around
clutter_binding_pool_new() and uses the class type name as the
unique name for the binding pool.

Calling this function multiple times will return the same
#ClutterBindingPool.

A binding pool for a class can also be retrieved using
clutter_binding_pool_find() with the class type name:

|[
pool = clutter_binding_pool_find (G_OBJECT_TYPE_NAME (instance));
]|

Since: 1.0

</description>
<parameters>
<parameter name="klass">
<parameter_description> a #GObjectClass pointer
</parameter_description>
</parameter>
</parameters>
<return> the binding pool for the given class.
The returned #ClutterBindingPool is owned by Clutter and should not
be freed directly

</return>
</function>

<function name="clutter_container_class_list_child_properties">
<description>
Returns an array of #GParamSpec for all child properties.

Since: 0.8

</description>
<parameters>
<parameter name="klass">
<parameter_description> a #GObjectClass implementing the #ClutterContainer interface.
</parameter_description>
</parameter>
<parameter name="n_properties">
<parameter_description> return location for length of returned array.
</parameter_description>
</parameter>
</parameters>
<return> an array
of #GParamSpec&lt;!-- --&gt;s which should be freed after use.

</return>
</function>

<function name="clutter_layout_manager_get_preferred_height">
<description>
Computes the minimum and natural heights of the @container according
to @manager.

See also clutter_actor_get_preferred_height()

Since: 1.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> the #ClutterContainer using @manager
</parameter_description>
</parameter>
<parameter name="for_width">
<parameter_description> the width for which the height should be computed, or -1
</parameter_description>
</parameter>
<parameter name="min_height_p">
<parameter_description> return location for the minimum height
of the layout, or %NULL
</parameter_description>
</parameter>
<parameter name="nat_height_p">
<parameter_description> return location for the natural height
of the layout, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_get_width">
<description>
Retrieves the width of the @box

Since: 1.0

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return> the width of the box

</return>
</function>

<function name="clutter_binding_pool_install_action">
<description>
Installs a new action inside a #ClutterBindingPool. The action
is bound to @key_val and @modifiers.

The same action name can be used for multiple @key_val, @modifiers
pairs.

When an action has been activated using clutter_binding_pool_activate()
the passed @callback will be invoked (with @data).

Actions can be blocked with clutter_binding_pool_block_action()
and then unblocked using clutter_binding_pool_unblock_action().

Since: 1.0

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of the action
</parameter_description>
</parameter>
<parameter name="key_val">
<parameter_description> key symbol
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> bitmask of modifiers
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> function to be called when the action is activated
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to be passed to @callback
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to be called when the action is removed
from the pool
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_score_list_timelines">
<description>
Retrieves a list of all the #ClutterTimelines managed by @score.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
</parameters>
<return> a #GSList
containing all the timelines in the score. This function does not increase
the reference count of the returned timelines. Use g_slist_free() on the
returned list to deallocate its resources.

</return>
</function>

<function name="clutter_event_get_click_count">
<description>
Retrieves the number of clicks of @event

Since: 1.0

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_BUTTON_PRESS or
of type %CLUTTER_BUTTON_RELEASE
</parameter_description>
</parameter>
</parameters>
<return> the click count

</return>
</function>

<function name="clutter_layout_meta_get_manager">
<description>
Retrieves the actor wrapped by @data

Since: 1.2

</description>
<parameters>
<parameter name="data">
<parameter_description> a #ClutterLayoutMeta
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterLayoutManager

</return>
</function>

<function name="clutter_path_get_description">
<description>
Returns a newly allocated string describing the path in the same
format as used by clutter_path_add_string().

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
</parameters>
<return> a string description of the path. Free with g_free().

</return>
</function>

<function name="clutter_actor_get_stage">
<description>
Retrieves the #ClutterStage where @actor is contained.

Since: 0.8

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the stage containing the actor, or %NULL

</return>
</function>

<function name="clutter_flow_layout_get_homogeneous">
<description>
Retrieves whether the @layout is homogeneous

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterFlowLayout is homogeneous

</return>
</function>

<function name="clutter_param_spec_units">
<description>
Creates a #GParamSpec for properties using #ClutterUnits.

Since: 1.0

</description>
<parameters>
<parameter name="name">
<parameter_description> name of the property
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> short name
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description (can be translatable)
</parameter_description>
</parameter>
<parameter name="default_type">
<parameter_description> the default type for the #ClutterUnits
</parameter_description>
</parameter>
<parameter name="minimum">
<parameter_description> lower boundary
</parameter_description>
</parameter>
<parameter name="maximum">
<parameter_description> higher boundary
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the param spec
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GParamSpec

</return>
</function>

<function name="clutter_x11_has_event_retrieval">
<description>
Queries the X11 backend to check if event collection has been disabled.

Since: 0.8

</description>
<parameters>
</parameters>
<return> TRUE if event retrival has been disabled. FALSE otherwise.

</return>
</function>

<function name="clutter_event_get_device">
<description>
Retrieves the #ClutterInputDevice for the event.

The #ClutterInputDevice structure is completely opaque and should
be cast to the platform-specific implementation.

Since: 1.0

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterInputDevice or %NULL

</return>
</function>

<function name="clutter_behaviour_ellipse_set_width">
<description>
Sets the width of the elliptical path.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the ellipse
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_get_current_event_time">
<description>
Retrieves the timestamp of the last X11 event processed by
Clutter. This might be different from the timestamp returned
by clutter_get_current_event_time(), as Clutter may synthesize
or throttle events.

Since: 1.0

</description>
<parameters>
</parameters>
<return> a timestamp, in milliseconds

</return>
</function>

<function name="clutter_stage_get_key_focus">
<description>
Retrieves the actor that is currently under key focus.

Since: 0.6

</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> the actor with key focus, or the stage

</return>
</function>

<function name="clutter_animation_set_duration">
<description>
Sets the duration of @animation in milliseconds.

This function will set #ClutterAnimation:alpha and
#ClutterAnimation:timeline if needed.

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> the duration in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_text">
<description>
Retrieves a pointer to the current contents of a #ClutterText
actor.

If you need a copy of the contents for manipulating, either
use g_strdup() on the returned string, or use:

|[
copy = clutter_text_get_chars (text, 0, -1);
]|

Which will return a newly allocated string.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> the contents of the actor. The returned string
is owned by the #ClutterText actor and should never be
modified or freed

</return>
</function>

<function name="clutter_behaviour_path_new_with_description">
<description>
Creates a new path behaviour using the path described by @desc. See
clutter_path_add_string() for a description of the format.

Since: 1.0

</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="desc">
<parameter_description> a string description of the path
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterBehaviour

</return>
</function>

<function name="json_node_set_int">
<description>
Sets @value as the integer content of the @node, replacing any existing
content.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> an integer value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_get_array">
<description>
Retrieves the #JsonArray stored inside a #JsonNode


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> the #JsonArray
</return>
</function>

<function name="clutter_model_set_types">
<description>
Sets the types of the columns inside a #ClutterModel.

This function is meant primarily for #GObjects that inherit from
#ClutterModel, and should only be used when contructing a #ClutterModel.
It will not work after the initial creation of the #ClutterModel.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> number of columns for the model
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> an array of #GType types
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_knot_equal">
<description>
Compares to knot and checks if the point to the same location.

Since: 0.2

</description>
<parameters>
<parameter name="knot_a">
<parameter_description> First knot
</parameter_description>
</parameter>
<parameter name="knot_b">
<parameter_description> Second knot
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the knots point to the same location.

</return>
</function>

<function name="clutter_shader_compile">
<description>
Compiles and links GLSL sources set for vertex and fragment shaders for
a #ClutterShader. If the compilation fails and a #GError return location is
provided the error will contain the errors from the compiler, if any.

Since: 0.8

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> returns TRUE if the shader was succesfully compiled.

</return>
</function>

<function name="clutter_backend_set_resolution">
<description>
Sets the resolution for font handling on the screen. This is a
scale factor between points specified in a #PangoFontDescription
and cairo units. The default value is 96, meaning that a 10 point
font will be 13 units high. (10 * 96. / 72. = 13.3).

Applications should never need to call this function.

Since: 0.4

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
<parameter name="dpi">
<parameter_description> the resolution in &quot;dots per inch&quot; (Physical inches aren't
actually involved; the terminology is conventional).
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_layout_manager_allocate">
<description>
Allocates the children of @container given an area

See also clutter_actor_allocate()

Since: 1.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> the #ClutterContainer using @manager
</parameter_description>
</parameter>
<parameter name="allocation">
<parameter_description> the #ClutterActorBox containing the allocated area
of @container
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the allocation flags
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_preferred_width">
<description>
Computes the requested minimum and natural widths for an actor,
optionally depending on the specified height, or if they are
already computed, returns the cached values.

An actor may not get its request - depending on the layout
manager that's in effect.

A request should not incorporate the actor's scale or anchor point;
those transformations do not affect layout, only rendering.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="for_height">
<parameter_description> available height when computing the preferred width,
or a negative value to indicate that no height is defined
</parameter_description>
</parameter>
<parameter name="min_width_p">
<parameter_description> return location for minimum width,
or %NULL
</parameter_description>
</parameter>
<parameter name="natural_width_p">
<parameter_description> return location for the natural
width, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_box_layout_get_easing_duration">
<description>
Retrieves the duration set using clutter_box_layout_set_easing_duration()

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
</parameters>
<return> the duration of the animations, in milliseconds

</return>
</function>

<function name="clutter_script_get_type_from_name">
<description>
Looks up a type by name, using the virtual function that 
#ClutterScript has for that purpose. This function should
rarely be used.

Since: 0.6

</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="type_name">
<parameter_description> name of the type to look up
</parameter_description>
</parameter>
</parameters>
<return> the type for the requested type name, or
%G_TYPE_INVALID if not corresponding type was found.

</return>
</function>

<function name="clutter_texture_get_base_size">
<description>
Gets the size in pixels of the untransformed underlying image

</description>
<parameters>
<parameter name="texture">
<parameter_description> a #ClutterTexture
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_frame_source_add_full">
<description>
Sets a function to be called at regular intervals with the given
priority.  The function is called repeatedly until it returns
%FALSE, at which point the timeout is automatically destroyed and
the function will not be called again.  The @notify function is
called when the timeout is destroyed.  The first call to the
function will be at the end of the first @interval.

This function is similar to g_timeout_add_full() except that it
will try to compensate for delays. For example, if @func takes half
the interval time to execute then the function will be called again
half the interval time after it finished. In contrast
g_timeout_add_full() would not fire until a full interval after the
function completes so the delay between calls would be 1.0 / @fps *
1.5. This function does not however try to invoke the function
multiple times to catch up missing frames if @func takes more than
@interval ms to execute.

Since: 0.8

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the frame source. Typically this will be in the
range between %G_PRIORITY_DEFAULT and %G_PRIORITY_HIGH.
</parameter_description>
</parameter>
<parameter name="fps">
<parameter_description> the number of times per second to call the function
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the timeout source is removed
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="clutter_backend_get_resolution">
<description>
Gets the resolution for font handling on the screen; see
clutter_backend_set_resolution() for full details.

Since: 0.4

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
</parameters>
<return> the current resolution, or -1 if no resolution
has been set.

</return>
</function>

<function name="json_array_add_element">
<description>
Appends @node inside @array. The array will take ownership of the
#JsonNode.

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_lookup_filename">
<description>
Looks up @filename inside the search paths of @script. If @filename
is found, its full path will be returned .

Since: 0.8

</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the name of the file to lookup
</parameter_description>
</parameter>
</parameters>
<return> the full path of @filename or %NULL if no path was
found.

</return>
</function>

<function name="clutter_container_foreach_with_internals">
<description>
Calls @callback for each child of @container, including &quot;internal&quot;
children built in to the container itself that were never added
by the application.

Since: 1.0

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a function to be called for each child
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to be passed to the function, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_get_valist">
<description>
See clutter_model_iter_get(). This version takes a va_list for language
bindings.

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> a list of column/return location pairs, terminated by -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_add">
<description>
Adds a list of #ClutterActor&lt;!-- --&gt;s to @container. Each time and
actor is added, the &quot;actor-added&quot; signal is emitted. Each actor should
be parented to @container, which takes a reference on the actor. You
cannot add a #ClutterActor to more than one #ClutterContainer.

Since: 0.4

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="first_actor">
<parameter_description> the first #ClutterActor to add
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> %NULL terminated list of actors to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_get_length">
<description>
Retrieves an approximation of the total length of the path.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
</parameters>
<return> the length of the path.

</return>
</function>

<function name="clutter_text_get_line_wrap">
<description>
Retrieves the value set using clutter_text_set_line_wrap().

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterText actor should wrap
its contents

</return>
</function>

<function name="clutter_animation_set_object">
<description>
Attaches @animation to @object. The #ClutterAnimation will take a
reference on @object.

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_set_array">
<description>
Sets @array inside @node and increases the #JsonArray reference count

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_get_height">
<description>
Retrieves the height of the @box

Since: 1.0

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return> the height of the box

</return>
</function>

<function name="json_object_set_object_member">
<description>
Convenience function for setting an object @value of
@member_name inside @object.

The @object will take ownership of the passed #JsonObject

See also: json_object_set_member()

Since: 0.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the member
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_score_get_loop">
<description>
Gets whether @score is looping

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the score is looping

</return>
</function>

<function name="clutter_backend_get_double_click_time">
<description>
Gets the maximum time between two button press events, as set
by clutter_backend_set_double_click_time().

Since: 0.4

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
</parameters>
<return> a time in milliseconds

</return>
</function>

<function name="json_node_take_array">
<description>
Sets @array into @node without increasing the #JsonArray reference count.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_cursor_position">
<description>
Retrieves the cursor position.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> the cursor position, in characters

</return>
</function>

<function name="clutter_container_find_child_by_name">
<description>
Finds a child actor of a container by its name. Search recurses
into any child container.

Since: 0.6

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="child_name">
<parameter_description> the name of the requested child.
</parameter_description>
</parameter>
</parameters>
<return> The child actor with the requested name,
or %NULL if no actor with that name was found.

</return>
</function>

<function name="clutter_model_iter_get_model">
<description>
Retrieves a pointer to the #ClutterModel that this iter is part of.

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a #ClutterModel.

</return>
</function>

<function name="json_array_add_string_element">
<description>
Conveniently adds a string @value into @array

See also: json_array_add_element(), json_node_set_string()

Since: 0.8

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a string value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animation_update_interval">
<description>
Changes the @interval for @property_name. The #ClutterAnimation
will take ownership of the passed #ClutterInterval.

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> name of the property
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_font_name">
<description>
Sets the font used by a #ClutterText. The @font_name string
must either be %NULL, which means that the font name from the
default #ClutterBackend will be used; or be something that can
be parsed by the pango_font_description_from_string() function,
like:

|[
clutter_text_set_font_name (text, &quot;Sans 10pt&quot;);
clutter_text_set_font_name (text, &quot;Serif 16px&quot;);
clutter_text_set_font_name (text, &quot;Helvetica 10&quot;);
]|

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="font_name">
<parameter_description> a font name, or %NULL to set the default font name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_scale_center">
<description>
Retrieves the scale center coordinate in pixels relative to the top
left corner of the actor. If the scale center was specified using a
#ClutterGravity this will calculate the pixel offset using the
current size of the actor.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="center_x">
<parameter_description> Location to store the X position
of the scale center, or %NULL.
</parameter_description>
</parameter>
<parameter name="center_y">
<parameter_description> Location to store the Y position
of the scale center, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_get_object">
<description>
Retrieves the #JsonObject stored inside a #JsonNode


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> the #JsonObject
</return>
</function>

<function name="clutter_model_get_n_rows">
<description>
Retrieves the number of rows inside @model, eventually taking
into account any filtering function set using clutter_model_set_filter().

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> The length of the @model. If there is a filter set, then
the length of the filtered @model is returned.

</return>
</function>

<function name="clutter_text_set_justify">
<description>
Sets whether the text of the #ClutterText actor should be justified
on both margins. This setting is ignored if Clutter is compiled
against Pango &lt; 1.18.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="justify">
<parameter_description> whether the text should be justified
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_set_area_from_rgb_data">
<description>
Updates a sub-region of the pixel data in a #ClutterTexture.

Since: 0.6

</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Image data in RGB type colorspace.
</parameter_description>
</parameter>
<parameter name="has_alpha">
<parameter_description> Set to TRUE if image data has an alpha channel.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of upper left corner of region to update.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of upper left corner of region to update.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width in pixels of region to update.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height in pixels of region to update.
</parameter_description>
</parameter>
<parameter name="rowstride">
<parameter_description> Distance in bytes between row starts on source buffer.
</parameter_description>
</parameter>
<parameter name="bpp">
<parameter_description> bytes per pixel (Currently only 3 and 4 supported,
depending on @has_alpha)
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #ClutterTextureFlags
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on failure.

</return>
</function>

<function name="clutter_shader_get_cogl_fragment_shader">
<description>
Retrieves the underlying #CoglHandle for the fragment shader.

Since: 1.0

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
</parameters>
<return> A #CoglHandle for the fragment shader, or %NULL

</return>
</function>

<function name="clutter_stage_manager_get_default_stage">
<description>
Returns the default #ClutterStage.

Since: 0.8

</description>
<parameters>
<parameter name="stage_manager">
<parameter_description> a #ClutterStageManager
</parameter_description>
</parameter>
</parameters>
<return> the default stage. The returned object
is owned by Clutter and you should never reference or unreference it

</return>
</function>

<function name="clutter_score_append_at_marker">
<description>
Appends @timeline at the given @marker_name on the @parent
#ClutterTimeline.

If you want to append @timeline at the end of @parent, use
clutter_score_append().

The #ClutterScore will take a reference on @timeline.

Since: 0.8

</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> the parent #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the name of the marker to use
</parameter_description>
</parameter>
<parameter name="timeline">
<parameter_description> the #ClutterTimeline to append
</parameter_description>
</parameter>
</parameters>
<return> the id of the #ClutterTimeline inside the score, or
0 on failure. The returned id can be used with clutter_score_remove()
or clutter_score_get_timeline().

</return>
</function>

<function name="clutter_actor_move_anchor_point_from_gravity">
<description>
Sets an anchor point on the actor based on the given gravity, adjusting the
actor postion so that its relative position within its parent remains
unchanged.

Since version 1.0 the anchor point will be stored as a gravity so
that if the actor changes size then the anchor point will move. For
example, if you set the anchor point to %CLUTTER_GRAVITY_SOUTH_EAST
and later double the size of the actor, the anchor point will move
to the bottom right.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="gravity">
<parameter_description> #ClutterGravity.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_depth">
<description>
Sets the Z coordinate of @self to @depth.

The unit used by @depth is dependant on the perspective setup. See
also clutter_stage_set_perspective().

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="depth">
<parameter_description> Z co-ord
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_fullscreen">
<description>
Asks to place the stage window in the fullscreen or unfullscreen
states.

 ( Note that you shouldn't assume the window is definitely full screen
afterward, because other entities (e.g. the user or window manager)
could unfullscreen it again, and not all window managers honor
requests to fullscreen windows.

If you want to receive notification of the fullscreen state you
should either use the #ClutterStage::fullscreen and
#ClutterStage::unfullscreen signals, or use the notify signal
for the #ClutterStage:fullscreen-set property

Since: 1.0

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="fullscreen">
<parameter_description> %TRUE to to set the stage fullscreen
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_set_string">
<description>
Sets @value as the string content of the @node, replacing any existing
content.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a string value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_dup_object">
<description>
Retrieves the #JsonObject inside @node. The reference count of
the returned object is increased.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> the #JsonObject
</return>
</function>

<function name="clutter_bin_layout_add">
<description>
Adds a #ClutterActor to the container using @self and
sets the alignment policies for it

This function is equivalent to clutter_container_add_actor()
and clutter_layout_manager_child_set_property() but it does not
require a pointer to the #ClutterContainer associated to the
#ClutterBinLayout

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBinLayout
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="x_align">
<parameter_description> horizontal alignment policy for @child
</parameter_description>
</parameter>
<parameter name="y_align">
<parameter_description> vertical alignment policy for @child
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_node_free">
<description>
Frees the memory of an allocated node.

Since: 1.0

</description>
<parameters>
<parameter name="node">
<parameter_description> a #ClutterPathNode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_list_markers">
<description>
Retrieves the list of markers at time @msecs. If @frame_num is a
negative integer, all the markers attached to @timeline will be
returned.

Since: 0.8

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> the time to check, or -1
</parameter_description>
</parameter>
<parameter name="n_markers">
<parameter_description> the number of markers returned
</parameter_description>
</parameter>
</parameters>
<return> a newly
allocated, %NULL terminated string array containing the names of
the markers. Use g_strfreev() when done.

</return>
</function>

<function name="clutter_actor_set_anchor_point_from_gravity">
<description>
Sets an anchor point on the actor, based on the given gravity (this is a
convenience function wrapping clutter_actor_set_anchor_point()).

Since version 1.0 the anchor point will be stored as a gravity so
that if the actor changes size then the anchor point will move. For
example, if you set the anchor point to %CLUTTER_GRAVITY_SOUTH_EAST
and later double the size of the actor, the anchor point will move
to the bottom right.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="gravity">
<parameter_description> #ClutterGravity.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_flow_layout_get_column_spacing">
<description>
Retrieves the spacing between columns

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
</parameters>
<return> the spacing between columns of the #ClutterFlowLayout,
in pixels

</return>
</function>

<function name="clutter_x11_texture_pixmap_sync_window">
<description>
Resets the texture's pixmap from its window, perhaps in response to the
pixmap's invalidation as the window changed size.

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> the texture to bind
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_set_value">
<description>
Sets @value inside @node. The passed #GValue is copied into the #JsonNode

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the #GValue to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_binding_pool_override_action">
<description>
Allows overriding the action for @key_val and @modifiers inside a
#ClutterBindingPool. See clutter_binding_pool_install_action().

When an action has been activated using clutter_binding_pool_activate()
the passed @callback will be invoked (with @data).

Actions can be blocked with clutter_binding_pool_block_action()
and then unblocked using clutter_binding_pool_unblock_action().

Since: 1.0

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="key_val">
<parameter_description> key symbol
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> bitmask of modifiers
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> function to be called when the action is activated
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to be passed to @callback
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to be called when the action is removed
from the pool
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_advance_to_marker">
<description>
Advances @timeline to the time of the given @marker_name.

&lt;note&gt;&lt;para&gt;Like clutter_timeline_advance(), this function will not
emit the #ClutterTimeline::new-frame for the time where @marker_name
is set, nor it will emit #ClutterTimeline::marker-reached for
@marker_name.&lt;/para&gt;&lt;/note&gt;

Since: 0.8

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the name of the marker
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_list_objects">
<description>
Retrieves all the objects created by @script.

Note: this function does not increment the reference count of the
objects it returns.

Since: 0.8.2

</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
</parameters>
<return> a list of #GObject&lt;!-- --&gt;s,
or %NULL. The objects are owned by the #ClutterScript instance. Use g_list_free() on the
returned value when done.

</return>
</function>

<function name="clutter_texture_new_from_file">
<description>
Creates a new ClutterTexture actor to display the image contained a
file. If the image failed to load then NULL is returned and @error
is set.

Since: 0.8

</description>
<parameters>
<parameter name="filename">
<parameter_description> The name of an image file to load.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return locatoin for an error.
</parameter_description>
</parameter>
</parameters>
<return> A newly created #ClutterTexture object or NULL on
error.

</return>
</function>

<function name="clutter_texture_get_filter_quality">
<description>
Gets the filter quality used when scaling a texture.

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
</parameters>
<return> The filter quality value.

</return>
</function>

<function name="clutter_layout_manager_end_animation">
<description>
Ends an animation started by clutter_layout_manager_begin_animation()

The result of this call depends on the @manager implementation

Since: 1.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_input_device_get_device_coords">
<description>
Retrieves the latest coordinates of the pointer of @device

Since: 1.2

</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice of type %CLUTTER_POINTER_DEVICE
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_get_n_nodes">
<description>
Retrieves the number of nodes in the path.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
</parameters>
<return> the number of nodes.

</return>
</function>

<function name="clutter_stage_get_perspective">
<description>
Retrieves the stage perspective.

</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="perspective">
<parameter_description> return location for a #ClutterPerspective
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_handle_event">
<description>
This function processes a single X event; it can be used to hook
into external X event retrieval (for example that done by GDK).

Since:  0.8

</description>
<parameters>
<parameter name="xevent">
<parameter_description> pointer to XEvent structure
</parameter_description>
</parameter>
</parameters>
<return> #ClutterX11FilterReturn. %CLUTTER_X11_FILTER_REMOVE
indicates that Clutter has internally handled the event and the
caller should do no further processing. %CLUTTER_X11_FILTER_CONTINUE
indicates that Clutter is either not interested in the event,
or has used the event to update internal state without taking
any exclusive action. %CLUTTER_X11_FILTER_TRANSLATE will not
occur.

</return>
</function>

<function name="clutter_get_default_frame_rate">
<description>
Retrieves the default frame rate. See clutter_set_default_frame_rate().

Since: 0.6

</description>
<parameters>
</parameters>
<return> the default frame rate

</return>
</function>

<function name="clutter_actor_animate_with_alphav">
<description>
Animates the given list of properties of @actor between the current
value for each property and a new final value. The animation has a
definite behaviour given by the passed @alpha.

See clutter_actor_animate() for further details.

This function is useful if you want to use an existing #ClutterAlpha
to animate @actor.

This is the vector-based variant of clutter_actor_animate_with_alpha(),
useful for language bindings.

&lt;warning&gt;Unlike clutter_actor_animate_with_alpha(), this function will
not allow you to specify &quot;signal::&quot; names and callbacks.&lt;/warning&gt;

Since: 1.0

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="n_properties">
<parameter_description> number of property names and values
</parameter_description>
</parameter>
<parameter name="properties">
<parameter_description> a vector
containing the property names to set
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a vector containing the
property values to set
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterAnimation object. The object is owned by the
#ClutterActor and should not be unreferenced with g_object_unref()

</return>
</function>

<function name="clutter_actor_is_scaled">
<description>
Checks whether the actor is scaled in either dimension.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is scaled.

</return>
</function>

<function name="clutter_layout_manager_child_get">
<description>
Retrieves the values for a list of properties out of the
#ClutterLayoutMeta created by @manager and attached to the
child of a @container

Since: 1.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> a #ClutterContainer using @manager
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @container
</parameter_description>
</parameter>
<parameter name="first_property">
<parameter_description> the name of the first property
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of property name and return location for the value pairs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_add_cairo_path">
<description>
Add the nodes of the Cairo path to the end of @path.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="cpath">
<parameter_description> a Cairo path
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_main_quit">
<description>
Terminates the Clutter mainloop.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_stage_manager_peek_stages">
<description>
Lists all currently used stages.

Since: 1.0

</description>
<parameters>
<parameter name="stage_manager">
<parameter_description> a #ClutterStageManager
</parameter_description>
</parameter>
</parameters>
<return> a pointer
to the internal list of #ClutterStage objects. The returned list
is owned by the #ClutterStageManager and should never be modified
or freed

</return>
</function>

<function name="clutter_layout_manager_get_preferred_width">
<description>
Computes the minimum and natural widths of the @container according
to @manager.

See also clutter_actor_get_preferred_width()

Since: 1.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
<parameter name="container">
<parameter_description> the #ClutterContainer using @manager
</parameter_description>
</parameter>
<parameter name="for_height">
<parameter_description> the height for which the width should be computed, or -1
</parameter_description>
</parameter>
<parameter name="min_width_p">
<parameter_description> return location for the minimum width
of the layout, or %NULL
</parameter_description>
</parameter>
<parameter name="nat_width_p">
<parameter_description> return location for the natural width
of the layout, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_box_layout_set_easing_mode">
<description>
Sets the easing mode to be used by @layout when animating changes in layout
properties

Use clutter_box_layout_set_use_animations() to enable and disable the
animations

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> an easing mode, either from #ClutterAnimationMode or a logical id
from clutter_alpha_register_func()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_activatable">
<description>
Retrieves whether a #ClutterText is activatable or not.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is activatable

</return>
</function>

<function name="clutter_animator_get_timeline">
<description>
Get the timeline hooked up for driving the #ClutterAnimator

Since: 1.2

</description>
<parameters>
<parameter name="animator">
<parameter_description> a #ClutterAnimator
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterTimeline that drives the animator

</return>
</function>

<function name="clutter_units_from_pt">
<description>
Stores a value in typographic points inside @units

Since: 1.0

</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
<parameter name="pt">
<parameter_description> typographic points
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_box_layout_set_pack_start">
<description>
Sets whether children of @layout should be layed out by appending
them or by prepending them

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="pack_start">
<parameter_description> %TRUE if the @layout should pack children at the
beginning of the layout
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_clear">
<description>
Removes all nodes from the path.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_scriptable_parse_custom_node">
<description>
Parses the passed JSON node. The implementation must set the type
of the passed #GValue pointer using g_value_init().

Since: 0.6

</description>
<parameters>
<parameter name="scriptable">
<parameter_description> a #ClutterScriptable
</parameter_description>
</parameter>
<parameter name="script">
<parameter_description> the #ClutterScript creating the scriptable instance
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the generic value to be set
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the node
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> the JSON node to be parsed
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the node was successfully parsed, %FALSE otherwise.

</return>
</function>

<function name="json_array_remove_element">
<description>
Removes the #JsonNode inside @array at @index_ freeing its allocated
resources.

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the position of the element to be removed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_media_set_audio_volume">
<description>
Sets the playback volume of @media to @volume.

Since: 1.0

</description>
<parameters>
<parameter name="media">
<parameter_description> a #ClutterMedia
</parameter_description>
</parameter>
<parameter name="volume">
<parameter_description> the volume as a double between 0.0 and 1.0
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_map">
<description>
Sets the %CLUTTER_ACTOR_MAPPED flag on the actor and possibly maps
and realizes its children if they are visible. Does nothing if the
actor is not visible.

Calling this is allowed in only one case: you are implementing the
#ClutterActor::map virtual function in an actor and you need to map
the children of that actor. It is not necessary to call this
if you implement #ClutterContainer because the default implementation
will automatically map children of containers.

When overriding map, it is mandatory to chain up to the parent
implementation.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_get_iter_at_row">
<description>
Retrieves a #ClutterModelIter representing the row at the given index.

If a filter function has been set using clutter_model_set_filter()
then the @model implementation will return the first non filtered
row.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> position of the row to retrieve
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterModelIter, or %NULL if @row was
out of bounds. When done using the iterator object, call g_object_unref()
to deallocate its resources

</return>
</function>

<function name="json_object_new">
<description>
Creates a new #JsonObject, an JSON object type representation.


</description>
<parameters>
</parameters>
<return> the newly created #JsonObject
</return>
</function>

<function name="clutter_model_get_last_iter">
<description>
Retrieves a #ClutterModelIter representing the last non-filtered
row in @model.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterModelIter.
Call g_object_unref() when done using it

</return>
</function>

<function name="clutter_text_get_selectable">
<description>
Retrieves whether a #ClutterText is selectable or not.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is selectable

</return>
</function>

<function name="clutter_container_remove_actor">
<description>
Removes @actor from @container. The actor should be unparented, so
if you want to keep it around you must hold a reference to it
yourself, using g_object_ref(). When the actor has been removed,
the &quot;actor-removed&quot; signal is emitted by @container.

Since: 0.4

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_flow_layout_set_column_spacing">
<description>
Sets the space between columns, in pixels

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="spacing">
<parameter_description> the space between columns
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_name">
<description>
Sets the given name to @self. The name can be used to identify
a #ClutterActor.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> Textual tag to apply to actor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_copy">
<description>
Copies the passed iterator.

Since: 0.8

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> a copy of the iterator, or %NULL

</return>
</function>

<function name="clutter_get_motion_events_enabled">
<description>
Gets whether the per-actor motion events are enabled.

Since: 0.6

</description>
<parameters>
</parameters>
<return> %TRUE if the motion events are enabled

</return>
</function>

<function name="clutter_backend_set_double_click_distance">
<description>
Sets the maximum distance used to verify a double click event.

Since: 0.4

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
<parameter name="distance">
<parameter_description> a distance, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_set_duration">
<description>
Sets the duration of the timeline, in milliseconds. The speed
of the timeline depends on the ClutterTimeline:fps setting.

Since: 0.6

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> duration of the timeline in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_create_pango_layout">
<description>
Creates a new #PangoLayout from the same #PangoContext used
by the #ClutterActor. The #PangoLayout is already configured
with the font map, resolution and font options, and the
given @text.

If you want to keep around a #PangoLayout created by this
function you will have to connect to the #ClutterBackend::font-changed
and #ClutterBackend::resolution-changed signals, and call
pango_layout_context_changed() in response to them.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> (allow-none) the text to set on the #PangoLayout, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the newly created #PangoLayout. Use g_object_unref()
when done

</return>
</function>

<function name="clutter_event_get_source">
<description>
Retrieves the source #ClutterActor the event originated from, or
NULL if the event has no source.

Since: 0.6

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterActor

</return>
</function>

<function name="clutter_actor_get_z_rotation_gravity">
<description>
Retrieves the center for the rotation around the Z axis as a
compass direction. If the center was specified in pixels or units
this will return %CLUTTER_GRAVITY_NONE.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the Z rotation center

</return>
</function>

<function name="cogl_pango_font_map_get_renderer">
<description>
Retrieves the #CoglPangoRenderer for the passed font map.

Since: 1.0

</description>
<parameters>
<parameter name="fm">
<parameter_description> a #CoglPangoFontMap
</parameter_description>
</parameter>
</parameters>
<return> a #PangoRenderer

</return>
</function>

<function name="clutter_x11_get_default_display">
<description>
Retrieves the pointer to the default display.

Since: 0.6

</description>
<parameters>
</parameters>
<return> the default display

</return>
</function>

<function name="clutter_timeline_get_progress">
<description>
The position of the timeline in a [0, 1] interval.

Since: 0.6

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the position of the timeline.

</return>
</function>

<function name="clutter_color_to_pixel">
<description>
Converts @color into a packed 32 bit integer, containing
all the four 8 bit channels used by #ClutterColor.


</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> a packed color
</return>
</function>

<function name="clutter_backend_get_double_click_distance">
<description>
Retrieves the distance used to verify a double click event

Since: 0.4

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
</parameters>
<return> a distance, in pixels.

</return>
</function>

<function name="clutter_event_get_device_type">
<description>
Retrieves the type of the device for @event

Since: 1.0

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterInputDeviceType for the device, if
any is set

</return>
</function>

<function name="clutter_texture_get_pixel_format">
<description>
Retrieves the pixel format used by @texture. This is
equivalent to:

|[
handle = clutter_texture_get_pixel_format (texture);

if (handle != COGL_INVALID_HANDLE)
format = cogl_texture_get_format (handle);
]|

Since: 1.0

</description>
<parameters>
<parameter name="texture">
<parameter_description> a #ClutterTexture
</parameter_description>
</parameter>
</parameters>
<return> a #CoglPixelFormat value

</return>
</function>

<function name="clutter_container_child_set">
<description>
Sets container specific properties on the child of a container.

Since: 0.8

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor that is a child of @container.
</parameter_description>
</parameter>
<parameter name="first_prop">
<parameter_description> name of the first property to be set.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value for the first property, followed optionally by more name/value
pairs terminated with NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_get_default_screen">
<description>
Gets the number of the default X Screen object.

Since: 0.6

</description>
<parameters>
</parameters>
<return> the number of the default screen

</return>
</function>

<function name="clutter_path_add_rel_move_to">
<description>
Same as clutter_path_add_move_to() except the coordinates are
relative to the previous node.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animation_get_alpha">
<description>
Retrieves the #ClutterAlpha used by @animation.

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
</parameters>
<return> the alpha object used by the animation

</return>
</function>

<function name="clutter_get_current_event_time">
<description>
Retrieves the timestamp of the last event, if there is an
event or if the event has a timestamp.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the event timestamp, or %CLUTTER_CURRENT_TIME

</return>
</function>

<function name="clutter_timeline_stop">
<description>
Stops the #ClutterTimeline and moves to frame 0

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_get_current_event">
<description>
If an event is currently being processed, return that event.
This function is intended to be used to access event state
that might not be exposed by higher-level widgets.  For
example, to get the key modifier state from a Button 'clicked'
event.

Since: 1.2

</description>
<parameters>
</parameters>
<return> The current ClutterEvent, or %NULL if none

</return>
</function>

<function name="clutter_rectangle_set_color">
<description>
Sets the color of @rectangle.

</description>
<parameters>
<parameter name="rectangle">
<parameter_description> a #ClutterRectangle
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_clear_glyph_cache">
<description>
Clears the internal cache of glyphs used by the Pango
renderer. This will free up some memory and GL texture
resources. The cache will be automatically refilled as more text is
drawn.

Since: 0.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_texture_get_max_tile_waste">
<description>
Gets the maximum waste that will be used when creating a texture or
-1 if slicing is disabled.

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
</parameters>
<return> The maximum waste or -1 if the texture waste is
unlimited.

</return>
</function>

<function name="clutter_text_set_markup">
<description>
Sets @markup as the contents of a #ClutterText.

This is a convenience function for setting a string containing
Pango markup, and it is logically equivalent to:

|[
clutter_text_set_text (CLUTTER_TEXT (actor), markup);
clutter_text_set_use_markup (CLUTTER_TEXT (actor), TRUE);
]|

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="markup">
<parameter_description> a string containing Pango markup. Passing %NULL is the same
as passing &quot;&quot; (the empty string)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animation_bind">
<description>
Adds a single property with name @property_name to the
animation @animation.  For more information about animations,
see clutter_actor_animate().

This method returns the animation primarily to make chained
calls convenient in language bindings.

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the property to control
</parameter_description>
</parameter>
<parameter name="final">
<parameter_description> The final value of the property
</parameter_description>
</parameter>
</parameters>
<return> The animation itself.

</return>
</function>

<function name="json_object_remove_member">
<description>
Removes @member_name from @object, freeing its allocated resources.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_vertex_copy">
<description>
Copies @vertex

Since: 1.0

</description>
<parameters>
<parameter name="vertex">
<parameter_description> a #ClutterVertex
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated copy of #ClutterVertex. Use
clutter_vertex_free() to free the allocated resources

</return>
</function>

<function name="clutter_actor_get_transformed_size">
<description>
Gets the absolute size of an actor in pixels, taking into account the
scaling factors.

If the actor has a valid allocation, the allocated size will be used.
If the actor has not a valid allocation then the preferred size will
be transformed and returned.

If you want the transformed allocation, see
clutter_actor_get_abs_allocation_vertices() instead.

&lt;note&gt;When the actor (or one of its ancestors) is rotated around the
X or Y axis, it no longer appears as on the stage as a rectangle, but
as a generic quadrangle; in that case this function returns the size
of the smallest rectangle that encapsulates the entire quad. Please
note that in this case no assumptions can be made about the relative
position of this envelope to the absolute position of the actor, as
returned by clutter_actor_get_transformed_position(); if you need this
information, you need to use clutter_actor_get_abs_allocation_vertices()
to get the coords of the actual quadrangle.&lt;/note&gt;

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_get_actors">
<description>
Retrieves all the actors to which @behave applies. It is not recommended
for derived classes to use this in there alpha notify method but use 
#clutter_behaviour_actors_foreach as it avoids alot of needless allocations.

Since: 0.2

</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
</parameters>
<return> a list of
actors. You should free the returned list with g_slist_free() when
finished using it.

</return>
</function>

<function name="clutter_threads_set_lock_functions">
<description>
Allows the application to replace the standard method that
Clutter uses to protect its data structures. Normally, Clutter
creates a single #GMutex that is locked by clutter_threads_enter(),
and released by clutter_threads_leave(); using this function an
application provides, instead, a function @enter_fn that is
called by clutter_threads_enter() and a function @leave_fn that is
called by clutter_threads_leave().

The functions must provide at least same locking functionality
as the default implementation, but can also do extra application
specific processing.

As an example, consider an application that has its own recursive
lock that when held, holds the Clutter lock as well. When Clutter
unlocks the Clutter lock when entering a recursive main loop, the
application must temporarily release its lock as well.

Most threaded Clutter apps won't need to use this method.

This method must be called before clutter_threads_init(), and cannot
be called multiple times.

Since: 0.4

</description>
<parameters>
<parameter name="enter_fn">
<parameter_description> function called when aquiring the Clutter main lock
</parameter_description>
</parameter>
<parameter name="leave_fn">
<parameter_description> function called when releasing the Clutter main lock
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_set_cogl_material">
<description>
Replaces the underlying Cogl material drawn by this actor with
@cogl_material. A reference to the material is taken so if the
handle is no longer needed it should be deref'd with
cogl_handle_unref. Texture data is attached to the material so
calling this function also replaces the Cogl
texture. #ClutterTexture requires that the material have a texture
layer so you should set one on the material before calling this
function.

Since: 0.8


</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
<parameter name="cogl_material">
<parameter_description> A CoglHandle for a material
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_enable_xinput">
<description>
Enables the use of the XInput extension if present on connected
XServer and support built into Clutter. XInput allows for multiple
pointing devices to be used.

This function must be called before clutter_init().

Since XInput might not be supported by the X server, you might
want to use clutter_x11_has_xinput() to see if support was enabled.

Since: 0.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_event_copy">
<description>
Copies @event.


</description>
<parameters>
<parameter name="event">
<parameter_description> A #ClutterEvent.
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #ClutterEvent
</return>
</function>

<function name="clutter_actor_is_rotated">
<description>
Checks whether any rotation is applied to the actor.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is rotated.

</return>
</function>

<function name="clutter_actor_get_scale">
<description>
Retrieves an actors scale factors.

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> Location to store horizonal
scale factor, or %NULL.
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> Location to store vertical
scale factor, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_request_mode">
<description>
Sets the geometry request mode of @self.

The @mode determines the order for invoking
clutter_actor_get_preferred_width() and
clutter_actor_get_preferred_height()

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the request mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rectangle_get_color">
<description>
Retrieves the color of @rectangle.

</description>
<parameters>
<parameter name="rectangle">
<parameter_description> a #ClutterRectangle
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_clone">
<description>
Creates a copy of @interval.

Since: 1.0

</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterInterval

</return>
</function>

<function name="clutter_box_layout_get_pack_start">
<description>
Retrieves the value set using clutter_box_layout_set_pack_start()

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterBoxLayout should pack children
at the beginning of the layout, and %FALSE otherwise

</return>
</function>

<function name="cogl_pango_render_layout_subpixel">
<description>
FIXME

Since: 1.0

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #PangoLayout
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> FIXME
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> FIXME
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> color to use when rendering the layout
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags to pass to the renderer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="cogl_pango_render_layout">
<description>
Renders @layout.

Since: 1.0

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #PangoLayout
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate to render the layout at
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate to render the layout at
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> color to use when rendering the layout
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags to pass to the renderer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_add_search_paths">
<description>
Adds @paths to the list of search paths held by @script.

The search paths are used by clutter_script_lookup_filename(), which
can be used to define search paths for the textures source file name
or other custom, file-based properties.

Since: 0.8

</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="paths">
<parameter_description> an array of strings containing different search paths
</parameter_description>
</parameter>
<parameter name="n_paths">
<parameter_description> the length of the passed array
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_get_row">
<description>
Retrieves the position of the row that the @iter points to.

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> the position of the @iter in the model

</return>
</function>

<function name="clutter_value_set_color">
<description>
Sets @value to @color.

Since: 0.8.4

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized to #CLUTTER_TYPE_COLOR
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_add_marker_at_time">
<description>
Adds a named marker that will be hit when the timeline has been
running for @msecs milliseconds. Markers are unique string
identifiers for a given time. Once @timeline reaches
@msecs, it will emit a ::marker-reached signal for each marker
attached to that time.

A marker can be removed with clutter_timeline_remove_marker(). The
timeline can be advanced to a marker using
clutter_timeline_advance_to_marker().

Since: 0.8

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="marker_name">
<parameter_description> the unique name for this marker
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> position of the marker in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_object_dup_member">
<description>
Retrieves a copy of the #JsonNode containing the value of @member_name
inside a #JsonObject

Since: 0.6

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the JSON object member to access
</parameter_description>
</parameter>
</parameters>
<return> a copy of the node for the requested object member
or %NULL. Use json_node_free() when done.

</return>
</function>

<function name="clutter_actor_box_interpolate">
<description>
Interpolates between @initial and @final #ClutterActorBox&lt;!-- --&gt;es
using @progress

Since: 1.2

</description>
<parameters>
<parameter name="initial">
<parameter_description> the initial #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="final">
<parameter_description> the final #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="progress">
<parameter_description> the interpolation progress
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> return location for the interpolation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_score_remove">
<description>
Removes the #ClutterTimeline with the given id inside @score. If
the timeline has other timelines attached to it, those are removed
as well.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the id of the timeline to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_anchor_point_gravity">
<description>
Retrieves the anchor position expressed as a #ClutterGravity. If
the anchor point was specified using pixels or units this will
return %CLUTTER_GRAVITY_NONE.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterGravity used by the anchor point

</return>
</function>

<function name="clutter_clone_set_source">
<description>
Sets @source as the source actor to be cloned by @clone.

Since: 1.0

</description>
<parameters>
<parameter name="clone">
<parameter_description> a #ClutterClone
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a #ClutterActor, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_shader_get_cogl_program">
<description>
Retrieves the underlying #CoglHandle for the shader program.

Since: 1.0

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
</parameters>
<return> A #CoglHandle for the shader program, or %NULL

</return>
</function>

<function name="clutter_actor_get_height">
<description>
Retrieves the height of a #ClutterActor.

If the actor has a valid allocation, this function will return the
height of the allocated area given to the actor.

If the actor does not have a valid allocation, this function will
return the actor's natural height, that is the preferred height of
the actor.

If you care whether you get the preferred height or the height that
has been assigned to the actor, you should probably call a different
function like clutter_actor_get_allocation_box() to retrieve the
allocated size or clutter_actor_get_preferred_height() to retrieve the
preferred height.

If an actor has a fixed height, for instance a height that has been
assigned using clutter_actor_set_height(), the height returned will
be the same value.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the height of the actor, in pixels
</return>
</function>

<function name="clutter_behaviour_ellipse_get_tilt">
<description>
Gets the tilt of the ellipse around the center in Y axis.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="angle_tilt_x">
<parameter_description> return location for tilt angle on the X axis, or %NULL.
</parameter_description>
</parameter>
<parameter name="angle_tilt_y">
<parameter_description> return location for tilt angle on the Y axis, or %NULL.
</parameter_description>
</parameter>
<parameter name="angle_tilt_z">
<parameter_description> return location for tilt angle on the Z axis, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_threads_add_idle">
<description>
Simple wrapper around clutter_threads_add_idle_full() using the
default priority.

Since: 0.4

</description>
<parameters>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="clutter_actor_get_position">
<description>
This function tries to &quot;do what you mean&quot; and tell you where the
actor is, prior to any transformations. Retrieves the fixed
position of an actor in pixels, if one has been set; otherwise, if
the allocation is valid, returns the actor's allocated position;
otherwise, returns 0,0.

The returned position is in pixels.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_threads_init">
<description>
Initialises the Clutter threading mechanism, so that Clutter API can be
called by multiple threads, using clutter_threads_enter() and
clutter_threads_leave() to mark the critical sections.

You must call g_thread_init() before this function.

This function must be called before clutter_init().

It is safe to call this function multiple times.

Since: 0.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_allocation_box">
<description>
Gets the layout box an actor has been assigned. The allocation can
only be assumed valid inside a paint() method; anywhere else, it
may be out-of-date.

An allocation does not incorporate the actor's scale or anchor point;
those transformations do not affect layout, only rendering.

&lt;note&gt;Do not call any of the clutter_actor_get_allocation_*() family
of functions inside the implementation of the get_preferred_width()
or get_preferred_height() virtual functions.&lt;/note&gt;

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="box">
<parameter_description> the function fills this in with the actor's allocation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_array_foreach_element">
<description>
Iterates over all elements of @array and calls @func on
each one of them.

It is safe to change the value of a #JsonNode of the @array
from within the iterator @func, but it is not safe to add or
remove elements from the @array.

Since: 0.8

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to be called on each element
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to be passed to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_get_sorting_column">
<description>
Retrieves the number of column used for sorting the @model.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> a column number, or -1 if the model is not sorted

</return>
</function>

<function name="clutter_actor_paint">
<description>
Renders the actor to display.

This function should not be called directly by applications.
Call clutter_actor_queue_redraw() to queue paints, instead.

This function will emit the #ClutterActor::paint signal.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_set_description">
<description>
Replaces all of the nodes in the path with nodes described by
@str. See clutter_path_add_string() for details of the format.

If the string is invalid then %FALSE is returned and the path is
unaltered.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string describing the path
</parameter_description>
</parameter>
</parameters>
<return> %TRUE is the path was valid, %FALSE otherwise.

</return>
</function>

<function name="clutter_actor_set_shader_param_int">
<description>
Sets the value for a named int parameter of the shader applied to
@actor.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> the name of the parameter
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the parameter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_from_pixel">
<description>
Converts @pixel from the packed representation of a four 8 bit channel
color to a #ClutterColor.

</description>
<parameters>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
<parameter name="pixel">
<parameter_description> a 32 bit packed integer containing a color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_set_sorting_column">
<description>
Sets the model to sort by @column. If @column is a negative value
the sorting column will be unset.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column of the @model to sort, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_box_pack_after">
<description>
Adds @actor to @box, placing it after @sibling, and sets layout
properties at the same time, if the #ClutterLayoutManager used by
@box supports them

If @sibling is %NULL then @actor is placed at the end of the
list of children, to be allocated and painted after every other child

This function is a wrapper around clutter_container_add_actor(),
clutter_container_raise_child() and clutter_layout_manager_child_set()

Since: 1.2

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterBox
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> a #ClutterActor or %NULL
</parameter_description>
</parameter>
<parameter name="first_property">
<parameter_description> the name of the first property to set, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of property name and value pairs, terminated by %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_selection_color">
<description>
Sets the color of the selection of a #ClutterText actor.

If @color is %NULL, the selection color will be the same as the
cursor color, or if no cursor color is set either then it will be
the same as the text color.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color of the selection, or %NULL to unset it
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_backend_get_font_options">
<description>
Retrieves the font options for @backend.

Since: 0.8

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
</parameters>
<return> the font options of the #ClutterBackend.
The returned #cairo_font_options_t is owned by the backend and should
not be modified or freed

</return>
</function>

<function name="clutter_box_layout_set_spacing">
<description>
Sets the spacing between children of @layout

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="spacing">
<parameter_description> the spacing between children of the layout, in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_cairo_texture_new">
<description>
Creates a new #ClutterCairoTexture actor, with a surface of @width by
@height pixels.

Since: 1.0

</description>
<parameters>
<parameter name="width">
<parameter_description> the width of the surface
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the surface
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterCairoTexture actor

</return>
</function>

<function name="clutter_model_iter_get">
<description>
Gets the value of one or more cells in the row referenced by @iter. The
variable argument list should contain integer column numbers, each column
column number followed by a place to store the value being retrieved. The
list is terminated by a -1.

For example, to get a value from column 0 with type %G_TYPE_STRING use:
&lt;informalexample&gt;&lt;programlisting&gt;
clutter_model_iter_get (iter, 0, &amp;place_string_here, -1);
&lt;/programlisting&gt;&lt;/informalexample&gt;

where place_string_here is a gchar* to be filled with the string. If
appropriate, the returned values have to be freed or unreferenced.

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of column/return location pairs, terminated by -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_set_angle_start">
<description>
Sets the angle at which movement starts; angles &gt;= 360 degress get clamped
to the canonical interval &lt;0, 360).

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="angle_start">
<parameter_description> angle at which movement starts in degrees, between 0 and 360.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_appendv">
<description>
Creates and appends a new row to the #ClutterModel, setting the row
values for the given @columns upon creation.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> the number of columns and values
</parameter_description>
</parameter>
<parameter name="columns">
<parameter_description> a vector with the columns to set
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a vector with the values
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_move_by">
<description>
Moves an actor by the specified distance relative to its current
position in pixels.

This function modifies the fixed position of an actor and thus removes
it from any layout management. Another way to move an actor is with an
anchor point, see clutter_actor_set_anchor_point().

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="dx">
<parameter_description> Distance to move Actor on X axis.
</parameter_description>
</parameter>
<parameter name="dy">
<parameter_description> Distance to move Actor on Y axis.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_attributes">
<description>
Sets the attributes list that are going to be applied to the
#ClutterText contents.

The #ClutterText actor will take a reference on the #PangoAttrList
passed to this function.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="attrs">
<parameter_description> a #PangoAttrList or %NULL to unset the attributes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_cairo_texture_set_surface_size">
<description>
Resizes the Cairo surface used by @self to @width and @height.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterCairoTexture
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the new width of the surface
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the new height of the surface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_cairo_texture_clear">
<description>
Clears @self's internal drawing surface, so that the next upload
will replace the previous contents of the #ClutterCairoTexture
rather than adding to it.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterCairoTexture
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_threads_add_frame_source_full">
<description>
Sets a function to be called at regular intervals holding the Clutter
threads lock, with the given priority. The function is called repeatedly
until it returns %FALSE, at which point the timeout is automatically
removed and the function will not be called again. The @notify function
is called when the timeout is removed.

This function is similar to clutter_threads_add_timeout_full()
except that it will try to compensate for delays. For example, if
@func takes half the interval time to execute then the function
will be called again half the interval time after it finished. In
contrast clutter_threads_add_timeout_full() would not fire until a
full interval after the function completes so the delay between
calls would be @interval * 1.5. This function does not however try
to invoke the function multiple times to catch up missing frames if
@func takes more than @interval ms to execute.

See also clutter_threads_add_idle_full().

Since: 0.8

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the frame source. Typically this will be in the
range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH.
</parameter_description>
</parameter>
<parameter name="fps">
<parameter_description> the number of times per second to call the function
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the timeout source is removed
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="clutter_behaviour_scale_new">
<description>
Creates a new  #ClutterBehaviourScale instance.

Since: 0.2

</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="x_scale_start">
<parameter_description> initial scale factor on the X axis
</parameter_description>
</parameter>
<parameter name="y_scale_start">
<parameter_description> initial scale factor on the Y axis
</parameter_description>
</parameter>
<parameter name="x_scale_end">
<parameter_description> final scale factor on the X axis
</parameter_description>
</parameter>
<parameter name="y_scale_end">
<parameter_description> final scale factor on the Y axis
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterBehaviourScale

</return>
</function>

<function name="clutter_animation_set_alpha">
<description>
Sets @alpha as the #ClutterAlpha used by @animation.

If @alpha is not %NULL, the #ClutterAnimation will take ownership
of the #ClutterAlpha instance.

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha, or %NULL to unset the current #ClutterAlpha
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_manager_get_default">
<description>
Returns the default #ClutterStageManager.

Since: 0.8

</description>
<parameters>
</parameters>
<return> the default stage manager instance. The returned
object is owned by Clutter and you should not reference or unreference it.

</return>
</function>

<function name="clutter_behaviour_set_alpha">
<description>
Binds @alpha to a #ClutterBehaviour. The #ClutterAlpha object
is what makes a behaviour work: for each tick of the timeline
used by #ClutterAlpha a new value of the alpha parameter is
computed by the alpha function; the value should be used by
the #ClutterBehaviour to update one or more properties of the
actors to which the behaviour applies.

If @alpha is not %NULL, the #ClutterBehaviour will take ownership
of the #ClutterAlpha instance.

Since: 0.2

</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha or %NULL to unset a previously set alpha
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_alpha_set_mode">
<description>
Sets the progress function of @alpha using the symbolic value
of @mode, as taken by the #ClutterAnimationMode enumeration or
using the value returned by clutter_alpha_register_func().

Since: 1.0

</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> a #ClutterAnimationMode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_array_get_array_element">
<description>
Conveniently retrieves the array from the element at @index_
inside @array

See also: json_array_get_element(), json_node_get_array()

Since: 0.8

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the element to retrieve
</parameter_description>
</parameter>
</parameters>
<return> the array

</return>
</function>

<function name="clutter_stage_get_user_resizable">
<description>
Retrieves the value set with clutter_stage_set_user_resizable().

Since: 0.4

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stage is resizable by the user.

</return>
</function>

<function name="clutter_box_layout_get_expand">
<description>
Retrieves whether @actor should expand inside @layout

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @layout
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterActor should expand, %FALSE otherwise

</return>
</function>

<function name="clutter_get_debug_enabled">
<description>
Check if clutter has debugging turned on.


</description>
<parameters>
</parameters>
<return> TRUE if debugging is turned on, FALSE otherwise.
</return>
</function>

<function name="clutter_behaviour_rotate_get_direction">
<description>
Retrieves the #ClutterRotateDirection used by the rotate behaviour.

Since: 0.4

</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
</parameters>
<return> the rotation direction

</return>
</function>

<function name="clutter_score_remove_all">
<description>
Removes all the timelines inside @score.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> a #ClutterScore
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_set_direction">
<description>
Sets the rotation direction used by the ellipse behaviour.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the rotation direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_cursor_color">
<description>
Retrieves the color of the cursor of a #ClutterText actor.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> return location for a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_texture_pixmap_new_with_window">
<description>
Creates a new #ClutterX11TexturePixmap for @window

Since: 0.8

</description>
<parameters>
<parameter name="window">
<parameter_description> the X window to which this texture should be bound
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterX11TexturePixmap bound to the given X window.

</return>
</function>

<function name="clutter_ungrab_keyboard">
<description>
Removes an existing grab of the keyboard.

Since: 0.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_single_line_mode">
<description>
Retrieves whether the #ClutterText actor is in single line mode.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterText actor is in single line mode

</return>
</function>

<function name="cogl_pango_font_map_set_use_mipmapping">
<description>
Sets whether the renderer for the passed font map should use
mipmapping when rendering a #PangoLayout.

Since: 1.0

</description>
<parameters>
<parameter name="fm">
<parameter_description> a #CoglPangoFontMap
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> %TRUE to enable the use of mipmapping
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_binding_pool_block_action">
<description>
Blocks all the actions with name @action_name inside @pool.

Since: 1.0

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> an action name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animator_key_get_object">
<description>
Retrieves the object a key applies to.

Since: 1.2

</description>
<parameters>
<parameter name="key">
<parameter_description> a #ClutterAnimatorKey
</parameter_description>
</parameter>
</parameters>
<return> the object an animator_key exist for.

</return>
</function>

<function name="clutter_behaviour_rotate_set_bounds">
<description>
Sets the initial and final angles of a rotation behaviour; angles &gt;= 360
degrees get clamped to the canonical interval &lt;0, 360).

Since: 0.4

</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
<parameter name="angle_start">
<parameter_description> initial angle in degrees, between 0 and 360.
</parameter_description>
</parameter>
<parameter name="angle_end">
<parameter_description> final angle in degrees, between 0 and 360.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_cairo_texture_create">
<description>
Creates a new Cairo context for the @cairo texture. It is
similar to using clutter_cairo_texture_create_region() with @x_offset
and @y_offset of 0, @width equal to the @cairo texture surface width
and @height equal to the @cairo texture surface height.

&lt;warning&gt;&lt;para&gt;Do not call this function within the paint virtual
function or from a callback to the #ClutterActor::paint
signal.&lt;/para&gt;&lt;/warning&gt;

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterCairoTexture
</parameter_description>
</parameter>
</parameters>
<return> a newly created Cairo context. Use cairo_destroy()
to upload the contents of the context when done drawing

</return>
</function>

<function name="clutter_animator_property_set_interpolation">
<description>
Set the interpolation method to use, %CLUTTER_INTERPOLATION_LINEAR causes
the values to linearly change between the values, and
%CLUTTER_INTERPOLATION_CUBIC causes the values to smoothly change between
the values.

Since: 1.2

</description>
<parameters>
<parameter name="animator">
<parameter_description> a #ClutterAnimatorKey
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of a property on object
</parameter_description>
</parameter>
<parameter name="interpolation">
<parameter_description> the #ClutterInterpolation to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_add_close">
<description>
Adds a %CLUTTER_PATH_CLOSE type node to the path. This creates a
straight line from the last node to the last %CLUTTER_PATH_MOVE_TO
type node.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_media_get_audio_volume">
<description>
Retrieves the playback volume of @media.

Since: 1.0

</description>
<parameters>
<parameter name="media">
<parameter_description> a #ClutterMedia
</parameter_description>
</parameter>
</parameters>
<return> The playback volume between 0.0 and 1.0

</return>
</function>

<function name="clutter_behaviour_ellipse_get_angle_start">
<description>
Gets the angle at which movements starts.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
</parameters>
<return> angle in degrees

</return>
</function>

<function name="clutter_texture_get_cogl_texture">
<description>
Retrieves the handle to the underlying COGL texture used for drawing
the actor. No extra reference is taken so if you need to keep the
handle then you should call cogl_handle_ref() on it.

The texture handle returned is the first layer of the material
handle used by the #ClutterTexture. If you need to access the other
layers you should use clutter_texture_get_cogl_material() instead
and use the #CoglMaterial API.

Since: 0.8


</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
</parameters>
<return> COGL texture handle
</return>
</function>

<function name="json_object_unref">
<description>
Decreases by one the reference count of a #JsonObject. If the
reference count reaches zero, the object is destroyed and all
its allocated resources are freed.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_box_layout_set_fill">
<description>
Sets the horizontal and vertical fill policies for @actor
inside @layout

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @layout
</parameter_description>
</parameter>
<parameter name="x_fill">
<parameter_description> whether @actor should fill horizontally the allocated space
</parameter_description>
</parameter>
<parameter name="y_fill">
<parameter_description> whether @actor should fill vertically the allocated space
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_opacity">
<description>
Retrieves the opacity value of an actor, as set by
clutter_actor_set_opacity().

For retrieving the absolute opacity of the actor inside a paint
virtual function, see clutter_actor_get_paint_opacity().


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the opacity of the actor
</return>
</function>

<function name="clutter_actor_get_depth">
<description>
Retrieves the depth of @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the depth of the actor
</return>
</function>

<function name="clutter_text_get_line_wrap_mode">
<description>
Retrieves the line wrap mode used by the #ClutterText actor.

See clutter_text_set_line_wrap_mode ().

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> the wrap mode used by the #ClutterText

</return>
</function>

<function name="clutter_actor_set_anchor_point">
<description>
Sets an anchor point for @self. The anchor point is a point in the
coordinate space of an actor to which the actor position within its
parent is relative; the default is (0, 0), i.e. the top-left corner
of the actor.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="anchor_x">
<parameter_description> X coordinate of the anchor point
</parameter_description>
</parameter>
<parameter name="anchor_y">
<parameter_description> Y coordinate of the anchor point
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_media_get_can_seek">
<description>
Retrieves whether @media is seekable or not.

Since: 0.2

</description>
<parameters>
<parameter name="media">
<parameter_description> a #ClutterMedia
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @media can seek, %FALSE otherwise.

</return>
</function>

<function name="json_array_get_string_element">
<description>
Conveniently retrieves the string value of the element at @index_
inside @array

See also: json_array_get_element(), json_node_get_string()

Since: 0.8

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the element to retrieve
</parameter_description>
</parameter>
</parameters>
<return> the string value; the returned string is owned by
the #JsonArray and should not be modified or freed

</return>
</function>

<function name="clutter_actor_get_name">
<description>
Retrieves the name of @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the name of the actor, or %NULL. The returned string is
owned by the actor and should not be modified or freed.
</return>
</function>

<function name="json_object_set_null_member">
<description>
Convenience function for setting a null @value of
@member_name inside @object.

See also: json_object_set_member()

Since: 0.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_get_use_alpha">
<description>
Retrieves the value set using clutter_stage_set_use_alpha()

Since: 1.2

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stage should honour the opacity and the
alpha channel of the stage color

</return>
</function>

<function name="clutter_animation_new">
<description>
Creates a new #ClutterAnimation instance. You should set the
#GObject to be animated using clutter_animation_set_object(),
set the duration with clutter_animation_set_duration() and the
easing mode using clutter_animation_set_mode().

Use clutter_animation_bind() or clutter_animation_bind_interval()
to define the properties to be animated. The interval and the
animated properties can be updated at runtime.

The clutter_actor_animate() and relative family of functions provide
an easy way to animate a #ClutterActor and automatically manage the
lifetime of a #ClutterAnimation instance, so you should consider using
those functions instead of manually creating an animation.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created #ClutterAnimation. Use g_object_unref()
to release the associated resources

</return>
</function>

<function name="clutter_text_set_password_char">
<description>
Sets the character to use in place of the actual text in a
password text actor.

If @wc is 0 the text will be displayed as it is entered in the
#ClutterText actor.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="wc">
<parameter_description> a Unicode character, or 0 to unset the password character
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animation_set_timeline">
<description>
Sets the #ClutterTimeline used by @animation.

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline, or %NULL to unset the
current #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_get_interval">
<description>
Variable arguments wrapper for clutter_interval_get_initial_value()
and clutter_interval_get_final_value() that avoids using the
#GValue arguments:

|[
gint a = 0, b = 0;
clutter_interval_get_interval (interval, &amp;a, &amp;b);
]|

This function is meant for the convenience of the C API; bindings
should reimplement this function using the #GValue-based API.

Since: 1.0

</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> return locations for the initial and final values of
the interval
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animator_property_set_ease_in">
<description>
Sets whether a property value is to be eased into the animation.

Since: 1.2

</description>
<parameters>
<parameter name="animator">
<parameter_description> a #ClutterAnimatorKey
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of a property on object
</parameter_description>
</parameter>
<parameter name="ease_in">
<parameter_description> we are going to be easing in this property
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_geometry">
<description>
Gets the size and position of an actor relative to its parent
actor. This is the same as calling clutter_actor_get_position() and
clutter_actor_get_size(). It tries to &quot;do what you mean&quot; and get the
requested size and position if the actor's allocation is invalid.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="geometry">
<parameter_description> A location to store actors #ClutterGeometry
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_child_meta_get_container">
<description>
Retrieves the container using @data

Since: 0.8

</description>
<parameters>
<parameter name="data">
<parameter_description> a #ClutterChildMeta
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterContainer

</return>
</function>

<function name="clutter_actor_event">
<description>
This function is used to emit an event on the main stage.
You should rarely need to use this function, except for
synthetising events.

Since: 0.6

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="capture">
<parameter_description> TRUE if event in in capture phase, FALSE otherwise.
</parameter_description>
</parameter>
</parameters>
<return> the return value from the signal emission: %TRUE
if the actor handled the event, or %FALSE if the event was
not handled

</return>
</function>

<function name="clutter_text_set_preedit_string">
<description>
Sets, or unsets, the pre-edit string. This function is useful
for input methods to display a string (with eventual specific
Pango attributes) before it is entered inside the #ClutterText
buffer.

The preedit string and attributes are ignored if the #ClutterText
actor is not editable.

This function should not be used by applications

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="preedit_str">
<parameter_description> the pre-edit string, or %NULL to unset it
</parameter_description>
</parameter>
<parameter name="preedit_attrs">
<parameter_description> the pre-edit string attributes
</parameter_description>
</parameter>
<parameter name="cursor_pos">
<parameter_description> the cursor position for the pre-edit string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_allocation_geometry">
<description>
Gets the layout box an actor has been assigned.  The allocation can
only be assumed valid inside a paint() method; anywhere else, it
may be out-of-date.

An allocation does not incorporate the actor's scale or anchor point;
those transformations do not affect layout, only rendering.

The returned rectangle is in pixels.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="geom">
<parameter_description> allocation geometry in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_pop_internal">
<description>
Disables the effects of clutter_actor_pop_internal()

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_array_dup_element">
<description>
Retrieves a copy of the #JsonNode containing the value of the
element at @index_ inside a #JsonArray

Since: 0.6

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the element to retrieve
</parameter_description>
</parameter>
</parameters>
<return> a copy of the #JsonNode at the requested index.
Use json_node_free() when done.

</return>
</function>

<function name="clutter_text_get_attributes">
<description>
Gets the attribute list that was set on the #ClutterText actor
clutter_text_set_attributes(), if any.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> the attribute list, or %NULL if none was set. The
returned value is owned by the #ClutterText and should not be unreferenced.

</return>
</function>

<function name="json_object_get_members">
<description>
Retrieves all the names of the members of a #JsonObject. You can
obtain the value for each member using json_object_get_member().


</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
</parameters>
<return> a #GList of member names. The content of the list
is owned by the #JsonObject and should never be modified or
freed. When you have finished using the returned list, use
g_list_free() to free the resources it has allocated.
</return>
</function>

<function name="clutter_model_insert">
<description>
Inserts a new row to the #ClutterModel at @row, setting the row
values upon creation. For example, to insert a new row at index 100,
where column 0 is type %G_TYPE_INT and column 1 is of type
%G_TYPE_STRING:

&lt;informalexample&gt;&lt;programlisting&gt;
ClutterModel *model;
model = clutter_model_default_new (2,
G_TYPE_INT,    &quot;Score&quot;,
G_TYPE_STRING, &quot;Team&quot;);
clutter_model_insert (model, 3, 0, 42, 1, &quot;Team #1&quot;, -1);
&lt;/programlisting&gt;&lt;/informalexample&gt;

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> the position to insert the new row
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value, terminated with -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_array_unref">
<description>
Decreases by one the reference count of a #JsonArray. If the
reference count reaches zero, the array is destroyed and all
its allocated resources are freed.

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_shade">
<description>
Shades @color by @factor and saves the modified color into @result.

</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="factor">
<parameter_description> the shade factor to apply
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> return location for the shaded color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_hash">
<description>
Converts a #ClutterColor to a hash value.

This function can be passed to g_hash_table_new() as the @hash_func
parameter, when using #ClutterColor&lt;!-- --&gt;s as keys in a #GHashTable.

Since: 1.0

</description>
<parameters>
<parameter name="v">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> a hash value corresponding to the color

</return>
</function>

<function name="clutter_value_set_shader_int">
<description>
Sets @ints as the contents of @value. The passed #GValue
must have been initialized using %CLUTTER_TYPE_SHADER_INT.

Since: 0.8

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> number of integer values in @ints
</parameter_description>
</parameter>
<parameter name="ints">
<parameter_description> an array of integer values
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_insert_value">
<description>
Sets the data in the cell specified by @iter and @column. The type of 
@value must be convertable to the type of the column. If the row does
not exist then it is created.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> position of the row to modify
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> column to modify
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> new value for the cell
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_alpha_get_timeline">
<description>
Gets the #ClutterTimeline bound to @alpha.

Since: 0.2

</description>
<parameters>
<parameter name="alpha">
<parameter_description> A #ClutterAlpha
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterTimeline instance

</return>
</function>

<function name="json_object_set_int_member">
<description>
Convenience function for setting an integer @value of
@member_name inside @object.

See also: json_object_set_member()

Since: 0.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the member
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_ellipse_get_center">
<description>
Gets the center of the elliptical path path.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate of the center, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate of the center, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animation_unbind_property">
<description>
Removes @property_name from the list of animated properties.

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> name of the property
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_get_minimum_size">
<description>
Retrieves the minimum size for a stage window as set using
clutter_stage_set_minimum_size().

The returned size may not correspond to the actual minimum size and
it is specific to the #ClutterStage implementation inside the
Clutter backend

Since: 1.2

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the minimum width, in pixels,
or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the minimum height, in pixels,
or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_append">
<description>
Creates and appends a new row to the #ClutterModel, setting the
row values upon creation. For example, to append a new row where
column 0 is type %G_TYPE_INT and column 1 is of type %G_TYPE_STRING:

&lt;informalexample&gt;&lt;programlisting&gt;
ClutterModel *model;
model = clutter_model_default_new (2,
G_TYPE_INT,    &quot;Score&quot;,
G_TYPE_STRING, &quot;Team&quot;);
clutter_model_append (model, 0, 42, 1, &quot;Team #1&quot;, -1);
&lt;/programlisting&gt;&lt;/informalexample&gt;

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value, terminated with -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_bin_layout_new">
<description>
Creates a new #ClutterBinLayout layout manager

Since: 1.2

</description>
<parameters>
<parameter name="x_align">
<parameter_description> the default alignment policy to be used on the
horizontal axis
</parameter_description>
</parameter>
<parameter name="y_align">
<parameter_description> the default alignment policy to be used on the
vertical axis
</parameter_description>
</parameter>
</parameters>
<return> the newly created layout manager

</return>
</function>

<function name="clutter_grab_pointer_for_device">
<description>
Grabs all the pointer events coming from the device @id for @actor.

If @id is -1 then this function is equivalent to clutter_grab_pointer().

Since: 0.8

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> a device id, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_color">
<description>
Sets the color of the contents of a #ClutterText actor.

The overall opacity of the #ClutterText actor will be the
result of the alpha value of @color and the composited
opacity of the actor itself on the scenegraph, as returned
by clutter_actor_get_paint_opacity().

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_flow_layout_get_orientation">
<description>
Retrieves the orientation of the @layout

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
</parameters>
<return> the orientation of the #ClutterFlowLayout

</return>
</function>

<function name="clutter_text_set_cursor_size">
<description>
Sets the size of the cursor of a #ClutterText. The cursor
will only be visible if the #ClutterText:cursor-visible property
is set to %TRUE.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the cursor, in pixels, or -1 to use the
default value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_size">
<description>
This function tries to &quot;do what you mean&quot; and return
the size an actor will have. If the actor has a valid
allocation, the allocation will be returned; otherwise,
the actors natural size request will be returned.

If you care whether you get the request vs. the allocation, you
should probably call a different function like
clutter_actor_get_allocation_box() or
clutter_actor_get_preferred_width().

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the width, or %NULL.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for the height, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_param_spec_color">
<description>
Creates a #GParamSpec for properties using #ClutterColor.

Since: 0.8.4

</description>
<parameters>
<parameter name="name">
<parameter_description> name of the property
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> short name
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description (can be translatable)
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the param spec
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GParamSpec

</return>
</function>

<function name="json_object_get_size">
<description>
Retrieves the number of members of a #JsonObject.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
</parameters>
<return> the number of members
</return>
</function>

<function name="clutter_stage_set_title">
<description>
Sets the stage title.

Since: 0.4

</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> A utf8 string for the stage windows title.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_media_get_subtitle_uri">
<description>
Retrieves the URI of the subtitle file in use.

Since: 1.2

</description>
<parameters>
<parameter name="media">
<parameter_description> a #ClutterMedia
</parameter_description>
</parameter>
</parameters>
<return> the URI of the subtitle file. Use g_free()
to free the returned string

</return>
</function>

<function name="clutter_behaviour_ellipse_set_height">
<description>
Sets the height of the elliptical path.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the ellipse
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rectangle_set_border_color">
<description>
Sets the color of the border used by @rectangle using @color

</description>
<parameters>
<parameter name="rectangle">
<parameter_description> a #ClutterRectangle
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color of the border
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_shader_new">
<description>
Create a new #ClutterShader instance.

Since: 0.6

</description>
<parameters>
</parameters>
<return> a new #ClutterShader.

</return>
</function>

<function name="clutter_feature_get_all">
<description>
Returns all the supported features.

Since: 0.1.1

</description>
<parameters>
</parameters>
<return> a logical OR of all the supported features.

</return>
</function>

<function name="clutter_actor_create_pango_context">
<description>
Creates a #PangoContext for the given actor. The #PangoContext
is already configured using the appropriate font map, resolution
and font options.

See also clutter_actor_get_pango_context().

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the newly created #PangoContext. Use g_object_unref()
on the returned value to deallocate its resources

</return>
</function>

<function name="clutter_media_get_uri">
<description>
Retrieves the URI from @media.

Since: 0.2

</description>
<parameters>
<parameter name="media">
<parameter_description> a #ClutterMedia
</parameter_description>
</parameter>
</parameters>
<return> the URI of the media stream. Use g_free()
to free the returned string

</return>
</function>

<function name="clutter_actor_queue_redraw">
<description>
Queues up a redraw of an actor and any children. The redraw occurs
once the main loop becomes idle (after the current batch of events
has been processed, roughly).

Applications rarely need to call this, as redraws are handled
automatically by modification functions.

This function will not do anything if @self is not visible, or
if the actor is inside an invisible part of the scenegraph.

Also be aware that painting is a NOP for actors with an opacity of
0

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_threads_add_timeout">
<description>
Simple wrapper around clutter_threads_add_timeout_full().

Since: 0.4

</description>
<parameters>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="clutter_behaviour_path_set_path">
<description>
Change the path that the actors will follow. This will take the
floating reference on the #ClutterPath so you do not need to unref
it.

Since: 1.0

</description>
<parameters>
<parameter name="pathb">
<parameter_description> the path behaviour
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the new path to follow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_flags">
<description>
Retrieves the flags set on @self

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> a bitwise or of #ClutterActorFlags or 0

</return>
</function>

<function name="clutter_text_set_selection_bound">
<description>
Sets the other end of the selection, starting from the current
cursor position.

If @selection_bound is -1, the selection unset.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="selection_bound">
<parameter_description> the position of the end of the selection, in characters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_set_from_rgb_data">
<description>
Sets #ClutterTexture image data.

Since: 0.4.

</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Image data in RGBA type colorspace.
</parameter_description>
</parameter>
<parameter name="has_alpha">
<parameter_description> Set to TRUE if image data has an alpha channel.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width in pixels of image data.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height in pixels of image data
</parameter_description>
</parameter>
<parameter name="rowstride">
<parameter_description> Distance in bytes between row starts.
</parameter_description>
</parameter>
<parameter name="bpp">
<parameter_description> bytes per pixel (Currently only 3 and 4 supported,
depending on @has_alpha)
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #ClutterTextureFlags
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on failure.

</return>
</function>

<function name="clutter_text_set_line_alignment">
<description>
Sets the way that the lines of a wrapped label are aligned with
respect to each other. This does not affect the overall alignment
of the label within its allocated or specified width.

To align a #ClutterText actor you should add it to a container
that supports alignment, or use the anchor point.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="alignment">
<parameter_description> A #PangoAlignment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_set_use_fog">
<description>
Sets whether the depth cueing effect on the stage should be enabled
or not.

Depth cueing is a 3D effect that makes actors farther away from the
viewing point less opaque, by fading them with the stage color.

The parameters of the GL fog used can be changed using the
clutter_stage_set_fog() function.

Since: 0.6

</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
<parameter name="fog">
<parameter_description> %TRUE for enabling the depth cueing effect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animator_property_get_interpolation">
<description>
Get the interpolation used by animator for a property on a particular
object.

Since: 1.2

</description>
<parameters>
<parameter name="animator">
<parameter_description> a #ClutterAnimatorKey
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of a property on object
</parameter_description>
</parameter>
</parameters>
<return> a ClutterInterpolation value.
</return>
</function>

<function name="clutter_shader_set_fragment_source">
<description>
Sets the GLSL source code to be used by a #ClutterShader for the fragment
program.

Since: 0.6

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> GLSL source code.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> length of source buffer (currently ignored)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_box_layout_get_easing_mode">
<description>
Retrieves the easing mode set using clutter_box_layout_set_easing_mode()

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
</parameters>
<return> an easing mode

</return>
</function>

<function name="clutter_actor_unmap">
<description>
Unsets the %CLUTTER_ACTOR_MAPPED flag on the actor and possibly
unmaps its children if they were mapped.

Calling this is allowed in only one case: you are implementing the
#ClutterActor::unmap virtual function in an actor and you need to
unmap the children of that actor. It is not necessary to call this
if you implement #ClutterContainer because the default implementation
will automatically unmap children of containers.

When overriding unmap, it is mandatory to chain up to the parent
implementation.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_new">
<description>
Creates a new #ClutterEvent of the specified type.


</description>
<parameters>
<parameter name="type">
<parameter_description> The type of event.
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #ClutterEvent.
</return>
</function>

<function name="json_object_set_array_member">
<description>
Convenience function for setting an array @value of
@member_name inside @object.

The @object will take ownership of the passed #JsonArray

See also: json_object_set_member()

Since: 0.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the member
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_add_string">
<description>
Adds new nodes to the end of the path as described in @str. The
format is a subset of the SVG path format. Each node is represented
by a letter and is followed by zero, one or three pairs of
coordinates. The coordinates can be separated by spaces or a
comma. The types are:

&lt;variablelist&gt;
&lt;varlistentry&gt;&lt;term&gt;M&lt;/term&gt;
&lt;listitem&gt;&lt;para&gt;
Adds a %CLUTTER_PATH_MOVE_TO node. Takes one pair of coordinates.
&lt;/para&gt;&lt;/listitem&gt;&lt;/varlistentry&gt;
&lt;varlistentry&gt;&lt;term&gt;L&lt;/term&gt;
&lt;listitem&gt;&lt;para&gt;
Adds a %CLUTTER_PATH_LINE_TO node. Takes one pair of coordinates.
&lt;/para&gt;&lt;/listitem&gt;&lt;/varlistentry&gt;
&lt;varlistentry&gt;&lt;term&gt;C&lt;/term&gt;
&lt;listitem&gt;&lt;para&gt;
Adds a %CLUTTER_PATH_CURVE_TO node. Takes three pairs of coordinates.
&lt;/para&gt;&lt;/listitem&gt;&lt;/varlistentry&gt;
&lt;varlistentry&gt;&lt;term&gt;z&lt;/term&gt;
&lt;listitem&gt;&lt;para&gt;
Adds a %CLUTTER_PATH_CLOSE node. No coordinates are needed.
&lt;/para&gt;&lt;/listitem&gt;&lt;/varlistentry&gt;
&lt;/variablelist&gt;

The M, L and C commands can also be specified in lower case which
means the coordinates are relative to the previous node.

For example, to move an actor in a 100 by 100 pixel square centered
on the point 300,300 you could use the following path:

&lt;informalexample&gt;
&lt;programlisting&gt;
M 250,350 l 0 -100 L 350,250 l 0 100 z
&lt;/programlisting&gt;
&lt;/informalexample&gt;

If the path description isn't valid %FALSE will be returned and no
nodes will be added.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string describing the new nodes
</parameter_description>
</parameter>
</parameters>
<return> %TRUE is the path description was valid or %FALSE
otherwise.

</return>
</function>

<function name="clutter_script_load_from_data">
<description>
Loads the definitions from @data into @script and merges with
the currently loaded ones, if any.

Since: 0.6

</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a buffer containing the definitions
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of the buffer, or -1 if @data is a NUL-terminated
buffer
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> on error, zero is returned and @error is set
accordingly. On success, the merge id for the UI definitions is
returned. You can use the merge id with clutter_script_unmerge().

</return>
</function>

<function name="json_object_get_int_member">
<description>
Convenience function that retrieves the integer value
stored in @member_name of @object

See also: json_object_get_member()

Since: 0.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
</parameters>
<return> the integer value of the object's member

</return>
</function>

<function name="clutter_x11_texture_pixmap_new_with_pixmap">
<description>
Creates a new #ClutterX11TexturePixmap for @pixmap

Since: 0.8

</description>
<parameters>
<parameter name="pixmap">
<parameter_description> the X Pixmap to which this texture should be bound
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterX11TexturePixmap bound to the given X Pixmap

</return>
</function>

<function name="clutter_behaviour_ellipse_get_angle_tilt">
<description>
Gets the tilt of the ellipse around the center in the given axis.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> a #ClutterRotateAxis
</parameter_description>
</parameter>
</parameters>
<return> angle in degrees.

</return>
</function>

<function name="clutter_stage_manager_set_default_stage">
<description>
Sets @stage as the default stage.

Since: 0.8

Deprecated: 1.2: Calling this function has no effect

</description>
<parameters>
<parameter name="stage_manager">
<parameter_description> a #ClutterStageManager
</parameter_description>
</parameter>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_set_final_value">
<description>
Sets the final value of @interval to @value. The value is
copied inside the #ClutterInterval.

Since: 1.0

</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_set_delay">
<description>
Sets the delay, in milliseconds, before @timeline should start.

Since: 0.4

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> delay in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_pause">
<description>
Pauses the #ClutterTimeline on current frame

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_position">
<description>
Sets the actor's fixed position in pixels relative to any parent
actor.

If a layout manager is in use, this position will override the
layout manager and force a fixed position.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> New left position of actor in pixels.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> New top position of actor in pixels.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_height">
<description>
Forces a height on an actor, causing the actor's preferred width
and height (if any) to be ignored.

If @height is -1 the actor will use its preferred height instead of
overriding it, i.e. you can &quot;unset&quot; the height with -1.

This function sets both the minimum and natural size of the actor.

since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Requested new height for the actor, in pixels, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_get_cogl_material">
<description>
Returns a handle to the underlying COGL material used for drawing
the actor. No extra reference is taken so if you need to keep the
handle then you should call cogl_handle_ref() on it.

Since: 1.0


</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
</parameters>
<return> COGL material handle
</return>
</function>

<function name="json_parser_get_current_line">
<description>
Retrieves the line currently parsed, starting from 1.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #JsonParser
</parameter_description>
</parameter>
</parameters>
<return> the currently parsed line.
</return>
</function>

<function name="clutter_behaviour_is_applied">
<description>
Check if @behave applied to  @actor.

Since: 0.4

</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> TRUE if actor has behaviour. FALSE otherwise.

</return>
</function>

<function name="json_generator_to_file">
<description>
Creates a JSON data stream and puts it inside @filename, overwriting the
current file contents. This operation is atomic.


</description>
<parameters>
<parameter name="generator">
<parameter_description> a #JsonGenerator
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> path to the target file
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if saving was successful.
</return>
</function>

<function name="clutter_container_child_set_property">
<description>
Sets a container-specific property on a child of @container.

Since: 0.8

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #ClutterActor that is a child of @container.
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> the name of the property to set.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_unmerge_objects">
<description>
Unmerges the objects identified by @merge_id.

Since: 0.6

</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="merge_id">
<parameter_description> merge id returned when loading a UI definition
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_is_first">
<description>
Gets whether the current iterator is at the beginning of the model
to which it belongs.

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if @iter is the first iter in the filtered model

</return>
</function>

<function name="clutter_animator_set_duration">
<description>
Runs the timeline of the #ClutterAnimator with a duration in msecs
as specified.

Since: 1.2

</description>
<parameters>
<parameter name="animator">
<parameter_description> a #ClutterAnimator
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> milliseconds a run of the animator should last.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_input_device_get_device_name">
<description>
Retrieves the name of the @device

Since: 1.2

</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
</parameters>
<return> the name of the device, or %NULL. The returned string
is owned by the #ClutterInputDevice and should never be modified
or freed

</return>
</function>

<function name="clutter_event_free">
<description>
Frees all resources used by @event.

</description>
<parameters>
<parameter name="event">
<parameter_description> A #ClutterEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_cursor_position">
<description>
Sets the cursor of a #ClutterText actor at @position.

The position is expressed in characters, not in bytes.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the new cursor position, in characters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_parser_get_root">
<description>
Retrieves the top level node from the parsed JSON stream.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #JsonParser
</parameter_description>
</parameter>
</parameters>
<return> the root #JsonNode . The returned node
is owned by the #JsonParser and should never be modified or freed.
</return>
</function>

<function name="clutter_event_get_related">
<description>
Retrieves the related actor of a crossing event.

Since: 1.0

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_ENTER or of
type %CLUTTER_LEAVE
</parameter_description>
</parameter>
</parameters>
<return> the related #ClutterActor, or %NULL

</return>
</function>

<function name="clutter_actor_box_copy">
<description>
Copies @box

Since: 1.0

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated copy of #ClutterActorBox. Use
clutter_actor_box_free() to free the allocated resources

</return>
</function>

<function name="clutter_script_connect_signals">
<description>
Connects all the signals defined into a UI definition file to their
handlers.

This method invokes clutter_script_connect_signals_full() internally
and uses  #GModule's introspective features (by opening the current
module's scope) to look at the application's symbol table.

Note that this function will not work if #GModule is not supported by
the platform Clutter is running on.

Since: 0.6

</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to be passed to the signal handlers, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_show">
<description>
Flags an actor to be displayed. An actor that isn't shown will not
be rendered on the stage.

Actors are visible by default.

If this function is called on an actor without a parent, the
#ClutterActor:show-on-set-parent will be set to %TRUE as a side
effect.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_get_fog">
<description>
Retrieves the current depth cueing settings from the stage.

Since: 0.6

</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
<parameter name="fog">
<parameter_description> return location for a #ClutterFog structure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_flow_layout_new">
<description>
Creates a new #ClutterFlowLayout with the given @orientation

Since: 1.2

</description>
<parameters>
<parameter name="orientation">
<parameter_description> the orientation of the flow layout
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterFlowLayout

</return>
</function>

<function name="clutter_interval_compute_value">
<description>
Computes the value between the @interval boundaries given the
progress @factor and puts it into @value.

Since: 1.0

</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
<parameter name="factor">
<parameter_description> the progress factor, between 0 and 1
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> return location for an initialized #GValue
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation was successful

</return>
</function>

<function name="clutter_actor_get_rotation">
<description>
Retrieves the angle and center of rotation on the given axis,
set using clutter_actor_set_rotation().

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> the axis of rotation
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return value for the X coordinate of the center of rotation
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return value for the Y coordinate of the center of rotation
</parameter_description>
</parameter>
<parameter name="z">
<parameter_description> return value for the Z coordinate of the center of rotation
</parameter_description>
</parameter>
</parameters>
<return> the angle of rotation

</return>
</function>

<function name="clutter_timeline_set_loop">
<description>
Sets whether @timeline should loop.

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="loop">
<parameter_description> %TRUE for enable looping
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_equal">
<description>
Checks @box_a and @box_b for equality

Since: 1.0

</description>
<parameters>
<parameter name="box_a">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="box_b">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the passed #ClutterActorBox are equal

</return>
</function>

<function name="clutter_x11_has_xinput">
<description>
Gets whether Clutter has XInput support.

Since: 0.8

</description>
<parameters>
</parameters>
<return> %TRUE if Clutter was compiled with XInput support
and XInput support is available at run time.

</return>
</function>

<function name="clutter_model_iter_set_value">
<description>
Sets the data in the cell specified by @iter and @column. The type of
@value must be convertable to the type of the column.

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> column number to retrieve the value from
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> new value for the cell
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_new">
<description>
Creates a new #ClutterTimeline with a duration of @msecs.

Since: 0.6

</description>
<parameters>
<parameter name="msecs">
<parameter_description> Duration of the timeline in milliseconds
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterTimeline instance. Use
g_object_unref() when done using it

</return>
</function>

<function name="cogl_pango_font_map_set_resolution">
<description>
Sets the resolution to be used by @font_map at @dpi.

Since: 1.0

</description>
<parameters>
<parameter name="font_map">
<parameter_description> a #CoglPangoFontMap
</parameter_description>
</parameter>
<parameter name="dpi">
<parameter_description> DPI to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_use_markup">
<description>
Sets whether the contents of the #ClutterText actor contains markup
in &lt;link linkend=&quot;PangoMarkupFormat&quot;&gt;Pango's text markup language&lt;/link&gt;.

Setting #ClutterText:use-markup on an editable #ClutterText will
make the actor discard any markup.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE if the text should be parsed for markup.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_get_stage_visual">
<description>
Returns an XVisualInfo suitable for creating a foreign window for the given
stage. NOTE: It doesn't do as the name may suggest, which is return the
XVisualInfo that was used to create an existing window for the given stage.

XXX: It might be best to deprecate this function and replace with something
along the lines of clutter_backend_x11_get_foreign_visual () or perhaps
clutter_stage_x11_get_foreign_visual ()

Deprecated: 1.2: Use clutter_x11_get_visual_info() instead

Since: 0.4

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> An XVisualInfo suitable for creating a foreign stage. Use
XFree() to free the returned value instead

</return>
</function>

<function name="clutter_scriptable_set_id">
<description>
Sets @id as the unique Clutter script it for this instance of
#ClutterScriptableIface.

This name can be used by user interface designer applications to
define a unique name for an object constructable using the UI
definition language parsed by #ClutterScript.

Since: 0.6

</description>
<parameters>
<parameter name="scriptable">
<parameter_description> a #ClutterScriptable
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the #ClutterScript id of the object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_box_layout_get_fill">
<description>
Retrieves the horizontal and vertical fill policies for @actor
as set using clutter_box_layout_pack() or clutter_box_layout_set_fill()

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @layout
</parameter_description>
</parameter>
<parameter name="x_fill">
<parameter_description> return location for the horizontal fill policy
</parameter_description>
</parameter>
<parameter name="y_fill">
<parameter_description> return location for the vertical fill policy
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_prev">
<description>
Sets the @iter to point at the previous position in the model.
The model implementation should take into account the presence of
a filter function.

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> The passed iterator, updated to point at the previous
row in the model.

</return>
</function>

<function name="clutter_eglx_display">
<description>
Gets the current EGLDisplay.

Since: 0.4

</description>
<parameters>
</parameters>
<return> an EGLDisplay

</return>
</function>

<function name="clutter_actor_set_z_rotation_from_gravity">
<description>
Sets the rotation angle of @self around the Z axis using the center
point specified as a compass point. For example to rotate such that
the center of the actor remains static you can use
%CLUTTER_GRAVITY_CENTER. If the actor changes size the center point
will move accordingly.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="angle">
<parameter_description> the angle of rotation
</parameter_description>
</parameter>
<parameter name="gravity">
<parameter_description> the center point of the rotation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="cogl_sqrti">
<description>
Very fast fixed point implementation of square root for integers.

This function is at least 6x faster than clib sqrt() on x86, and (this is
not a typo!) about 500x faster on ARM without FPU. It's error is &lt; 5%
for arguments &lt; %COGL_SQRTI_ARG_5_PERCENT and &lt; 10% for arguments &lt;
%COGL_SQRTI_ARG_10_PERCENT. The maximum argument that can be passed to
this function is COGL_SQRTI_ARG_MAX.

Since: 0.2

</description>
<parameters>
<parameter name="x">
<parameter_description> integer value
</parameter_description>
</parameter>
</parameters>
<return> integer square root.


</return>
</function>

<function name="clutter_actor_set_geometry">
<description>
Sets the actor's fixed position and forces its minimum and natural
size, in pixels. This means the untransformed actor will have the
given geometry. This is the same as calling clutter_actor_set_position()
and clutter_actor_set_size().

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="geometry">
<parameter_description> A #ClutterGeometry
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_get_timestamp">
<description>
Returns the approximate number of microseconds passed since clutter was
intialised.


</description>
<parameters>
</parameters>
<return> Number of microseconds since clutter_init() was called.
</return>
</function>

<function name="clutter_x11_set_stage_foreign">
<description>
Target the #ClutterStage to use an existing external X Window

Since: 0.4

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
<parameter name="xwindow">
<parameter_description> an existing X Window id
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if foreign window is valid

</return>
</function>

<function name="clutter_animator_key_get_property_type">
<description>
Retrieves the #GType of the property a key applies to

You can use this type to initialize the #GValue to pass to
clutter_animator_key_get_value()

Since: 1.2

</description>
<parameters>
<parameter name="key">
<parameter_description> a #ClutterAnimatorKey
</parameter_description>
</parameter>
</parameters>
<return> the #GType of the property

</return>
</function>

<function name="clutter_actor_box_new">
<description>
Allocates a new #ClutterActorBox using the passed coordinates
for the top left and bottom right points

Since: 1.0

</description>
<parameters>
<parameter name="x_1">
<parameter_description> X coordinate of the top left point
</parameter_description>
</parameter>
<parameter name="y_1">
<parameter_description> Y coordinate of the top left point
</parameter_description>
</parameter>
<parameter name="x_2">
<parameter_description> X coordinate of the bottom right point
</parameter_description>
</parameter>
<parameter name="y_2">
<parameter_description> Y coordinate of the bottom right point
</parameter_description>
</parameter>
</parameters>
<return> the newly allocated #ClutterActorBox. Use
clutter_actor_box_free() to free the resources

</return>
</function>

<function name="clutter_flow_layout_get_row_height">
<description>
Retrieves the minimum and maximum row heights

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="min_height">
<parameter_description> return location for the minimum row height, or %NULL
</parameter_description>
</parameter>
<parameter name="max_height">
<parameter_description> return location for the maximum row height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_get_device_id">
<description>
Retrieves the events device id if set.


</description>
<parameters>
<parameter name="event">
<parameter_description> a clutter event 
</parameter_description>
</parameter>
</parameters>
<return> A unique identifier for the device or -1 if the event has
no specific device set.
</return>
</function>

<function name="json_node_get_parent">
<description>
Retrieves the parent #JsonNode of @node.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> the parent node, or %NULL if @node is the root node
</return>
</function>

<function name="clutter_actor_set_shader_param_float">
<description>
Sets the value for a named float parameter of the shader applied
to @actor.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> the name of the parameter
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the parameter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_get_default_text_direction">
<description>
Retrieves the default direction for the text. The text direction is
determined by the locale and/or by the %CLUTTER_TEXT_DIRECTION environment
variable

The default text direction can be overridden on a per-actor basis by using
clutter_actor_set_text_direction()

Since: 1.2

</description>
<parameters>
</parameters>
<return> the default text direction

</return>
</function>

<function name="clutter_animator_set_timeline">
<description>
Sets an external timeline that will be used for driving the animation

Since: 1.2

</description>
<parameters>
<parameter name="animator">
<parameter_description> a #ClutterAnimator
</parameter_description>
</parameter>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_set_from_file">
<description>
Sets the #ClutterTexture image data from an image file. In case of
failure, %FALSE is returned and @error is set.

If #ClutterTexture:load-async is set to %TRUE, this function
will return as soon as possible, and the actual image loading
from disk will be performed asynchronously. #ClutterTexture::size-change
will be emitten when the size of the texture is available and
#ClutterTexture::load-finished will be emitted when the image has been
loaded or if an error occurred.

Since: 0.8

</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> The filename of the image in GLib file name encoding
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the image was successfully loaded and set

</return>
</function>

<function name="clutter_texture_new">
<description>
Creates a new empty #ClutterTexture object.


</description>
<parameters>
</parameters>
<return> A newly created #ClutterTexture object.
</return>
</function>

<function name="clutter_texture_get_load_data_async">
<description>
Retrieves the value set by clutter_texture_set_load_data_async()

Since: 1.0

</description>
<parameters>
<parameter name="texture">
<parameter_description> a #ClutterTexture
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #ClutterTexture should load the image
data from a file asynchronously

</return>
</function>

<function name="clutter_text_set_max_length">
<description>
Sets the maximum allowed length of the contents of the actor. If the
current contents are longer than the given length, then they will be
truncated to fit.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> the maximum number of characters allowed in the text actor; 0
to disable or -1 to set the length of the current string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_set_valist">
<description>
See clutter_model_iter_set(); this version takes a va_list for language
bindings.

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of column/value pairs, terminiated by -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_animate">
<description>
Animates the given list of properties of @actor between the current
value for each property and a new final value. The animation has a
definite duration and a speed given by the @mode.

For example, this:

|[
clutter_actor_animate (rectangle, CLUTTER_LINEAR, 250,
&quot;width&quot;, 100.0,
&quot;height&quot;, 100.0,
NULL);
]|

will make width and height properties of the #ClutterActor &quot;rectangle&quot;
grow linearly between the current value and 100 pixels, in 250 milliseconds.

The animation @mode is a logical id, either from the #ClutterAnimationMode
enumeration of from clutter_alpha_register_func().

All the properties specified will be animated between the current value
and the final value. If a property should be set at the beginning of
the animation but not updated during the animation, it should be prefixed
by the &quot;fixed::&quot; string, for instance:

|[
clutter_actor_animate (actor, CLUTTER_EASE_IN_SINE, 100,
&quot;rotation-angle-z&quot;, 360.0,
&quot;fixed::rotation-center-z&quot;, &amp;center,
NULL);
]|

Will animate the &quot;rotation-angle-z&quot; property between the current value
and 360 degrees, and set the &quot;rotation-center-z&quot; property to the fixed
value of the #ClutterVertex &quot;center&quot;.

This function will implicitly create a #ClutterAnimation object which
will be assigned to the @actor and will be returned to the developer
to control the animation or to know when the animation has been
completed.

If a name argument starts with &quot;signal::&quot;, &quot;signal-after::&quot;,
&quot;signal-swapped::&quot; or &quot;signal-swapped-after::&quot; the two following arguments
are used as callback function and data for a signal handler installed on
the #ClutterAnimation object for the specified signal name, for instance:

|[

static void
on_animation_completed (ClutterAnimation *animation,
ClutterActor     *actor)
{
clutter_actor_hide (actor);
}

clutter_actor_animate (actor, CLUTTER_EASE_IN_CUBIC, 100,
&quot;opacity&quot;, 0,
&quot;signal::completed&quot;, on_animation_completed, actor,
NULL);
]|

or, to automatically destroy an actor at the end of the animation:

|[
clutter_actor_animate (actor, CLUTTER_EASE_IN_CUBIC, 100,
&quot;opacity&quot;, 0,
&quot;signal-swapped-after::completed&quot;,
clutter_actor_destroy,
actor,
NULL);
]|

The &quot;signal::&quot; modifier is the equivalent of using g_signal_connect();
the &quot;signal-after::&quot; modifier is the equivalent of using
g_signal_connect_after() or g_signal_connect_data() with the
%G_CONNECT_AFTER; the &quot;signal-swapped::&quot; modifier is the equivalent
of using g_signal_connect_swapped() or g_signal_connect_data() with the
%G_CONNECT_SWAPPED flah; finally, the &quot;signal-swapped-after::&quot; modifier
is the equivalent of using g_signal_connect_data() with both the
%G_CONNECT_AFTER and %G_CONNECT_SWAPPED flags. The clutter_actor_animate()
function will not keep track of multiple connections to the same signal,
so it is your responsability to avoid them when calling
clutter_actor_animate() multiple times on the same actor.

Calling this function on an actor that is already being animated
will cause the current animation to change with the new final values,
the new easing mode and the new duration - that is, this code:

|[
clutter_actor_animate (actor, CLUTTER_LINEAR, 250,
&quot;width&quot;, 100.0,
&quot;height&quot;, 100.0,
NULL);
clutter_actor_animate (actor, CLUTTER_EASE_IN_CUBIC, 500,
&quot;x&quot;, 100.0,
&quot;y&quot;, 100.0,
&quot;width&quot;, 200.0,
NULL);
]|

is the equivalent of:

|[
clutter_actor_animate (actor, CLUTTER_EASE_IN_CUBIC, 500,
&quot;x&quot;, 100.0,
&quot;y&quot;, 100.0,
&quot;width&quot;, 200.0,
&quot;height&quot;, 100.0,
NULL);
]|

&lt;note&gt;Unless the animation is looping, the #ClutterAnimation created by
clutter_actor_animate() will become invalid as soon as it is
complete.&lt;/note&gt;

Since the created #ClutterAnimation instance attached to @actor
is guaranteed to be valid throughout the #ClutterAnimation::completed
signal emission chain, you will not be able to create a new animation
using clutter_actor_animate() on the same @actor from within the
#ClutterAnimation::completed signal handler unless you use
g_signal_connect_after() to connect the callback function, for instance:

|[
static void
on_animation_completed (ClutterAnimation *animation,
ClutterActor     *actor)
{
clutter_actor_animate (actor, CLUTTER_EASE_OUT_CUBIC, 250,
&quot;x&quot;, 500.0,
&quot;y&quot;, 500.0,
NULL);
}

...
animation = clutter_actor_animate (actor, CLUTTER_EASE_IN_CUBIC, 250,
&quot;x&quot;, 100.0,
&quot;y&quot;, 100.0,
NULL);
g_signal_connect (animation, &quot;completed&quot;,
G_CALLBACK (on_animation_completed),
actor);
...
]|

Since: 1.0

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> an animation mode logical id
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> duration of the animation, in milliseconds
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of a property
</parameter_description>
</parameter>
<parameter name="VarArgs">
<parameter_description> a %NULL terminated list of property names and
property values
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterAnimation object. The object is
owned by the #ClutterActor and should not be unreferenced with
g_object_unref()

</return>
</function>

<function name="clutter_texture_set_from_yuv_data">
<description>
Sets a #ClutterTexture from YUV image data. If an error occurred,
%FALSE is returned and @error is set.

Since: 0.4

</description>
<parameters>
<parameter name="texture">
<parameter_description> A #ClutterTexture
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Image data in YUV type colorspace.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width in pixels of image data.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height in pixels of image data
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #ClutterTextureFlags
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for a #GError, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the texture was successfully updated

</return>
</function>

<function name="clutter_stage_set_perspective">
<description>
Sets the stage perspective.

</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="perspective">
<parameter_description> A #ClutterPerspective
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_alpha_register_closure">
<description>
#GClosure variant of clutter_alpha_register_func().

Registers a global alpha function and returns its logical id
to be used by clutter_alpha_set_mode() or by #ClutterAnimation.

The logical id is always greater than %CLUTTER_ANIMATION_LAST.

Since: 1.0

</description>
<parameters>
<parameter name="closure">
<parameter_description> a #GClosure
</parameter_description>
</parameter>
</parameters>
<return> the logical id of the alpha function

</return>
</function>

<function name="clutter_actor_apply_relative_transform_to_point">
<description>
Transforms @point in coordinates relative to the actor into
ancestor-relative coordinates using the relevant transform
stack (i.e. scale, rotation, etc).

If @ancestor is %NULL the ancestor will be the #ClutterStage. In
this case, the coordinates returned will be the coordinates on
the stage before the projection is applied. This is different from
the behaviour of clutter_actor_apply_transform_to_point().

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="ancestor">
<parameter_description> A #ClutterActor ancestor, or %NULL to use the
default #ClutterStage
</parameter_description>
</parameter>
<parameter name="point">
<parameter_description> A point as #ClutterVertex
</parameter_description>
</parameter>
<parameter name="vertex">
<parameter_description> The translated #ClutterVertex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_threads_add_timeout_full">
<description>
Sets a function to be called at regular intervals holding the Clutter
threads lock, with the given priority. The function is called repeatedly
until it returns %FALSE, at which point the timeout is automatically
removed and the function will not be called again. The @notify function
is called when the timeout is removed.

The first call to the function will be at the end of the first @interval.

It is important to note that, due to how the Clutter main loop is
implemented, the timing will not be accurate and it will not try to
&quot;keep up&quot; with the interval. A more reliable source is available
using clutter_threads_add_frame_source_full(), which is also internally
used by #ClutterTimeline.

See also clutter_threads_add_idle_full().

Since: 0.4

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the timeout source. Typically this will be in the
range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH.
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the timeout source is removed
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="clutter_actor_set_width">
<description>
Forces a width on an actor, causing the actor's preferred width
and height (if any) to be ignored.

If @width is -1 the actor will use its preferred width request
instead of overriding it, i.e. you can &quot;unset&quot; the width with -1.

This function sets both the minimum and natural size of the actor.

since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Requested new width for the actor, in pixels, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_ellipsize">
<description>
Returns the ellipsizing position of a #ClutterText actor, as
set by clutter_text_set_ellipsize().

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> #PangoEllipsizeMode

</return>
</function>

<function name="clutter_alpha_set_timeline">
<description>
Binds @alpha to @timeline.

Since: 0.2

</description>
<parameters>
<parameter name="alpha">
<parameter_description> A #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_delete_text">
<description>
Deletes the text inside a #ClutterText actor between @start_pos
and @end_pos.

The starting and ending positions are expressed in characters,
not in bytes.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="start_pos">
<parameter_description> starting position
</parameter_description>
</parameter>
<parameter name="end_pos">
<parameter_description> ending position
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_get_duration">
<description>
Retrieves the duration of a #ClutterTimeline in milliseconds.
See clutter_timeline_set_duration().

Since: 0.6

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the duration of the timeline, in milliseconds.

</return>
</function>

<function name="clutter_get_font_map">
<description>
Retrieves the #PangoFontMap instance used by Clutter.
You can use the global font map object with the COGL
Pango API.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the #PangoFontMap instance. The returned
value is owned by Clutter and it should never be unreferenced.

</return>
</function>

<function name="clutter_behaviour_path_get_path">
<description>
Get the current path of the behaviour

Since: 1.0

</description>
<parameters>
<parameter name="pathb">
<parameter_description> a #ClutterBehaviourPath instance
</parameter_description>
</parameter>
</parameters>
<return> the path

</return>
</function>

<function name="json_object_set_member">
<description>
Sets @node as the value of @member_name inside @object.

If @object already contains a member called @member_name then
the member's current value is overwritten. Otherwise, a new
member is added to @object.

Since: 0.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> the value of the member
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_contains">
<description>
Checks whether a point with @x, @y coordinates is contained
withing @box

Since: 1.0

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of the point
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of the point
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the point is contained by the #ClutterActorBox

</return>
</function>

<function name="clutter_timeline_get_delay">
<description>
Retrieves the delay set using clutter_timeline_set_delay().

Since: 0.4

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the delay in milliseconds.

</return>
</function>

<function name="clutter_container_lower_child">
<description>
Lowers @actor to @sibling level, in the depth ordering.

Since: 0.6

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> the actor to raise
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the sibling to lower to, or %NULL to lower to the bottom
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_score_is_playing">
<description>
Query state of a #ClutterScore instance.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> A #ClutterScore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if score is currently playing

</return>
</function>

<function name="clutter_bin_layout_get_alignment">
<description>
Retrieves the horizontal and vertical alignment policies for
a child of @self

If @child is %NULL the default alignment policies will be returned
instead

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBinLayout
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child of @container
</parameter_description>
</parameter>
<parameter name="x_align">
<parameter_description> return location for the horizontal
alignment policy
</parameter_description>
</parameter>
<parameter name="y_align">
<parameter_description> return location for the vertical
alignment policy
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rectangle_set_border_width">
<description>
Sets the width (in pixel) of the border used by @rectangle.
A @width of 0 will unset the border.

Since: 0.2

</description>
<parameters>
<parameter name="rectangle">
<parameter_description> a #ClutterRectangle
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the border
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_realize">
<description>
Creates any underlying graphics resources needed by the actor to be
displayed.

Realization means the actor is now tied to a specific rendering context
(that is, a specific toplevel stage).

This function does nothing if the actor is already realized.

Because a realized actor must have realized parent actors, calling
clutter_actor_realize() will also realize all parents of the actor.

This function does not realize child actors, except in the special
case that realizing the stage, when the stage is visible, will
suddenly map (and thus realize) the children of the stage.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_show_cursor">
<description>
Shows the cursor on the stage window

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_hide_all">
<description>
Calls clutter_actor_hide() on all child actors (if any).

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_skip">
<description>
Advance timeline by the requested time in milliseconds

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> Amount of time to skip
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_binding_pool_activate">
<description>
Activates the callback associated to the action that is
bound to the @key_val and @modifiers pair.

The callback has the following signature:

|[
void (* callback) (GObject             *gobject,
const gchar         *action_name,
guint                key_val,
ClutterModifierType  modifiers,
gpointer             user_data);
]|

Where the #GObject instance is @gobject and the user data
is the one passed when installing the action with
clutter_binding_pool_install_action().

If the action bound to the @key_val, @modifiers pair has been
blocked using clutter_binding_pool_block_action(), the callback
will not be invoked, and this function will return %FALSE.

Since: 1.0

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="key_val">
<parameter_description> the key symbol
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> bitmask for the modifiers
</parameter_description>
</parameter>
<parameter name="gobject">
<parameter_description> a #GObject
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if an action was found and was activated

</return>
</function>

<function name="clutter_behaviour_get_n_actors">
<description>
Gets the number of actors this behaviour is applied too.

Since: 0.2

</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
</parameters>
<return> The number of applied actors 

</return>
</function>

<function name="clutter_animation_set_mode">
<description>
Sets the animation @mode of @animation. The animation @mode is
a logical id, either coming from the #ClutterAnimationMode enumeration
or the return value of clutter_alpha_register_func().

This function will also set #ClutterAnimation:alpha if needed.

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> an animation mode logical id
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animation_get_interval">
<description>
Retrieves the #ClutterInterval associated to @property_name
inside @animation.

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> name of the property
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterInterval or %NULL if no
property with the same name was found. The returned interval is
owned by the #ClutterAnimation and should not be unreferenced

</return>
</function>

<function name="clutter_animator_get_duration">
<description>
Retrieves the current duration of an animator

Since: 1.2

</description>
<parameters>
<parameter name="animator">
<parameter_description> a #ClutterAnimator
</parameter_description>
</parameter>
</parameters>
<return> the duration of the animation, in milliseconds

</return>
</function>

<function name="json_object_set_double_member">
<description>
Convenience function for setting a floating point @value
of @member_name inside @object.

See also: json_object_set_member()

Since: 0.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the member
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_connect_signals_full">
<description>
Connects all the signals defined into a UI definition file to their
handlers.

This function allows to control how the signal handlers are
going to be connected to their respective signals. It is meant
primarily for language bindings to allow resolving the function
names using the native API.

Applications should use clutter_script_connect_signals().

Since: 0.6

</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> signal connection function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to be passed to the signal handlers, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_filter_iter">
<description>
Checks whether the row pointer by @iter should be filtered or not using
the filtering function set on @model.

This function should be used only by subclasses of #ClutterModel.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> the row to filter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the row should be displayed,
%FALSE otherwise

</return>
</function>

<function name="clutter_event_get_key_unicode">
<description>
Retrieves the unicode value for the key that caused @keyev.


</description>
<parameters>
<parameter name="event">
<parameter_description> A #ClutterKeyEvent
</parameter_description>
</parameter>
</parameters>
<return> The unicode value representing the key
</return>
</function>

<function name="clutter_container_destroy_child_meta">
<description>
Destroys the #ClutterChildMeta wrapping @actor inside the
@container, if any.

This function is only useful when removing a #ClutterActor to
a #ClutterContainer implementation outside of the
#ClutterContainer::add() virtual function implementation.

Applications should not call this function.

Since: 1.2

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_transformed_position">
<description>
Gets the absolute position of an actor, in pixels relative to the stage.

Since: 0.8

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_advance">
<description>
Advance timeline to the requested point. The point is given as a
time in milliseconds since the timeline started.

&lt;note&gt;&lt;para&gt;The @timeline will not emit the #ClutterTimeline::new-frame
signal for the given time. The first ::new-frame signal after the call to
clutter_timeline_advance() will be emit the skipped markers.
&lt;/para&gt;&lt;/note&gt;

</description>
<parameters>
<parameter name="timeline">
<parameter_description> A #ClutterTimeline
</parameter_description>
</parameter>
<parameter name="msecs">
<parameter_description> Time to advance to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_use_markup">
<description>
Retrieves whether the contents of the #ClutterText actor should be
parsed for the Pango text markup.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the contents will be parsed for markup

</return>
</function>

<function name="clutter_model_foreach">
<description>
Calls @func for each row in the model. 

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #ClutterModelForeachFunc
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_get_selection">
<description>
Retrieves the currently selected text.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the currently
selected text, or %NULL. Use g_free() to free the returned
string.

</return>
</function>

<function name="json_generator_to_data">
<description>
Generates a JSON data stream from @generator and returns it as a
buffer.


</description>
<parameters>
<parameter name="generator">
<parameter_description> a #JsonGenerator
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the length of the returned buffer, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated buffer holding a JSON data stream. Use
g_free() to free the allocated resources.
</return>
</function>

<function name="clutter_glx_texture_pixmap_new_with_pixmap">
<description>
Creates a new #ClutterGLXTexturePixmap for @pixmap

Since: 0.8

</description>
<parameters>
<parameter name="pixmap">
<parameter_description> the X Pixmap to which this texture should be bound
</parameter_description>
</parameter>
</parameters>
<return> A new #ClutterGLXTexturePixmap bound to the given X Pixmap

</return>
</function>

<function name="clutter_get_option_group">
<description>
Returns a #GOptionGroup for the command line arguments recognized
by Clutter. You should add this group to your #GOptionContext with
g_option_context_add_group(), if you are using g_option_context_parse()
to parse your commandline arguments.

Calling g_option_context_parse() with Clutter's #GOptionGroup will result
in Clutter's initialization. That is, the following code:

|[
g_option_context_set_main_group (context, clutter_get_option_group ());
res = g_option_context_parse (context, &amp;argc, &amp;argc, NULL);
]|

is functionally equivalent to:

|[
clutter_init (&amp;argc, &amp;argv);
]|

After g_option_context_parse() on a #GOptionContext containing the
Clutter #GOptionGroup has returned %TRUE, Clutter is guaranteed to be
initialized.

Since: 0.2

</description>
<parameters>
</parameters>
<return> a #GOptionGroup for the commandline arguments
recognized by Clutter

</return>
</function>

<function name="clutter_stage_set_color">
<description>
Sets the stage color.

</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> A #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_array_add_double_element">
<description>
Conveniently adds a floating point @value into @array

See also: json_array_add_element(), json_node_set_double()

Since: 0.8

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a floating point value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_input_device_get_pointer_stage">
<description>
Retrieves the #ClutterStage underneath the pointer of @device

Since: 1.2

</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice of type %CLUTTER_POINTER_DEVICE
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #ClutterStage or %NULL

</return>
</function>

<function name="json_object_set_boolean_member">
<description>
Convenience function for setting a boolean @value of
@member_name inside @object.

See also: json_object_set_member()

Since: 0.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the member
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_init">
<description>
It will initialise everything needed to operate with Clutter and
parses some standard command line options. @argc and @argv are
adjusted accordingly so your own code will never see those standard
arguments.


</description>
<parameters>
<parameter name="argc">
<parameter_description> The number of arguments in @argv
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> A pointer to an array
of arguments.
</parameter_description>
</parameter>
</parameters>
<return> 1 on success, &lt; 0 on failure.
</return>
</function>

<function name="clutter_media_get_playing">
<description>
Retrieves the playing status of @media.

Since: 0.2

</description>
<parameters>
<parameter name="media">
<parameter_description> A #ClutterMedia object
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if playing, %FALSE if stopped.

</return>
</function>

<function name="clutter_box_packv">
<description>
Vector-based variant of clutter_box_pack(), intended for language
bindings to use

Since: 1.2

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterBox
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="n_properties">
<parameter_description> the number of properties to set
</parameter_description>
</parameter>
<parameter name="properties">
<parameter_description> a vector
containing the property names to set
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a vector containing the property
values to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_binding_pool_new">
<description>
Creates a new #ClutterBindingPool that can be used to store
key bindings for an actor. The @name must be a unique identifier
for the binding pool, so that clutter_binding_pool_find() will
be able to return the correct binding pool.

Since: 1.0

</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the binding pool
</parameter_description>
</parameter>
</parameters>
<return> the newly created binding pool with the given
name. Use g_object_unref() when done.

</return>
</function>

<function name="clutter_texture_set_repeat">
<description>
Sets whether the @texture should repeat horizontally or
vertically when the actor size is bigger than the image size

Since: 1.0

</description>
<parameters>
<parameter name="texture">
<parameter_description> a #ClutterTexture
</parameter_description>
</parameter>
<parameter name="repeat_x">
<parameter_description> %TRUE if the texture should repeat horizontally
</parameter_description>
</parameter>
<parameter name="repeat_y">
<parameter_description> %TRUE if the texture should repeat vertically
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_ensure_viewport">
<description>
Ensures that the GL viewport is updated with the current
stage window size.

This function will queue a redraw of @stage.

This function should not be called by applications; it is used
when embedding a #ClutterStage into a toolkit with another
windowing system, like GTK+.

Since: 1.0

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_backend_set_font_name">
<description>
Sets the default font to be used by Clutter. The @font_name string
must either be %NULL, which means that the font name from the
default #ClutterBackend will be used; or be something that can
be parsed by the pango_font_description_from_string() function.

Since: 1.0

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
<parameter name="font_name">
<parameter_description> the name of the font
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_actors_foreach">
<description>
Calls @func for every actor driven by @behave.

Since: 0.2

</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a function called for each actor
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> optional data to be passed to the function, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_rotate_set_center">
<description>
Sets the center of rotation. The coordinates are relative to the plane
normal to the rotation axis set with clutter_behaviour_rotate_set_axis().

Since: 0.4

</description>
<parameters>
<parameter name="rotate">
<parameter_description> a #ClutterBehaviourRotate
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X axis center of rotation
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y axis center of rotation
</parameter_description>
</parameter>
<parameter name="z">
<parameter_description> Z axis center of rotation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_grab_key_focus">
<description>
Sets the key focus of the #ClutterStage including @self
to this #ClutterActor.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_get_input_devices">
<description>
Retrieves a pointer to the list of input devices

Deprecated: 1.2: Use clutter_device_manager_peek_devices() instead

Since: 0.8


</description>
<parameters>
</parameters>
<return> a pointer to the internal list of input devices; the
returned list is owned by Clutter and should not be modified or
freed
</return>
</function>

<function name="json_node_is_null">
<description>
Checks whether @node is a %JSON_NODE_NULL

&lt;note&gt;A null node is not the same as a %NULL #JsonNode&lt;/note&gt;

Since: 0.8

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the node is null

</return>
</function>

<function name="clutter_color_to_string">
<description>
Returns a textual specification of @color in the hexadecimal form
&lt;literal&gt;rrggbbaa&lt;/literal&gt;, where &lt;literal&gt;r&lt;/literal&gt;,
&lt;literal&gt;g&lt;/literal&gt;, &lt;literal&gt;b&lt;/literal&gt; and &lt;literal&gt;a&lt;/literal&gt; are
hex digits representing the red, green, blue and alpha components
respectively.

Since: 0.2

</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated text string

</return>
</function>

<function name="clutter_actor_show_all">
<description>
Calls clutter_actor_show() on all children of an actor (if any).

Since: 0.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_shader_get_cogl_vertex_shader">
<description>
Retrieves the underlying #CoglHandle for the vertex shader.

Since: 1.0

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
</parameters>
<return> A #CoglHandle for the vertex shader, or %NULL

</return>
</function>

<function name="clutter_stage_new">
<description>
Creates a new, non-default stage. A non-default stage is a new
top-level actor which can be used as another container. It works
exactly like the default stage, but while clutter_stage_get_default()
will always return the same instance, you will have to keep a pointer
to any #ClutterStage returned by clutter_stage_create().

The ability to support multiple stages depends on the current
backend. Use clutter_feature_available() and
%CLUTTER_FEATURE_STAGE_MULTIPLE to check at runtime whether a
backend supports multiple stages.

Since: 0.8

</description>
<parameters>
</parameters>
<return> a new stage, or %NULL if the default backend does
not support multiple stages. Use clutter_actor_destroy() to
programmatically close the returned stage.

</return>
</function>

<function name="clutter_units_from_em_for_font">
<description>
Stores a value in em inside @units using @font_name

Since: 1.0

</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
<parameter name="font_name">
<parameter_description> the font name and size
</parameter_description>
</parameter>
<parameter name="em">
<parameter_description> em
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_text_set_selection">
<description>
Selects the region of text between @start_pos and @end_pos.

This function changes the position of the cursor to match
@start_pos and the selection bound to match @end_pos.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="start_pos">
<parameter_description> start of the selection, in characters
</parameter_description>
</parameter>
<parameter name="end_pos">
<parameter_description> end of the selection, in characters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_device_manager_get_device">
<description>
Retrieves the #ClutterInputDevice with the given @device_id

Since: 1.2

</description>
<parameters>
<parameter name="device_manager">
<parameter_description> a #ClutterDeviceManager
</parameter_description>
</parameter>
<parameter name="device_id">
<parameter_description> the integer id of a device
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterInputDevice or %NULL. The
returned device is owned by the #ClutterDeviceManager and should
never be modified or freed

</return>
</function>

<function name="clutter_actor_get_reactive">
<description>
Checks whether @actor is marked as reactive.

Since: 0.6

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the actor is reactive

</return>
</function>

<function name="clutter_animator_compute_value">
<description>
Compute the value for a managed property at a given progress.

If the property is an ease-in property, the current value of the property
on the object will be used as the starting point for computation.

Since: 1.2

</description>
<parameters>
<parameter name="animator">
<parameter_description> a #ClutterAnimator
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property on object to check
</parameter_description>
</parameter>
<parameter name="progress">
<parameter_description> a value between 0.0 and 1.0
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> an initialized value to store the computed result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the computation yields has a value, otherwise (when
an error occurs or the progress is before any of the keys) %FALSE is
returned and the #GValue is left untouched

</return>
</function>

<function name="clutter_actor_allocate_available_size">
<description>
Allocates @self taking into account the #ClutterActor&lt;!-- --&gt;'s
preferred size, but limiting it to the maximum available width
and height provided.

This function will do the right thing when dealing with the
actor's request mode.

The implementation of this function is equivalent to:

|[
if (request_mode == CLUTTER_REQUEST_HEIGHT_FOR_WIDTH)
{
clutter_actor_get_preferred_width (self, available_height,
&amp;min_width,
&amp;natural_width);
width = CLAMP (natural_width, min_width, available_width);

clutter_actor_get_preferred_height (self, width,
&amp;min_height,
&amp;natural_height);
height = CLAMP (natural_height, min_height, available_height);
}
else
{
clutter_actor_get_preferred_height (self, available_width,
&amp;min_height,
&amp;natural_height);
height = CLAMP (natural_height, min_height, available_height);

clutter_actor_get_preferred_width (self, height,
&amp;min_width,
&amp;natural_width);
width = CLAMP (natural_width, min_width, available_width);
}

box.x1 = x; box.y1 = y;
box.x2 = box.x1 + available_width;
box.y2 = box.y1 + available_height;
clutter_actor_allocate (self, &amp;box, flags);
]|

This function can be used by fluid layout managers to allocate
an actor's preferred size without making it bigger than the area
available for the container.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the actor's X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the actor's Y coordinate
</parameter_description>
</parameter>
<parameter name="available_width">
<parameter_description> the maximum available width, or -1 to use the
actor's natural width
</parameter_description>
</parameter>
<parameter name="available_height">
<parameter_description> the maximum available height, or -1 to use the
actor's natural height
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags controlling the allocation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_prependv">
<description>
Creates and prepends a new row to the #ClutterModel, setting the row
values for the given @columns upon creation.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> the number of columns and values to set
</parameter_description>
</parameter>
<parameter name="columns">
<parameter_description> a vector containing the columns to set
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a vector containing the values for the cells
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_event_get_coords">
<description>
Retrieves the coordinates of @event and puts them into @x and @y.

Since: 0.4

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_get_child_meta">
<description>
Retrieves the #ClutterChildMeta which contains the data about the
@container specific state for @actor.

Since: 0.8

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor that is a child of @container.
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterChildMeta for the @actor child
of @container or %NULL if the specifiec actor does not exist or the
container is not configured to provide #ClutterChildMeta&lt;!-- --&gt;s

</return>
</function>

<function name="clutter_interval_new_with_values">
<description>
Creates a new #ClutterInterval of type @gtype, between @initial
and @final.

This function is useful for language bindings.

Since: 1.0

</description>
<parameters>
<parameter name="gtype">
<parameter_description> the type of the values in the interval
</parameter_description>
</parameter>
<parameter name="initial">
<parameter_description> a #GValue holding the initial value of the interval
</parameter_description>
</parameter>
<parameter name="final">
<parameter_description> a #GValue holding the final value of the interval
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterInterval

</return>
</function>

<function name="clutter_text_new_full">
<description>
Creates a new #ClutterText actor, using @font_name as the font
description; @text will be used to set the contents of the actor;
and @color will be used as the color to render @text.

This function is equivalent to calling clutter_text_new(),
clutter_text_set_font_name(), clutter_text_set_text() and
clutter_text_set_color().

Since: 1.0

</description>
<parameters>
<parameter name="font_name">
<parameter_description> a string with a font description
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the contents of the actor
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to be used to render @text
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterText actor

</return>
</function>

<function name="clutter_units_to_string">
<description>
Converts @units into a string

See clutter_units_from_string() for the units syntax and for
examples of output

&lt;note&gt;Fractional values are truncated to the second decimal
position for em, mm and cm, and to the first decimal position for
typographic points. Pixels are integers.&lt;/note&gt;

Since: 1.0

</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the encoded
#ClutterUnits value. Use g_free() to free the string

</return>
</function>

<function name="clutter_actor_set_x">
<description>
Sets the actor's X coordinate, relative to its parent, in pixels.

Overrides any layout manager and forces a fixed position for
the actor.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the actor's position on the X axis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_y">
<description>
Sets the actor's Y coordinate, relative to its parent, in pixels.#

Overrides any layout manager and forces a fixed position for
the actor.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the actor's position on the Y axis
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_input_device_update_from_event">
<description>
Forcibly updates the state of the @device using a #ClutterEvent

This function should never be used by applications: it is meant
for integration with embedding toolkits, like clutter-gtk

Embedding toolkits that disable the event collection inside Clutter
need to use this function to update the state of input devices depending
on a #ClutterEvent that they are going to submit to the event handling code
in Clutter though clutter_do_event(). Since the input devices hold the state
that is going to be used to fill in fields like the #ClutterButtonEvent
click count, or to emit synthesized events like %CLUTTER_ENTER and
%CLUTTER_LEAVE, it is necessary for embedding toolkits to also be
responsible of updating the input device state.

For instance, this might be the code to translate an embedding toolkit
native motion notification into a Clutter #ClutterMotionEvent and ask
Clutter to process it:

|[
ClutterEvent c_event;

translate_native_event_to_clutter (native_event, &amp;c_event);

clutter_do_event (&amp;c_event);
]|

Before letting clutter_do_event() process the event, it is necessary to call
clutter_input_device_update_from_event():

|[
ClutterEvent c_event;
ClutterDeviceManager *manager;
ClutterInputDevice *device;

translate_native_event_to_clutter (native_event, &amp;c_event);

/ * get the device manager * /
manager = clutter_device_manager_get_default ();

/ * use the default Core Pointer that Clutter
* backends register by default
* /
device = clutter_device_manager_get_core_device (manager, %CLUTTER_POINTER_DEVICE);

/ * update the state of the input device * /
clutter_input_device_update_from_event (device, &amp;c_event, FALSE);

clutter_do_event (&amp;c_event);
]|

The @update_stage boolean argument should be used when the input device
enters and leaves a #ClutterStage; it will use the #ClutterStage field
of the passed @event to update the stage associated to the input device.

Since: 1.2

</description>
<parameters>
<parameter name="device">
<parameter_description> a #ClutterInputDevice
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
<parameter name="update_stage">
<parameter_description> whether to update the #ClutterStage of the @device
using the stage of the event
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_depth_new">
<description>
Creates a new #ClutterBehaviourDepth which can be used to control
the ClutterActor:depth property of a set of #ClutterActor&lt;!-- --&gt;s.

Since: 0.4

</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha or %NULL
</parameter_description>
</parameter>
<parameter name="depth_start">
<parameter_description> initial value of the depth
</parameter_description>
</parameter>
<parameter name="depth_end">
<parameter_description> final value of the depth
</parameter_description>
</parameter>
</parameters>
<return> the newly created behaviour

</return>
</function>

<function name="clutter_binding_pool_find">
<description>
Finds the #ClutterBindingPool with @name.

Since: 1.0

</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the binding pool to find
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #ClutterBindingPool, or %NULL

</return>
</function>

<function name="clutter_model_get_n_columns">
<description>
Retrieves the number of columns inside @model.

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> a #ClutterModel
</parameter_description>
</parameter>
</parameters>
<return> the number of columns

</return>
</function>

<function name="clutter_scriptable_set_custom_property">
<description>
Overrides the common properties setting. The underlying virtual
function should be used when implementing custom properties.

Since: 0.6

</description>
<parameters>
<parameter name="scriptable">
<parameter_description> a #ClutterScriptable
</parameter_description>
</parameter>
<parameter name="script">
<parameter_description> the #ClutterScript creating the scriptable instance
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the property
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the property
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animator_start">
<description>
Start the ClutterAnimator, this is a thin wrapper that rewinds
and starts the animators current timeline.

Since: 1.2

</description>
<parameters>
<parameter name="animator">
<parameter_description> a #ClutterAnimator
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterTimeline that drives the animator.

</return>
</function>

<function name="clutter_box_layout_get_alignment">
<description>
Retrieves the horizontal and vertical alignment policies for @actor
as set using clutter_box_layout_pack() or clutter_box_layout_set_alignment()

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @layout
</parameter_description>
</parameter>
<parameter name="x_align">
<parameter_description> return location for the horizontal alignment policy
</parameter_description>
</parameter>
<parameter name="y_align">
<parameter_description> return location for the vertical alignment policy
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_iter_is_last">
<description>
Gets whether the iterator is at the end of the model to which it
belongs.

Since: 0.6

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #ClutterModelIter
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if @iter is the last iter in the filtered model.

</return>
</function>

<function name="clutter_score_start">
<description>
Starts the score.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> A #ClutterScore
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_media_set_playing">
<description>
Starts or stops playing of @media.

Since: 0.2

</description>
<parameters>
<parameter name="media">
<parameter_description> a #ClutterMedia
</parameter_description>
</parameter>
<parameter name="playing">
<parameter_description> %TRUE to start playing
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_alpha_set_closure">
<description>
Sets the #GClosure used to compute the alpha value at each
frame of the #ClutterTimeline bound to @alpha.

Since: 0.8

</description>
<parameters>
<parameter name="alpha">
<parameter_description> A #ClutterAlpha
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description> A #GClosure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_read_pixels">
<description>
Makes a screenshot of the stage in RGBA 8bit data, returns a
linear buffer with @width * 4 as rowstride.

The alpha data contained in the returned buffer is driver-dependent,
and not guaranteed to hold any sensible value.


</description>
<parameters>
<parameter name="stage">
<parameter_description> A #ClutterStage
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate of the first pixel that is read from stage
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate of the first pixel that is read from stage
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width dimention of pixels to be read, or -1 for the
entire stage width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height dimention of pixels to be read, or -1 for the
entire stage height
</parameter_description>
</parameter>
</parameters>
<return> a pointer to newly allocated memory with the buffer
or %NULL if the read failed. Use g_free() on the returned data
to release the resources it has allocated.
</return>
</function>

<function name="clutter_value_set_shader_float">
<description>
Sets @floats as the contents of @value. The passed #GValue
must have been initialized using %CLUTTER_TYPE_SHADER_FLOAT.

Since: 0.8

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> number of floating point values in @floats
</parameter_description>
</parameter>
<parameter name="floats">
<parameter_description> an array of floating point values
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_add">
<description>
Adds @a to @b and saves the resulting color inside @result.

The alpha channel of @result is set as as the maximum value
between the alpha channels of @a and @b.

</description>
<parameters>
<parameter name="a">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> return location for the result
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_reactive">
<description>
Sets @actor as reactive. Reactive actors will receive events.

Since: 0.6

</description>
<parameters>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="reactive">
<parameter_description> whether the actor should be reactive to events
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_clamp_to_pixel">
<description>
Clamps the components of @box to the nearest integer

Since: 1.2

</description>
<parameters>
<parameter name="box">
<parameter_description> the #ClutterActorBox to clamp
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_x11_set_display">
<description>
Sets the display connection Clutter should use; must be called
before clutter_init(), clutter_init_with_args() or other functions
pertaining Clutter's initialization process.

If you are parsing the command line arguments by retrieving Clutter's
#GOptionGroup with clutter_get_option_group() and calling
g_option_context_parse() yourself, you should also call
clutter_x11_set_display() before g_option_context_parse().

Since: 0.8

</description>
<parameters>
<parameter name="xdpy">
<parameter_description> pointer to a X display connection.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_alpha_new_full">
<description>
Creates a new #ClutterAlpha instance and sets the timeline
and animation mode.

See also clutter_alpha_set_timeline() and clutter_alpha_set_mode().

Since: 1.0

</description>
<parameters>
<parameter name="timeline">
<parameter_description> #ClutterTimeline timeline
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> animation mode
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterAlpha

</return>
</function>

<function name="clutter_text_get_chars">
<description>
Retrieves the contents of the #ClutterText actor between
@start_pos and @end_pos.

The positions are specified in characters, not in bytes.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="start_pos">
<parameter_description> start of text, in characters
</parameter_description>
</parameter>
<parameter name="end_pos">
<parameter_description> end of text, in characters
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string with the contents of
the text actor between the specified positions. Use g_free()
to free the resources when done

</return>
</function>

<function name="clutter_set_default_frame_rate">
<description>
Sets the default frame rate. This frame rate will be used to limit
the number of frames drawn if Clutter is not able to synchronize
with the vertical refresh rate of the display. When synchronization
is possible, this value is ignored.

Since: 0.6

</description>
<parameters>
<parameter name="frames_per_sec">
<parameter_description> the new default frame rate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_set_boolean">
<description>
Sets @value as the boolean content of the @node, replacing any existing
content.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a boolean value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_texture_get_repeat">
<description>
Retrieves the horizontal and vertical repeat values set
using clutter_texture_set_repeat()

Since: 1.0

</description>
<parameters>
<parameter name="texture">
<parameter_description> a #ClutterTexture
</parameter_description>
</parameter>
<parameter name="repeat_x">
<parameter_description> return location for the horizontal repeat
</parameter_description>
</parameter>
<parameter name="repeat_y">
<parameter_description> return location for the vertical repeat
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_main">
<description>
Starts the Clutter mainloop.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_units_from_string">
<description>
Parses a value and updates @units with it

A #ClutterUnits expressed in string should match:

|[
units: wsp* unit-value wsp* unit-name? wsp*
unit-value: number
unit-name: 'px' | 'pt' | 'mm' | 'em' | 'cm'
number: digit+
| digit* sep digit+
sep: '.' | ','
digit: '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
wsp: (#0x20 | #0x9 | #0xA | #0xB | #0xC | #0xD)+
]|

For instance, these are valid strings:

|[
10 px
5.1 em
24 pt
12.6 mm
.3 cm
]|

While these are not:

|[
42 cats
omg!1!ponies
]|

&lt;note&gt;If no unit is specified, pixels are assumed.&lt;/note&gt;

Since: 1.0

</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> the string to convert
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the string was successfully parsed,
and %FALSE otherwise

</return>
</function>

<function name="clutter_device_manager_list_devices">
<description>
Lists all currently registered input devices

Since: 1.2

</description>
<parameters>
<parameter name="device_manager">
<parameter_description> a #ClutterDeviceManager
</parameter_description>
</parameter>
</parameters>
<return>
a newly allocated list of #ClutterInputDevice objects. Use
g_slist_free() to deallocate it when done

</return>
</function>

<function name="clutter_behaviour_get_alpha">
<description>
Retrieves the #ClutterAlpha object bound to @behave.

Since: 0.2

</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterAlpha object, or %NULL if no alpha
object has been bound to this behaviour.

</return>
</function>

<function name="cogl_util_next_p2">
<description>
Calculates the next power greater than @a.


</description>
<parameters>
<parameter name="a">
<parameter_description> Value to get the next power
</parameter_description>
</parameter>
</parameters>
<return> The next power after @a.
</return>
</function>

<function name="clutter_text_get_cursor_size">
<description>
Retrieves the size of the cursor of a #ClutterText actor.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> the size of the cursor, in pixels

</return>
</function>

<function name="clutter_color_lighten">
<description>
Lightens @color by a fixed amount, and saves the changed color
in @result.

</description>
<parameters>
<parameter name="color">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> return location for the lighter color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_animation_completed">
<description>
Emits the ::completed signal on @animation

When using this function with a #ClutterAnimation created
by the clutter_actor_animate() family of functions, @animation
will be unreferenced and it will not be valid anymore,
unless g_object_ref() was called before calling this function
or unless a reference was taken inside a handler for the
#ClutterAnimation::completed signal

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_get_double">
<description>
Gets the double value stored inside a #JsonNode


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
</parameters>
<return> a double value.
</return>
</function>

<function name="clutter_event_get_scroll_direction">
<description>
Retrieves the direction of the scrolling of @event

Since: 1.0

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_SCROLL
</parameter_description>
</parameter>
</parameters>
<return> the scrolling direction

</return>
</function>

<function name="clutter_event_get_time">
<description>
Retrieves the time of the event.

Since: 0.4

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the time of the event, or %CLUTTER_CURRENT_TIME

</return>
</function>

<function name="json_array_add_boolean_element">
<description>
Conveniently adds a boolean @value into @array

See also: json_array_add_element(), json_node_set_boolean()

Since: 0.8

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a boolean value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_binding_pool_unblock_action">
<description>
Unblockes all the actions with name @action_name inside @pool.

Unblocking an action does not cause the callback bound to it to
be invoked in case clutter_binding_pool_activate() was called on
an action previously blocked with clutter_binding_pool_block_action().

Since: 1.0

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> an action name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_group_new">
<description>
Create a new  #ClutterGroup.


</description>
<parameters>
</parameters>
<return> the newly created #ClutterGroup actor
</return>
</function>

<function name="clutter_text_get_cursor_visible">
<description>
Retrieves whether the cursor of a #ClutterText actor is visible.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the cursor is visible

</return>
</function>

<function name="json_node_dup_string">
<description>
Gets a copy of the string value stored inside a #JsonNode


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode of type %JSON_NODE_VALUE
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing a copy of
the #JsonNode contents
</return>
</function>

<function name="clutter_behaviour_ellipse_get_width">
<description>
Gets the width of the elliptical path.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
</parameters>
<return> the width of the path

</return>
</function>

<function name="clutter_units_get_unit_value">
<description>
Retrieves the value stored inside @units

Since: 1.0

</description>
<parameters>
<parameter name="units">
<parameter_description> a #ClutterUnits
</parameter_description>
</parameter>
</parameters>
<return> the value stored inside a #ClutterUnits

</return>
</function>

<function name="clutter_get_show_fps">
<description>
Returns whether Clutter should print out the frames per second on the
console. You can enable this setting either using the
&lt;literal&gt;CLUTTER_SHOW_FPS&lt;/literal&gt; environment variable or passing
the &lt;literal&gt;--clutter-show-fps&lt;/literal&gt; command line argument. *

Since: 0.4

</description>
<parameters>
</parameters>
<return> %TRUE if Clutter should show the FPS.

</return>
</function>

<function name="clutter_box_set_layout_manager">
<description>
Sets the #ClutterLayoutManager for @box

A #ClutterLayoutManager is a delegate object that controls the
layout of the children of @box

Since: 1.2

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterBox
</parameter_description>
</parameter>
<parameter name="manager">
<parameter_description> a #ClutterLayoutManager
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_object_get_string_member">
<description>
Convenience function that retrieves the string value
stored in @member_name of @object

See also: json_object_get_member()

Since: 0.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #JsonObject
</parameter_description>
</parameter>
<parameter name="member_name">
<parameter_description> the name of the member
</parameter_description>
</parameter>
</parameters>
<return> the string value of the object's member

</return>
</function>

<function name="clutter_binding_pool_override_closure">
<description>
A #GClosure variant of clutter_binding_pool_override_action().

Allows overriding the action for @key_val and @modifiers inside a
#ClutterBindingPool. See clutter_binding_pool_install_closure().

When an action has been activated using clutter_binding_pool_activate()
the passed @callback will be invoked (with @data).

Actions can be blocked with clutter_binding_pool_block_action()
and then unblocked using clutter_binding_pool_unblock_action().

Since: 1.0

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="key_val">
<parameter_description> key symbol
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> bitmask of modifiers
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description> a #GClosure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_threads_enter">
<description>
Locks the Clutter thread lock.

Since: 0.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="clutter_box_pack">
<description>
Adds @actor to @box and sets layout properties at the same time,
if the #ClutterLayoutManager used by @box has them

This function is a wrapper around clutter_container_add_actor()
and clutter_layout_manager_child_set()

Language bindings should use the vector-based clutter_box_addv()
variant instead

Since: 1.2

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterBox
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="first_property">
<parameter_description> the name of the first property to set, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of property name and value pairs, terminated by %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_binding_pool_remove_action">
<description>
Removes the action matching the given @key_val, @modifiers pair,
if any exists.

Since: 1.0

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="key_val">
<parameter_description> a key symbol
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> a bitmask for the modifiers
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_container_remove_valist">
<description>
Alternative va_list version of clutter_container_remove().

Since: 0.4

</description>
<parameters>
<parameter name="container">
<parameter_description> a #ClutterContainer
</parameter_description>
</parameter>
<parameter name="first_actor">
<parameter_description> the first #ClutterActor to add
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> list of actors to remove, followed by %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_set_size">
<description>
Sets the actor's size request in pixels. This overrides any
&quot;normal&quot; size request the actor would have. For example
a text actor might normally request the size of the text;
this function would force a specific size instead.

If @width and/or @height are -1 the actor will use its
&quot;normal&quot; size request instead of overriding it, i.e.
you can &quot;unset&quot; the size with -1.

This function sets or unsets both the minimum and natural size.

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> New width of actor in pixels, or -1
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> New height of actor in pixels, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_box_layout_set_expand">
<description>
Sets whether @actor should expand inside @layout

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterBoxLayout
</parameter_description>
</parameter>
<parameter name="actor">
<parameter_description> a #ClutterActor child of @layout
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> whether @actor should expand
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_behaviour_get_nth_actor">
<description>
Gets an actor the behaviour was applied to referenced by index num.

Since: 0.2

</description>
<parameters>
<parameter name="behave">
<parameter_description> a #ClutterBehaviour
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of an actor this behaviour is applied too. 
</parameter_description>
</parameter>
</parameters>
<return> A Clutter actor or NULL if @index_ is invalid.

</return>
</function>

<function name="clutter_behaviour_opacity_new">
<description>
Creates a new #ClutterBehaviourOpacity object, driven by @alpha
which controls the opacity property of every actor, making it
change in the interval between @opacity_start and @opacity_end.

Since: 0.2

</description>
<parameters>
<parameter name="alpha">
<parameter_description> a #ClutterAlpha instance, or %NULL
</parameter_description>
</parameter>
<parameter name="opacity_start">
<parameter_description> minimum level of opacity
</parameter_description>
</parameter>
<parameter name="opacity_end">
<parameter_description> maximum level of opacity
</parameter_description>
</parameter>
</parameters>
<return> the newly created #ClutterBehaviourOpacity

</return>
</function>

<function name="clutter_shader_get_is_enabled">
<description>
Checks whether @shader is enabled.

Since: 0.6

</description>
<parameters>
<parameter name="shader">
<parameter_description> a #ClutterShader
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the shader is enabled.

</return>
</function>

<function name="clutter_actor_get_abs_allocation_vertices">
<description>
Calculates the transformed screen coordinates of the four corners of
the actor; the returned vertices relate to the #ClutterActorBox
coordinates  as follows:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;v[0] contains (x1, y1)&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;v[1] contains (x2, y1)&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;v[2] contains (x1, y2)&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;v[3] contains (x2, y2)&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> A #ClutterActor
</parameter_description>
</parameter>
<parameter name="verts">
<parameter_description> Pointer to a location of an array
of 4 #ClutterVertex where to store the result.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_node_copy">
<description>
Copies @node. If the node contains complex data types then the reference
count of the objects is increased.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> the copied #JsonNode
</return>
</function>

<function name="clutter_event_get_button">
<description>
Retrieves the button number of @event

Since: 1.0

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent of type %CLUTTER_BUTTON_PRESS or
of type %CLUTTER_BUTTON_RELEASE
</parameter_description>
</parameter>
</parameters>
<return> the button number

</return>
</function>

<function name="clutter_stage_hide_cursor">
<description>
Makes the cursor invisible on the stage window

Since: 0.4

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_box_get_y">
<description>
Retrieves the Y coordinate of the origin of @box

Since: 1.0

</description>
<parameters>
<parameter name="box">
<parameter_description> a #ClutterActorBox
</parameter_description>
</parameter>
</parameters>
<return> the Y coordinate of the origin

</return>
</function>

<function name="clutter_value_set_units">
<description>
Sets @value to @units

Since: 0.8

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue initialized to #CLUTTER_TYPE_UNIT
</parameter_description>
</parameter>
<parameter name="units">
<parameter_description> the units to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_value_get_shader_int">
<description>
Retrieves the list of integer values stored inside the passed
#GValue. @value must have been initialized with
%CLUTTER_TYPE_SHADER_INT.

Since: 0.8

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the number of returned integer
values, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the pointer to a list of integer values.
The returned value is owned by the #GValue and should never
be modified or freed.

</return>
</function>

<function name="clutter_texture_new_from_actor">
<description>
Creates a new #ClutterTexture object with its source a prexisting
actor (and associated children). The textures content will contain
'live' redirected output of the actors scene.

Note this function is intented as a utility call for uniformly applying
shaders to groups and other potential visual effects. It requires that
the %CLUTTER_FEATURE_OFFSCREEN feature is supported by the current backend
and the target system.

Some tips on usage:

&lt;itemizedlist&gt;
&lt;listitem&gt;
&lt;para&gt;The source actor must be made visible (i.e by calling
#clutter_actor_show).&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;The source actor must have a parent in order for it to be
allocated a size from the layouting mechanism. If the source
actor does not have a parent when this function is called then
the ClutterTexture will adopt it and allocate it at its
preferred size. Using this you can clone an actor that is
otherwise not displayed. Because of this feature if you do
intend to display the source actor then you must make sure that
the actor is parented before calling
clutter_texture_new_from_actor() or that you unparent it before
adding it to a container.&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;When getting the image for the clone texture, Clutter
will attempt to render the source actor exactly as it would
appear if it was rendered on screen. The source actor's parent
transformations are taken into account. Therefore if your
source actor is rotated along the X or Y axes so that it has
some depth, the texture will appear differently depending on
the on-screen location of the source actor. While painting the
source actor, Clutter will set up a temporary asymmetric
perspective matrix as the projection matrix so that the source
actor will be projected as if a small section of the screen was
being viewed. Before version 0.8.2, an orthogonal identity
projection was used which meant that the source actor would be
clipped if any part of it was not on the zero Z-plane.&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;Avoid reparenting the source with the created texture.&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;A group can be padded with a transparent rectangle as to
provide a border to contents for shader output (blurring text
for example).&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;The texture will automatically resize to contain a further
transformed source. However, this involves overhead and can be
avoided by placing the source actor in a bounding group
sized large enough to contain any child tranformations.&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;Uploading pixel data to the texture (e.g by using
clutter_actor_set_from_file()) will destroy the offscreen texture data
and end redirection.&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;cogl_texture_get_data() with the handle returned by
clutter_texture_get_cogl_texture() can be used to read the
offscreen texture pixels into a pixbuf.&lt;/para&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;

Since: 0.6

</description>
<parameters>
<parameter name="actor">
<parameter_description> A source #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> A newly created #ClutterTexture object, or %NULL on failure.

</return>
</function>

<function name="clutter_device_manager_get_core_device">
<description>
Retrieves the core #ClutterInputDevice of type @device_type

Core devices are devices created automatically by the default
Clutter backend

Since: 1.2

</description>
<parameters>
<parameter name="device_manager">
<parameter_description> a #ClutterDeviceManager
</parameter_description>
</parameter>
<parameter name="device_type">
<parameter_description> the type of the core device
</parameter_description>
</parameter>
</parameters>
<return> a #ClutterInputDevice or %NULL. The
returned device is owned by the #ClutterDeviceManager and should
not be modified or freed

</return>
</function>

<function name="clutter_backend_set_double_click_time">
<description>
Sets the maximum time between two button press events, used to
verify whether it's a double click event or not.

Since: 0.4

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #ClutterBackend
</parameter_description>
</parameter>
<parameter name="msec">
<parameter_description> milliseconds between two button press events
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_stage_get_fullscreen">
<description>
Retrieves whether the stage is full screen or not

Since: 1.0

</description>
<parameters>
<parameter name="stage">
<parameter_description> a #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stage is full screen

</return>
</function>

<function name="clutter_actor_get_text_direction">
<description>
Retrieves the value set using clutter_actor_set_text_direction()

If no text direction has been previously set, the default text
direction, as returned by clutter_get_default_text_direction(), will
be returned instead

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the #ClutterTextDirection for the actor

</return>
</function>

<function name="clutter_actor_set_shader">
<description>
Sets the #ClutterShader to be used when rendering @self.

If @shader is %NULL it will unset any currently set shader
for the actor.

Since: 0.6

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="shader">
<parameter_description> a #ClutterShader or %NULL to unset the shader.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the shader was successfully applied

</return>
</function>

<function name="clutter_behaviour_ellipse_set_angle_tilt">
<description>
Sets the angle at which the ellipse should be tilted around it's center.

Since: 0.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterBehaviourEllipse
</parameter_description>
</parameter>
<parameter name="axis">
<parameter_description> a #ClutterRotateAxis
</parameter_description>
</parameter>
<parameter name="angle_tilt">
<parameter_description> tilt of the elipse around the center in the given axis in
degrees.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_media_get_buffer_fill">
<description>
Retrieves the amount of the stream that is buffered.

Since: 1.0

</description>
<parameters>
<parameter name="media">
<parameter_description> a #ClutterMedia
</parameter_description>
</parameter>
</parameters>
<return> the fill level, between 0.0 and 1.0

</return>
</function>

<function name="clutter_animator_key_get_progress">
<description>
Retrieves the progress of an clutter_animator_key

Since: 1.2

</description>
<parameters>
<parameter name="key">
<parameter_description> a #ClutterAnimatorKey
</parameter_description>
</parameter>
</parameters>
<return> the progress defined for a #ClutterAnimator key.

</return>
</function>

<function name="clutter_animation_get_mode">
<description>
Retrieves the animation mode of @animation, as set by
clutter_animation_set_mode().

Since: 1.0

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #ClutterAnimation
</parameter_description>
</parameter>
</parameters>
<return> the mode for the animation

</return>
</function>

<function name="json_node_dup_array">
<description>
Retrieves the #JsonArray stored inside a #JsonNode and returns it
with its reference count increased by one.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
</parameters>
<return> the #JsonArray with its reference count increased.
</return>
</function>

<function name="clutter_event_get_state">
<description>
Retrieves the modifier state of the event.

Since: 0.4

</description>
<parameters>
<parameter name="event">
<parameter_description> a #ClutterEvent
</parameter_description>
</parameter>
</parameters>
<return> the modifier state parameter, or 0

</return>
</function>

<function name="clutter_path_add_rel_line_to">
<description>
Same as clutter_path_add_line_to() except the coordinates are
relative to the previous node.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_model_get_column_name">
<description>
Retrieves the name of the @column

Since: 0.6

</description>
<parameters>
<parameter name="model">
<parameter_description> #ClutterModel
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column number
</parameter_description>
</parameter>
</parameters>
<return> the name of the column. The model holds the returned
string, and it should not be modified or freed

</return>
</function>

<function name="clutter_text_set_text">
<description>
Sets the contents of a #ClutterText actor.

If the #ClutterText:use-markup property was set to %TRUE it
will be reset to %FALSE as a side effect. If you want to
maintain the #ClutterText:use-markup you should use the
clutter_text_set_markup() function instead

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to set. Passing %NULL is the same as passing &quot;&quot; (the
empty string)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_interval_get_value_type">
<description>
Retrieves the #GType of the values inside @interval.

Since: 1.0

</description>
<parameters>
<parameter name="interval">
<parameter_description> a #ClutterInterval
</parameter_description>
</parameter>
</parameters>
<return> the type of the value, or G_TYPE_INVALID

</return>
</function>

<function name="clutter_cairo_texture_create_region">
<description>
Creates a new Cairo context that will updat the region defined
by @x_offset, @y_offset, @width and @height.

&lt;warning&gt;&lt;para&gt;Do not call this function within the paint virtual
function or from a callback to the #ClutterActor::paint
signal.&lt;/para&gt;&lt;/warning&gt;

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterCairoTexture
</parameter_description>
</parameter>
<parameter name="x_offset">
<parameter_description> offset of the region on the X axis
</parameter_description>
</parameter>
<parameter name="y_offset">
<parameter_description> offset of the region on the Y axis
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the region, or -1 for the full surface width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the region, or -1 for the full surface height
</parameter_description>
</parameter>
</parameters>
<return> a newly created Cairo context. Use cairo_destroy()
to upload the contents of the context when done drawing

</return>
</function>

<function name="clutter_color_subtract">
<description>
Subtracts @b from @a and saves the resulting color inside @result.

This function assumes that the components of @a are greater than the
components of @b; the result is, otherwise, undefined.

The alpha channel of @result is set as the minimum value
between the alpha channels of @a and @b.

</description>
<parameters>
<parameter name="a">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> a #ClutterColor
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> return location for the result
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_color_new">
<description>
Creates a new #ClutterColor with the given values.

Since: 0.8.4

</description>
<parameters>
<parameter name="red">
<parameter_description> red component of the color, between 0 and 255
</parameter_description>
</parameter>
<parameter name="green">
<parameter_description> green component of the color, between 0 and 255
</parameter_description>
</parameter>
<parameter name="blue">
<parameter_description> blue component of the color, between 0 and 255
</parameter_description>
</parameter>
<parameter name="alpha">
<parameter_description> alpha component of the color, between 0 and 255
</parameter_description>
</parameter>
</parameters>
<return> the newly allocated color. Use clutter_color_free()
when done

</return>
</function>

<function name="clutter_text_set_selectable">
<description>
Sets whether a #ClutterText actor should be selectable.

A selectable #ClutterText will allow selecting its contents using
the pointer or the keyboard.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="selectable">
<parameter_description> whether the #ClutterText actor should be selectable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_binding_pool_install_closure">
<description>
A #GClosure variant of clutter_binding_pool_install_action().

Installs a new action inside a #ClutterBindingPool. The action
is bound to @key_val and @modifiers.

The same action name can be used for multiple @key_val, @modifiers
pairs.

When an action has been activated using clutter_binding_pool_activate()
the passed @closure will be invoked.

Actions can be blocked with clutter_binding_pool_block_action()
and then unblocked using clutter_binding_pool_unblock_action().

Since: 1.0

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #ClutterBindingPool
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of the action
</parameter_description>
</parameter>
<parameter name="key_val">
<parameter_description> key symbol
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> bitmask of modifiers
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description> a #GClosure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="json_array_get_null_element">
<description>
Conveniently retrieves whether the element at @index_ is set to null

See also: json_array_get_element(), JSON_NODE_TYPE(), %JSON_NODE_NULL

Since: 0.8

</description>
<parameters>
<parameter name="array">
<parameter_description> a #JsonArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the element to retrieve
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the element is null

</return>
</function>

<function name="clutter_text_set_cursor_visible">
<description>
Sets whether the cursor of a #ClutterText actor should be
visible or not.

The color of the cursor will be the same as the text color
unless clutter_text_set_cursor_color() has been called.

The size of the cursor can be set using clutter_text_set_cursor_size().

The position of the cursor can be changed programmatically using
clutter_text_set_cursor_position().

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterText
</parameter_description>
</parameter>
<parameter name="cursor_visible">
<parameter_description> whether the cursor should be visible
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_group_remove_all">
<description>
Removes all children actors from the #ClutterGroup.

</description>
<parameters>
<parameter name="group">
<parameter_description> A #ClutterGroup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_actor_get_transformation_matrix">
<description>
Retrieves the transformations applied to @self

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
<parameter name="matrix">
<parameter_description> the return location for a #CoglMatrix
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_script_get_object">
<description>
Retrieves the object bound to @name. This function does not increment
the reference count of the returned object.

Since: 0.6

</description>
<parameters>
<parameter name="script">
<parameter_description> a #ClutterScript
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the object to retrieve
</parameter_description>
</parameter>
</parameters>
<return> : (transfer none): the named object, or %NULL if no object
with the given name was available

</return>
</function>

<function name="json_node_get_value">
<description>
Retrieves a value from a #JsonNode and copies into @value. When done
using it, call g_value_unset() on the #GValue.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #JsonNode
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> return location for an uninitialized value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_timeline_get_delta">
<description>
Retrieves the amount of time elapsed since the last
ClutterTimeline::new-frame signal.

This function is only useful inside handlers for the ::new-frame
signal, and its behaviour is undefined if the timeline is not
playing.

Since: 0.6

</description>
<parameters>
<parameter name="timeline">
<parameter_description> a #ClutterTimeline
</parameter_description>
</parameter>
</parameters>
<return> the amount of time in milliseconds elapsed since the
last frame

</return>
</function>

<function name="clutter_stage_ensure_current">
<description>
This function essentially makes sure the right GL context is
current for the passed stage. It is not intended to
be used by applications.

Since: 0.8

</description>
<parameters>
<parameter name="stage">
<parameter_description> the #ClutterStage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_path_insert_node">
<description>
Inserts @node into the path before the node at the given offset. If
@index_ is negative it will append the node to the end of the path.

Since: 1.0

</description>
<parameters>
<parameter name="path">
<parameter_description> a #ClutterPath
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> offset of where to insert the node
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> the node to insert
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_flow_layout_set_row_spacing">
<description>
Sets the spacing between rows, in pixels

Since: 1.2

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #ClutterFlowLayout
</parameter_description>
</parameter>
<parameter name="spacing">
<parameter_description> the space between rows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_rectangle_new">
<description>
Creates a new #ClutterActor with a rectangular shape.


</description>
<parameters>
</parameters>
<return> a new #ClutterActor
</return>
</function>

<function name="clutter_actor_get_pango_context">
<description>
Retrieves the #PangoContext for @self. The actor's #PangoContext
is already configured using the appropriate font map, resolution
and font options.

Unlike clutter_actor_create_pango_context(), this context is owend
by the #ClutterActor and it will be updated each time the options
stored by the #ClutterBackend change.

You can use the returned #PangoContext to create a #PangoLayout
and render text using cogl_pango_render_layout() to reuse the
glyphs cache also used by Clutter.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a #ClutterActor
</parameter_description>
</parameter>
</parameters>
<return> the #PangoContext for a #ClutterActor.
The returned #PangoContext is owned by the actor and should not be
unreferenced by the application code

</return>
</function>

<function name="clutter_score_rewind">
<description>
Rewinds a #ClutterScore to its initial state.

Since: 0.6

</description>
<parameters>
<parameter name="score">
<parameter_description> A #ClutterScore
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="clutter_media_set_subtitle_font_name">
<description>
Sets the font used by the subtitle renderer. The @font_name string must be
either %NULL, which means that the default font name of the underlying
implementation will be used; or must follow the grammar recognized by
pango_font_description_from_string() like:

|[
clutter_media_set_subtitle_font_name (media, &quot;Sans 24pt&quot;);
]|

Since: 1.2

</description>
<parameters>
<parameter name="media">
<parameter_description> a #ClutterMedia
</parameter_description>
</parameter>
<parameter name="font_name">
<parameter_description> a font name, or %NULL to set the default font name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

</root>
