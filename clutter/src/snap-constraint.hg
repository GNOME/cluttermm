/* Copyright (C) 2014 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>
#include <cluttermm/types.h>
#include <cluttermm/constraint.h>

_DEFS(cluttermm,clutter)
_PINCLUDE(cluttermm/private/constraint_p.h)


namespace Clutter
{

class Actor;
class Constraint;

_WRAP_ENUM(SnapEdge, ClutterSnapEdge)

/** SnapConstraint is a constraint the snaps the edges of two actors
 * together, expanding the actor's allocation if necessary.
 *
 * An offset can be applied to the constraint, to provide spacing.
 *
 * @newin{1,6}
 */
class SnapConstraint : public Constraint
{
  _CLASS_GOBJECT(SnapConstraint, ClutterSnapConstraint, CLUTTER_SNAP_CONSTRAINT, Constraint, ClutterConstraint)
  _DERIVES_INITIALLY_UNOWNED()

protected:
  _WRAP_CTOR(SnapConstraint(const Glib::RefPtr<Actor>& source, SnapEdge from_edge, SnapEdge to_edge, float offset), clutter_snap_constraint_new)

public:

  _WRAP_CREATE(const Glib::RefPtr<Actor>& source, SnapEdge from_edge, SnapEdge to_edge, float offset)

  _WRAP_METHOD(void set_source(const Glib::RefPtr<Actor>& source), clutter_snap_constraint_set_source)

  _WRAP_METHOD(Glib::RefPtr<Actor> get_source(), clutter_snap_constraint_get_source, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Actor> get_source() const, clutter_snap_constraint_get_source, refreturn, constversion)

  _WRAP_METHOD(void set_edges(SnapEdge from_edge, SnapEdge to_edge), clutter_snap_constraint_set_edges)

  //TODO : using two enum return parameters.
  //~ _WRAP_METHOD_DOCS_ONLY(clutter_snap_constraint_get_edges)
  //~ void get_edges(SnapEdge* from_edge, SnapEdge* to_edge) const;

  _WRAP_METHOD(void set_offset(float offset), clutter_snap_constraint_set_offset)

  _WRAP_METHOD(float get_offset() const, clutter_snap_constraint_get_offset)

  _WRAP_PROPERTY("from-edge", SnapEdge)
  _WRAP_PROPERTY("offset", float)
  _WRAP_PROPERTY("source", Glib::RefPtr<Actor>)
  _WRAP_PROPERTY("to-edge", SnapEdge)

};

} // namespace Clutter
